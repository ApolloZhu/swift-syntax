%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From Tokens.swift.gyb.
//// Do Not Edit Directly!
//===--- Tokens.swift -----------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

fileprivate func defaultTrivia(presence: SourcePresence, trivia: Trivia) -> Trivia {
  switch presence {
  case .present:
    return trivia
  case .missing:
    return []
  }
}

extension TokenSyntax {
% for token in SYNTAX_TOKENS:
%   leading_trivia = '.space' if token.requires_leading_space else '[]'
%   trailing_trivia = '.space' if token.requires_trailing_space else '[]'
%   if token.is_keyword:
  public static func ${token.swift_kind()}(
    leadingTrivia: Trivia? = nil,
    trailingTrivia: Trivia? = nil,
    presence: SourcePresence = .present
  ) -> TokenSyntax {
    return TokenSyntax(
      .${token.swift_kind()},
      leadingTrivia: leadingTrivia ?? defaultTrivia(presence: presence, trivia: ${leading_trivia}),
      trailingTrivia: trailingTrivia ?? defaultTrivia(presence: presence, trivia: ${trailing_trivia}),
      presence: presence
    )
  }
%   elif token.text:
  public static func ${token.swift_kind()}Token(
    leadingTrivia: Trivia? = nil,
    trailingTrivia: Trivia? = nil,
    presence: SourcePresence = .present
  ) -> TokenSyntax {
    return TokenSyntax(
      .${token.swift_kind()},
      leadingTrivia: leadingTrivia ?? defaultTrivia(presence: presence, trivia: ${leading_trivia}),
      trailingTrivia: trailingTrivia ?? defaultTrivia(presence: presence, trivia: ${trailing_trivia}),
      presence: presence
    )
  }
%   else:
  public static func ${token.swift_kind()}(
    _ text: String,
    leadingTrivia: Trivia? = nil,
    trailingTrivia: Trivia? = nil,
    presence: SourcePresence = .present
  ) -> TokenSyntax {
    return TokenSyntax(
      .${token.swift_kind()}(text),
      leadingTrivia: leadingTrivia ?? defaultTrivia(presence: presence, trivia: ${leading_trivia}),
      trailingTrivia: trailingTrivia ?? defaultTrivia(presence: presence, trivia: ${trailing_trivia}),
      presence: presence
    )
  }
%   end
% end
  public static func eof(
    leadingTrivia: Trivia? = nil,
    presence: SourcePresence = .present
  ) -> TokenSyntax {
    return TokenSyntax(
      .eof,
      leadingTrivia: leadingTrivia ?? defaultTrivia(presence: presence, trivia: ${leading_trivia}),
      trailingTrivia: [],
      presence: presence
    )
  }
}
