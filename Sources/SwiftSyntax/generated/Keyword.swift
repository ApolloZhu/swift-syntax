

//// Automatically Generated by generate-swiftparser
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//



/// Make `StaticString` equatable so we can use it as the raw value for Keyword.
extension StaticString: Equatable {
  public static func == (lhs: StaticString, rhs: StaticString) -> Bool {
    return SyntaxText(lhs) == SyntaxText(rhs)
  }
}

@frozen  // FIXME: Not actually stable, works around a miscompile
public enum Keyword: StaticString {
  case __consuming
  
  case __objc_bridged
  
  case __owned
  
  case __raw_doc_comment
  
  case __setter_access
  
  case __shared
  
  case __synthesized_protocol
  
  case _alignment
  
  case _alwaysEmitConformanceMetadata
  
  case _alwaysEmitIntoClient
  
  case _assemblyVision
  
  case _backDeploy
  
  case _borrow
  
  case _borrowed
  
  case _cdecl
  
  case _clangImporterSynthesizedType
  
  case _Class
  
  case _compilerInitialized
  
  case _const
  
  case _custom
  
  case _disfavoredOverload
  
  case _documentation
  
  case _dynamicReplacement
  
  case _eagerMove
  
  case _effects
  
  case _exported
  
  case _expose
  
  case _fixed_layout
  
  case _forbidSerializingReference
  
  case _forward
  
  case _frozen
  
  case _hasInitialValue
  
  case _hasMissingDesignatedInitializers
  
  case _hasStorage
  
  case _implementationOnly
  
  case _implements
  
  case _implicitSelfCapture
  
  case _inheritActorContext
  
  case _inheritsConvenienceInitializers
  
  case _linear
  
  case _local
  
  case _marker
  
  case _modify
  
  case _move
  
  case _moveOnly
  
  case _NativeClass
  
  case _NativeRefCountedObject
  
  case _noAllocation
  
  case _noEagerMove
  
  case _noImplicitCopy
  
  case _noLocks
  
  case _noMetadata
  
  case _nonEphemeral
  
  case _nonoverride
  
  case _nonSendable
  
  case _objc_non_lazy_realization
  
  case _objcImplementation
  
  case _objcRuntimeName
  
  case _opaqueReturnTypeOf
  
  case _optimize
  
  case _originallyDefinedIn
  
  case _PackageDescription
  
  case _private
  
  case _projectedValueProperty
  
  case _read
  
  case _RefCountedObject
  
  case _restatedObjCConformance
  
  case _semantics
  
  case _show_in_interface
  
  case _silgen_name
  
  case _specialize
  
  case _specializeExtension
  
  case _spi
  
  case _spi_available
  
  case _spiOnly
  
  case _staticInitializeObjCMetadata
  
  case _swift_native_objc_runtime_base
  
  case _transparent
  
  case _Trivial
  
  case _TrivialAtMost
  
  case _typeEraser
  
  case _unavailableFromAsync
  
  case _UnknownLayout
  
  case _unsafeInheritExecutor
  
  case _weakLinked
  
  case actor
  
  case addressWithNativeOwner
  
  case addressWithOwner
  
  case any
  
  case assignment
  
  case `associatedtype`
  
  case associativity
  
  case async
  
  case autoclosure
  
  case availability
  
  case available
  
  case await
  
  case `break`
  
  case `case`
  
  case `catch`
  
  case `class`
  
  case `continue`
  
  case convenience
  
  case convention
  
  case `default`
  
  case `defer`
  
  case `deinit`
  
  case deprecated
  
  case derivative
  
  case didSet
  
  case differentiable
  
  case discardableResult
  
  case distributed
  
  case `do`
  
  case dynamic
  
  case dynamicCallable
  
  case dynamicMemberLookup
  
  case each
  
  case `else`
  
  case `enum`
  
  case escaping
  
  case exclusivity
  
  case exported
  
  case `extension`
  
  case `fallthrough`
  
  case `fileprivate`
  
  case final
  
  case `for`
  
  case frozen
  
  case `func`
  
  case get
  
  case GKInspectable
  
  case globalActor
  
  case `guard`
  
  case higherThan
  
  case IBAction
  
  case IBDesignable
  
  case IBInspectable
  
  case IBOutlet
  
  case IBSegueAction
  
  case `if`
  
  case `import`
  
  case `in`
  
  case indirect
  
  case infix
  
  case `init`
  
  case inlinable
  
  case inline
  
  case `inout`
  
  case `internal`
  
  case introduced
  
  case isolated
  
  case kind
  
  case lazy
  
  case `let`
  
  case LLDBDebuggerFunction
  
  case lowerThan
  
  case macro
  
  case main
  
  case message
  
  case mutableAddressWithNativeOwner
  
  case mutableAddressWithOwner
  
  case mutating
  
  case noasync
  
  case noDerivative
  
  case noescape
  
  case nonisolated
  
  case nonmutating
  
  case nonobjc
  
  case NSApplicationMain
  
  case NSCopying
  
  case NSManaged
  
  case objc
  
  case objcMembers
  
  case obsoleted
  
  case of
  
  case open
  
  case `operator`
  
  case optional
  
  case override
  
  case package
  
  case postfix
  
  case `precedencegroup`
  
  case preconcurrency
  
  case prefix
  
  case `private`
  
  case propertyWrapper
  
  case `Protocol`
  
  case `protocol`
  
  case `public`
  
  case reasync
  
  case renamed
  
  case `repeat`
  
  case required
  
  case requires_stored_property_inits
  
  case resultBuilder
  
  case `rethrows`
  
  case `return`
  
  case reverse
  
  case runtimeMetadata
  
  case safe
  
  case Sendable
  
  case set
  
  case some
  
  case spi
  
  case spiModule
  
  case `static`
  
  case `struct`
  
  case `subscript`
  
  case swift
  
  case `switch`
  
  case target
  
  case testable
  
  case `throw`
  
  case transpose
  
  case `Type`
  
  case `typealias`
  
  case typeWrapper
  
  case typeWrapperIgnored
  
  case UIApplicationMain
  
  case unavailable
  
  case unchecked
  
  case unowned
  
  case unsafe
  
  case unsafe_no_objc_tagged_pointer
  
  case unsafeAddress
  
  case unsafeMutableAddress
  
  case usableFromInline
  
  case `var`
  
  case warn_unqualified_access
  
  case weak
  
  case `where`
  
  case `while`
  
  case willSet
  
  case witness_method
  
  case wrt
  
  case yield
  
  @_spi(RawSyntax) public init?(_ text: SyntaxText) {
    switch text.count {
    case 2: 
      switch text {
      case "do": 
        self = .`do`
      case "if": 
        self = .`if`
      case "in": 
        self = .`in`
      case "of": 
        self = .of
      default: 
        return nil
      }
    case 3: 
      switch text {
      case "any": 
        self = .any
      case "for": 
        self = .`for`
      case "get": 
        self = .get
      case "let": 
        self = .`let`
      case "set": 
        self = .set
      case "spi": 
        self = .spi
      case "var": 
        self = .`var`
      case "wrt": 
        self = .wrt
      default: 
        return nil
      }
    case 4: 
      switch text {
      case "_spi": 
        self = ._spi
      case "case": 
        self = .`case`
      case "each": 
        self = .each
      case "else": 
        self = .`else`
      case "enum": 
        self = .`enum`
      case "func": 
        self = .`func`
      case "init": 
        self = .`init`
      case "kind": 
        self = .kind
      case "lazy": 
        self = .lazy
      case "main": 
        self = .main
      case "objc": 
        self = .objc
      case "open": 
        self = .open
      case "safe": 
        self = .safe
      case "some": 
        self = .some
      case "Type": 
        self = .`Type`
      case "weak": 
        self = .weak
      default: 
        return nil
      }
    case 5: 
      switch text {
      case "_move": 
        self = ._move
      case "_read": 
        self = ._read
      case "actor": 
        self = .actor
      case "async": 
        self = .async
      case "await": 
        self = .await
      case "break": 
        self = .`break`
      case "catch": 
        self = .`catch`
      case "class": 
        self = .`class`
      case "defer": 
        self = .`defer`
      case "final": 
        self = .final
      case "guard": 
        self = .`guard`
      case "infix": 
        self = .infix
      case "inout": 
        self = .`inout`
      case "macro": 
        self = .macro
      case "swift": 
        self = .swift
      case "throw": 
        self = .`throw`
      case "where": 
        self = .`where`
      case "while": 
        self = .`while`
      case "yield": 
        self = .yield
      default: 
        return nil
      }
    case 6: 
      switch text {
      case "_cdecl": 
        self = ._cdecl
      case "_Class": 
        self = ._Class
      case "_const": 
        self = ._const
      case "_local": 
        self = ._local
      case "deinit": 
        self = .`deinit`
      case "didSet": 
        self = .didSet
      case "frozen": 
        self = .frozen
      case "import": 
        self = .`import`
      case "inline": 
        self = .inline
      case "prefix": 
        self = .prefix
      case "public": 
        self = .`public`
      case "repeat": 
        self = .`repeat`
      case "return": 
        self = .`return`
      case "static": 
        self = .`static`
      case "struct": 
        self = .`struct`
      case "switch": 
        self = .`switch`
      case "target": 
        self = .target
      case "unsafe": 
        self = .unsafe
      default: 
        return nil
      }
    case 7: 
      switch text {
      case "__owned": 
        self = .__owned
      case "_borrow": 
        self = ._borrow
      case "_custom": 
        self = ._custom
      case "_expose": 
        self = ._expose
      case "_frozen": 
        self = ._frozen
      case "_linear": 
        self = ._linear
      case "_marker": 
        self = ._marker
      case "_modify": 
        self = ._modify
      case "default": 
        self = .`default`
      case "dynamic": 
        self = .dynamic
      case "message": 
        self = .message
      case "noasync": 
        self = .noasync
      case "nonobjc": 
        self = .nonobjc
      case "package": 
        self = .package
      case "postfix": 
        self = .postfix
      case "private": 
        self = .`private`
      case "reasync": 
        self = .reasync
      case "renamed": 
        self = .renamed
      case "reverse": 
        self = .reverse
      case "unowned": 
        self = .unowned
      case "willSet": 
        self = .willSet
      default: 
        return nil
      }
    case 8: 
      switch text {
      case "__shared": 
        self = .__shared
      case "_effects": 
        self = ._effects
      case "_forward": 
        self = ._forward
      case "_noLocks": 
        self = ._noLocks
      case "_private": 
        self = ._private
      case "_spiOnly": 
        self = ._spiOnly
      case "_Trivial": 
        self = ._Trivial
      case "continue": 
        self = .`continue`
      case "escaping": 
        self = .escaping
      case "exported": 
        self = .exported
      case "IBAction": 
        self = .IBAction
      case "IBOutlet": 
        self = .IBOutlet
      case "indirect": 
        self = .indirect
      case "internal": 
        self = .`internal`
      case "isolated": 
        self = .isolated
      case "mutating": 
        self = .mutating
      case "noescape": 
        self = .noescape
      case "operator": 
        self = .`operator`
      case "optional": 
        self = .optional
      case "override": 
        self = .override
      case "Protocol": 
        self = .`Protocol`
      case "protocol": 
        self = .`protocol`
      case "required": 
        self = .required
      case "rethrows": 
        self = .`rethrows`
      case "Sendable": 
        self = .Sendable
      case "testable": 
        self = .testable
      default: 
        return nil
      }
    case 9: 
      switch text {
      case "_borrowed": 
        self = ._borrowed
      case "_exported": 
        self = ._exported
      case "_moveOnly": 
        self = ._moveOnly
      case "_optimize": 
        self = ._optimize
      case "available": 
        self = .available
      case "extension": 
        self = .`extension`
      case "inlinable": 
        self = .inlinable
      case "lowerThan": 
        self = .lowerThan
      case "NSCopying": 
        self = .NSCopying
      case "NSManaged": 
        self = .NSManaged
      case "obsoleted": 
        self = .obsoleted
      case "spiModule": 
        self = .spiModule
      case "subscript": 
        self = .`subscript`
      case "transpose": 
        self = .transpose
      case "typealias": 
        self = .`typealias`
      case "unchecked": 
        self = .unchecked
      default: 
        return nil
      }
    case 10: 
      switch text {
      case "_alignment": 
        self = ._alignment
      case "_eagerMove": 
        self = ._eagerMove
      case "_semantics": 
        self = ._semantics
      case "assignment": 
        self = .assignment
      case "convention": 
        self = .convention
      case "deprecated": 
        self = .deprecated
      case "derivative": 
        self = .derivative
      case "higherThan": 
        self = .higherThan
      case "introduced": 
        self = .introduced
      default: 
        return nil
      }
    case 11: 
      switch text {
      case "__consuming": 
        self = .__consuming
      case "_backDeploy": 
        self = ._backDeploy
      case "_hasStorage": 
        self = ._hasStorage
      case "_implements": 
        self = ._implements
      case "_noMetadata": 
        self = ._noMetadata
      case "_specialize": 
        self = ._specialize
      case "_typeEraser": 
        self = ._typeEraser
      case "_weakLinked": 
        self = ._weakLinked
      case "autoclosure": 
        self = .autoclosure
      case "convenience": 
        self = .convenience
      case "distributed": 
        self = .distributed
      case "exclusivity": 
        self = .exclusivity
      case "fallthrough": 
        self = .`fallthrough`
      case "fileprivate": 
        self = .`fileprivate`
      case "globalActor": 
        self = .globalActor
      case "nonisolated": 
        self = .nonisolated
      case "nonmutating": 
        self = .nonmutating
      case "objcMembers": 
        self = .objcMembers
      case "typeWrapper": 
        self = .typeWrapper
      case "unavailable": 
        self = .unavailable
      default: 
        return nil
      }
    case 12: 
      switch text {
      case "_NativeClass": 
        self = ._NativeClass
      case "_noEagerMove": 
        self = ._noEagerMove
      case "_nonoverride": 
        self = ._nonoverride
      case "_nonSendable": 
        self = ._nonSendable
      case "_silgen_name": 
        self = ._silgen_name
      case "_transparent": 
        self = ._transparent
      case "availability": 
        self = .availability
      case "IBDesignable": 
        self = .IBDesignable
      case "noDerivative": 
        self = .noDerivative
      default: 
        return nil
      }
    case 13: 
      switch text {
      case "_fixed_layout": 
        self = ._fixed_layout
      case "_noAllocation": 
        self = ._noAllocation
      case "_nonEphemeral": 
        self = ._nonEphemeral
      case "associativity": 
        self = .associativity
      case "GKInspectable": 
        self = .GKInspectable
      case "IBInspectable": 
        self = .IBInspectable
      case "IBSegueAction": 
        self = .IBSegueAction
      case "resultBuilder": 
        self = .resultBuilder
      case "unsafeAddress": 
        self = .unsafeAddress
      default: 
        return nil
      }
    case 14: 
      switch text {
      case "__objc_bridged": 
        self = .__objc_bridged
      case "_documentation": 
        self = ._documentation
      case "_spi_available": 
        self = ._spi_available
      case "_TrivialAtMost": 
        self = ._TrivialAtMost
      case "_UnknownLayout": 
        self = ._UnknownLayout
      case "associatedtype": 
        self = .`associatedtype`
      case "differentiable": 
        self = .differentiable
      case "preconcurrency": 
        self = .preconcurrency
      case "witness_method": 
        self = .witness_method
      default: 
        return nil
      }
    case 15: 
      switch text {
      case "__setter_access": 
        self = .__setter_access
      case "_assemblyVision": 
        self = ._assemblyVision
      case "_noImplicitCopy": 
        self = ._noImplicitCopy
      case "dynamicCallable": 
        self = .dynamicCallable
      case "precedencegroup": 
        self = .`precedencegroup`
      case "propertyWrapper": 
        self = .propertyWrapper
      case "runtimeMetadata": 
        self = .runtimeMetadata
      default: 
        return nil
      }
    case 16: 
      switch text {
      case "_hasInitialValue": 
        self = ._hasInitialValue
      case "_objcRuntimeName": 
        self = ._objcRuntimeName
      case "addressWithOwner": 
        self = .addressWithOwner
      case "usableFromInline": 
        self = .usableFromInline
      default: 
        return nil
      }
    case 17: 
      switch text {
      case "__raw_doc_comment": 
        self = .__raw_doc_comment
      case "_RefCountedObject": 
        self = ._RefCountedObject
      case "discardableResult": 
        self = .discardableResult
      case "NSApplicationMain": 
        self = .NSApplicationMain
      case "UIApplicationMain": 
        self = .UIApplicationMain
      default: 
        return nil
      }
    case 18: 
      switch text {
      case "_show_in_interface": 
        self = ._show_in_interface
      case "typeWrapperIgnored": 
        self = .typeWrapperIgnored
      default: 
        return nil
      }
    case 19: 
      switch text {
      case "_disfavoredOverload": 
        self = ._disfavoredOverload
      case "_dynamicReplacement": 
        self = ._dynamicReplacement
      case "_implementationOnly": 
        self = ._implementationOnly
      case "_objcImplementation": 
        self = ._objcImplementation
      case "_opaqueReturnTypeOf": 
        self = ._opaqueReturnTypeOf
      case "_PackageDescription": 
        self = ._PackageDescription
      case "dynamicMemberLookup": 
        self = .dynamicMemberLookup
      default: 
        return nil
      }
    case 20: 
      switch text {
      case "_compilerInitialized": 
        self = ._compilerInitialized
      case "_implicitSelfCapture": 
        self = ._implicitSelfCapture
      case "_inheritActorContext": 
        self = ._inheritActorContext
      case "_originallyDefinedIn": 
        self = ._originallyDefinedIn
      case "_specializeExtension": 
        self = ._specializeExtension
      case "LLDBDebuggerFunction": 
        self = .LLDBDebuggerFunction
      case "unsafeMutableAddress": 
        self = .unsafeMutableAddress
      default: 
        return nil
      }
    case 21: 
      switch text {
      case "_alwaysEmitIntoClient": 
        self = ._alwaysEmitIntoClient
      case "_unavailableFromAsync": 
        self = ._unavailableFromAsync
      default: 
        return nil
      }
    case 22: 
      switch text {
      case "__synthesized_protocol": 
        self = .__synthesized_protocol
      case "_unsafeInheritExecutor": 
        self = ._unsafeInheritExecutor
      case "addressWithNativeOwner": 
        self = .addressWithNativeOwner
      default: 
        return nil
      }
    case 23: 
      switch text {
      case "_NativeRefCountedObject": 
        self = ._NativeRefCountedObject
      case "_projectedValueProperty": 
        self = ._projectedValueProperty
      case "mutableAddressWithOwner": 
        self = .mutableAddressWithOwner
      case "warn_unqualified_access": 
        self = .warn_unqualified_access
      default: 
        return nil
      }
    case 24: 
      switch text {
      case "_restatedObjCConformance": 
        self = ._restatedObjCConformance
      default: 
        return nil
      }
    case 26: 
      switch text {
      case "_objc_non_lazy_realization": 
        self = ._objc_non_lazy_realization
      default: 
        return nil
      }
    case 27: 
      switch text {
      case "_forbidSerializingReference": 
        self = ._forbidSerializingReference
      default: 
        return nil
      }
    case 29: 
      switch text {
      case "_clangImporterSynthesizedType": 
        self = ._clangImporterSynthesizedType
      case "_staticInitializeObjCMetadata": 
        self = ._staticInitializeObjCMetadata
      case "mutableAddressWithNativeOwner": 
        self = .mutableAddressWithNativeOwner
      case "unsafe_no_objc_tagged_pointer": 
        self = .unsafe_no_objc_tagged_pointer
      default: 
        return nil
      }
    case 30: 
      switch text {
      case "_alwaysEmitConformanceMetadata": 
        self = ._alwaysEmitConformanceMetadata
      case "requires_stored_property_inits": 
        self = .requires_stored_property_inits
      default: 
        return nil
      }
    case 31: 
      switch text {
      case "_swift_native_objc_runtime_base": 
        self = ._swift_native_objc_runtime_base
      default: 
        return nil
      }
    case 32: 
      switch text {
      case "_inheritsConvenienceInitializers": 
        self = ._inheritsConvenienceInitializers
      default: 
        return nil
      }
    case 33: 
      switch text {
      case "_hasMissingDesignatedInitializers": 
        self = ._hasMissingDesignatedInitializers
      default: 
        return nil
      }
    default: 
      return nil
    }
  }
  
  /// Whether the token kind is switched from being an identifier to being an identifier to a keyword in the lexer.
  /// This is true for keywords that used to be considered non-contextual.
  public var isLexerClassified: Bool {
    switch self {
    case .`associatedtype`: 
      return true
    case .`break`: 
      return true
    case .`case`: 
      return true
    case .`catch`: 
      return true
    case .`class`: 
      return true
    case .`continue`: 
      return true
    case .`default`: 
      return true
    case .`defer`: 
      return true
    case .`deinit`: 
      return true
    case .`do`: 
      return true
    case .`else`: 
      return true
    case .`enum`: 
      return true
    case .`extension`: 
      return true
    case .`fallthrough`: 
      return true
    case .`fileprivate`: 
      return true
    case .`for`: 
      return true
    case .`func`: 
      return true
    case .`guard`: 
      return true
    case .`if`: 
      return true
    case .`import`: 
      return true
    case .`in`: 
      return true
    case .`init`: 
      return true
    case .`inout`: 
      return true
    case .`internal`: 
      return true
    case .`let`: 
      return true
    case .`operator`: 
      return true
    case .`precedencegroup`: 
      return true
    case .`private`: 
      return true
    case .`protocol`: 
      return true
    case .`public`: 
      return true
    case .`repeat`: 
      return true
    case .`rethrows`: 
      return true
    case .`return`: 
      return true
    case .`static`: 
      return true
    case .`struct`: 
      return true
    case .`subscript`: 
      return true
    case .`switch`: 
      return true
    case .`throw`: 
      return true
    case .`typealias`: 
      return true
    case .`var`: 
      return true
    case .`where`: 
      return true
    case .`while`: 
      return true
    default: 
      return false
    }
  }
  
  var defaultText: SyntaxText {
    return SyntaxText(self.rawValue)
  }
}
