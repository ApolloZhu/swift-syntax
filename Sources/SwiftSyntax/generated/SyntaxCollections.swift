//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// ### Children
/// 
/// ``AccessorDeclSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AccessorBlockSyntax``.``AccessorBlockSyntax/accessors``
public struct AccessorDeclListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = AccessorDeclSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .accessorDeclList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.accessorDeclList
}

/// ### Children
/// 
/// ``ArrayElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ArrayExprSyntax``.``ArrayExprSyntax/elements``
public struct ArrayElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ArrayElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .arrayElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.arrayElementList
}

/// ### Children
/// 
/// (``AttributeSyntax`` | ``IfConfigDeclSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/attributes``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/attributes``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/attributes``
///  - ``AttributedTypeSyntax``.``AttributedTypeSyntax/attributes``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/attributes``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/attributes``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/attributes``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/attributes``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/attributes``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/attributes``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/attributes``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/attributes``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/attributes``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/attributes``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/attributes``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/elements``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/attributes``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/attributes``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/attributes``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/attributes``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/attributes``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/attributes``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/attributes``
///  - ``StructDeclSyntax``.``StructDeclSyntax/attributes``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/attributes``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/attributes``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/attributes``
public struct AttributeListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices {
    case `attribute`(AttributeSyntax)
    case `ifConfigDecl`(IfConfigDeclSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .attribute(let node):
        return node._syntaxNode
      case .ifConfigDecl(let node):
        return node._syntaxNode
      }
    }
    
    init(_ data: SyntaxData) {
      self.init(Syntax(data))!
    }
    
    public init(_ node: AttributeSyntax) {
      self = .attribute(node)
    }
    
    public init(_ node: IfConfigDeclSyntax) {
      self = .ifConfigDecl(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(AttributeSyntax.self) {
        self = .attribute(node)
        return
      }
      if let node = node.as(IfConfigDeclSyntax.self) {
        self = .ifConfigDecl(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
          .node(AttributeSyntax.self),
          .node(IfConfigDeclSyntax.self)])
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .attributeList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.attributeList
}

/// ### Children
/// 
/// ``AvailabilityArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/availabilityArguments``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/availabilityArguments``
public struct AvailabilityArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = AvailabilityArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .availabilityArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.availabilityArgumentList
}

/// ### Children
/// 
/// ``CatchClauseSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``DoStmtSyntax``.``DoStmtSyntax/catchClauses``
public struct CatchClauseListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = CatchClauseSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .catchClauseList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.catchClauseList
}

/// ### Children
/// 
/// ``CatchItemSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``CatchClauseSyntax``.``CatchClauseSyntax/catchItems``
public struct CatchItemListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = CatchItemSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .catchItemList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.catchItemList
}

/// ### Children
/// 
/// ``ClosureCaptureSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ClosureCaptureClauseSyntax``.``ClosureCaptureClauseSyntax/items``
public struct ClosureCaptureListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ClosureCaptureSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .closureCaptureList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.closureCaptureList
}

/// ### Children
/// 
/// ``ClosureParameterSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ClosureParameterClauseSyntax``.``ClosureParameterClauseSyntax/parameters``
public struct ClosureParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ClosureParameterSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .closureParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.closureParameterList
}

/// ### Children
/// 
/// ``ClosureShorthandParameterSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/parameterClause``
public struct ClosureShorthandParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ClosureShorthandParameterSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .closureShorthandParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.closureShorthandParameterList
}

/// ### Children
/// 
/// ``CodeBlockItemSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/statements``
///  - ``CodeBlockSyntax``.``CodeBlockSyntax/statements``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/elements``
///  - ``SourceFileSyntax``.``SourceFileSyntax/statements``
///  - ``SwitchCaseSyntax``.``SwitchCaseSyntax/statements``
public struct CodeBlockItemListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = CodeBlockItemSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .codeBlockItemList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.codeBlockItemList
}

/// ### Children
/// 
/// ``CompositionTypeElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``CompositionTypeSyntax``.``CompositionTypeSyntax/elements``
public struct CompositionTypeElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = CompositionTypeElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .compositionTypeElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.compositionTypeElementList
}

/// ### Children
/// 
/// ``ConditionElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/conditions``
///  - ``IfExprSyntax``.``IfExprSyntax/conditions``
///  - ``WhileStmtSyntax``.``WhileStmtSyntax/conditions``
public struct ConditionElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ConditionElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .conditionElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.conditionElementList
}

/// ### Children
/// 
/// ``DeclModifierSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/modifiers``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/modifiers``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/modifiers``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/modifiers``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/modifiers``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/modifiers``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/modifiers``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/modifiers``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/modifiers``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/modifiers``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/modifiers``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/modifiers``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/modifiers``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/modifiers``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/modifiers``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/modifiers``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/modifiers``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/modifiers``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/modifiers``
///  - ``StructDeclSyntax``.``StructDeclSyntax/modifiers``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/modifiers``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/modifiers``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/modifiers``
public struct DeclModifierListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DeclModifierSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .declModifierList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.declModifierList
}

/// ### Children
/// 
/// ``DeclNameArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``DeclNameArgumentsSyntax``.``DeclNameArgumentsSyntax/arguments``
public struct DeclNameArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DeclNameArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .declNameArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.declNameArgumentList
}

/// ### Children
/// 
/// ``DesignatedTypeSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``OperatorPrecedenceAndTypesSyntax``.``OperatorPrecedenceAndTypesSyntax/designatedTypes``
public struct DesignatedTypeListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DesignatedTypeSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .designatedTypeList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.designatedTypeList
}

/// ### Children
/// 
/// ``DictionaryElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``DictionaryExprSyntax``.``DictionaryExprSyntax/content``
public struct DictionaryElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DictionaryElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .dictionaryElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.dictionaryElementList
}

/// ### Children
/// 
/// ``DifferentiabilityArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``DifferentiabilityArgumentsSyntax``.``DifferentiabilityArgumentsSyntax/differentiabilityParameters``
public struct DifferentiabilityParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DifferentiabilityArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .differentiabilityParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.differentiabilityParameterList
}

/// The arguments of the '@_documentation' attribute
///
/// ### Children
/// 
/// ``DocumentationAttributeArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
public struct DocumentationAttributeArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = DocumentationAttributeArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .documentationAttributeArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.documentationAttributeArgumentList
}

/// The arguments of the '@_effect' attribute. These will be parsed during the SIL stage.
///
/// ### Children
/// 
/// ``TokenSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
public struct EffectsAttributeArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = TokenSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .effectsAttributeArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.effectsAttributeArgumentList
}

/// A collection of 0 or more `EnumCaseElement`s.
///
/// ### Children
/// 
/// ``EnumCaseElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/elements``
public struct EnumCaseElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = EnumCaseElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .enumCaseElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.enumCaseElementList
}

/// ### Children
/// 
/// ``EnumCaseParameterSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``EnumCaseParameterClauseSyntax``.``EnumCaseParameterClauseSyntax/parameters``
public struct EnumCaseParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = EnumCaseParameterSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .enumCaseParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.enumCaseParameterList
}

/// A list of expressions connected by operators. This list is contained by a ``SequenceExprSyntax``.
///
/// ### Children
/// 
/// ``ExprSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``SequenceExprSyntax``.``SequenceExprSyntax/elements``
public struct ExprListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ExprSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .exprList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.exprList
}

/// ### Children
/// 
/// ``FunctionParameterSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``FunctionParameterClauseSyntax``.``FunctionParameterClauseSyntax/parameters``
public struct FunctionParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = FunctionParameterSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .functionParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.functionParameterList
}

/// ### Children
/// 
/// ``GenericArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``GenericArgumentClauseSyntax``.``GenericArgumentClauseSyntax/arguments``
public struct GenericArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = GenericArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .genericArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.genericArgumentList
}

/// ### Children
/// 
/// ``GenericParameterSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/parameters``
public struct GenericParameterListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = GenericParameterSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .genericParameterList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.genericParameterList
}

/// ### Children
/// 
/// ``GenericRequirementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``GenericWhereClauseSyntax``.``GenericWhereClauseSyntax/requirements``
public struct GenericRequirementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = GenericRequirementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .genericRequirementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.genericRequirementList
}

/// ### Children
/// 
/// ``IfConfigClauseSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``IfConfigDeclSyntax``.``IfConfigDeclSyntax/clauses``
public struct IfConfigClauseListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = IfConfigClauseSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .ifConfigClauseList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.ifConfigClauseList
}

/// ### Children
/// 
/// ``ImportPathComponentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/path``
public struct ImportPathComponentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ImportPathComponentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .importPathComponentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.importPathComponentList
}

/// ### Children
/// 
/// ``InheritedTypeSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``InheritanceClauseSyntax``.``InheritanceClauseSyntax/inheritedTypes``
public struct InheritedTypeListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = InheritedTypeSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .inheritedTypeList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.inheritedTypeList
}

/// ### Children
/// 
/// ``KeyPathComponentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``KeyPathExprSyntax``.``KeyPathExprSyntax/components``
public struct KeyPathComponentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = KeyPathComponentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .keyPathComponentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.keyPathComponentList
}

/// ### Children
/// 
/// ``MemberBlockItemSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/elements``
///  - ``MemberBlockSyntax``.``MemberBlockSyntax/members``
public struct MemberBlockItemListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = MemberBlockItemSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .memberBlockItemList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.memberBlockItemList
}

/// ### Children
/// 
/// ``MultipleTrailingClosureElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/additionalTrailingClosures``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/additionalTrailingClosures``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/additionalTrailingClosures``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/additionalTrailingClosures``
public struct MultipleTrailingClosureElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = MultipleTrailingClosureElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .multipleTrailingClosureElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.multipleTrailingClosureElementList
}

/// ### Children
/// 
/// ``ObjCSelectorPieceSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
public struct ObjCSelectorPieceListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = ObjCSelectorPieceSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .objCSelectorPieceList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.objCSelectorPieceList
}

/// ### Children
/// 
/// ``PatternBindingSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/bindings``
public struct PatternBindingListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = PatternBindingSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .patternBindingList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.patternBindingList
}

/// ### Children
/// 
/// ``PlatformVersionItemSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``BackDeployedAttributeArgumentsSyntax``.``BackDeployedAttributeArgumentsSyntax/platforms``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/platforms``
public struct PlatformVersionItemListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = PlatformVersionItemSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .platformVersionItemList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.platformVersionItemList
}

/// ### Children
/// 
/// (``PrecedenceGroupRelationSyntax`` | ``PrecedenceGroupAssignmentSyntax`` | ``PrecedenceGroupAssociativitySyntax``) `*`
///
/// ### Contained in
/// 
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/groupAttributes``
public struct PrecedenceGroupAttributeListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices {
    case `precedenceGroupRelation`(PrecedenceGroupRelationSyntax)
    case `precedenceGroupAssignment`(PrecedenceGroupAssignmentSyntax)
    case `precedenceGroupAssociativity`(PrecedenceGroupAssociativitySyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .precedenceGroupRelation(let node):
        return node._syntaxNode
      case .precedenceGroupAssignment(let node):
        return node._syntaxNode
      case .precedenceGroupAssociativity(let node):
        return node._syntaxNode
      }
    }
    
    init(_ data: SyntaxData) {
      self.init(Syntax(data))!
    }
    
    public init(_ node: PrecedenceGroupRelationSyntax) {
      self = .precedenceGroupRelation(node)
    }
    
    public init(_ node: PrecedenceGroupAssignmentSyntax) {
      self = .precedenceGroupAssignment(node)
    }
    
    public init(_ node: PrecedenceGroupAssociativitySyntax) {
      self = .precedenceGroupAssociativity(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(PrecedenceGroupRelationSyntax.self) {
        self = .precedenceGroupRelation(node)
        return
      }
      if let node = node.as(PrecedenceGroupAssignmentSyntax.self) {
        self = .precedenceGroupAssignment(node)
        return
      }
      if let node = node.as(PrecedenceGroupAssociativitySyntax.self) {
        self = .precedenceGroupAssociativity(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
          .node(PrecedenceGroupRelationSyntax.self),
          .node(PrecedenceGroupAssignmentSyntax.self),
          .node(PrecedenceGroupAssociativitySyntax.self)])
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .precedenceGroupAttributeList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.precedenceGroupAttributeList
}

/// ### Children
/// 
/// ``PrecedenceGroupNameSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``PrecedenceGroupRelationSyntax``.``PrecedenceGroupRelationSyntax/precedenceGroups``
public struct PrecedenceGroupNameListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = PrecedenceGroupNameSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .precedenceGroupNameList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.precedenceGroupNameList
}

/// ### Children
/// 
/// ``PrimaryAssociatedTypeSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``PrimaryAssociatedTypeClauseSyntax``.``PrimaryAssociatedTypeClauseSyntax/primaryAssociatedTypes``
public struct PrimaryAssociatedTypeListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = PrimaryAssociatedTypeSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .primaryAssociatedTypeList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.primaryAssociatedTypeList
}

/// A collection of arguments for the `@_specialize` attribute
///
/// ### Children
/// 
/// (``LabeledSpecializeArgumentSyntax`` | ``SpecializeAvailabilityArgumentSyntax`` | ``SpecializeTargetFunctionArgumentSyntax`` | ``GenericWhereClauseSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
public struct SpecializeAttributeArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices {
    case `labeledSpecializeArgument`(LabeledSpecializeArgumentSyntax)
    case `specializeAvailabilityArgument`(SpecializeAvailabilityArgumentSyntax)
    case `specializeTargetFunctionArgument`(SpecializeTargetFunctionArgumentSyntax)
    case `genericWhereClause`(GenericWhereClauseSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .labeledSpecializeArgument(let node):
        return node._syntaxNode
      case .specializeAvailabilityArgument(let node):
        return node._syntaxNode
      case .specializeTargetFunctionArgument(let node):
        return node._syntaxNode
      case .genericWhereClause(let node):
        return node._syntaxNode
      }
    }
    
    init(_ data: SyntaxData) {
      self.init(Syntax(data))!
    }
    
    public init(_ node: LabeledSpecializeArgumentSyntax) {
      self = .labeledSpecializeArgument(node)
    }
    
    public init(_ node: SpecializeAvailabilityArgumentSyntax) {
      self = .specializeAvailabilityArgument(node)
    }
    
    public init(_ node: SpecializeTargetFunctionArgumentSyntax) {
      self = .specializeTargetFunctionArgument(node)
    }
    
    public init(_ node: GenericWhereClauseSyntax) {
      self = .genericWhereClause(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(LabeledSpecializeArgumentSyntax.self) {
        self = .labeledSpecializeArgument(node)
        return
      }
      if let node = node.as(SpecializeAvailabilityArgumentSyntax.self) {
        self = .specializeAvailabilityArgument(node)
        return
      }
      if let node = node.as(SpecializeTargetFunctionArgumentSyntax.self) {
        self = .specializeTargetFunctionArgument(node)
        return
      }
      if let node = node.as(GenericWhereClauseSyntax.self) {
        self = .genericWhereClause(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
            .node(LabeledSpecializeArgumentSyntax.self),
            .node(SpecializeAvailabilityArgumentSyntax.self),
            .node(SpecializeTargetFunctionArgumentSyntax.self),
            .node(GenericWhereClauseSyntax.self)
          ])
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .specializeAttributeArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.specializeAttributeArgumentList
}

/// ### Children
/// 
/// (``StringSegmentSyntax`` | ``ExpressionSegmentSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/segments``
public struct StringLiteralSegmentListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices {
    case `stringSegment`(StringSegmentSyntax)
    case `expressionSegment`(ExpressionSegmentSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .stringSegment(let node):
        return node._syntaxNode
      case .expressionSegment(let node):
        return node._syntaxNode
      }
    }
    
    init(_ data: SyntaxData) {
      self.init(Syntax(data))!
    }
    
    public init(_ node: StringSegmentSyntax) {
      self = .stringSegment(node)
    }
    
    public init(_ node: ExpressionSegmentSyntax) {
      self = .expressionSegment(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(StringSegmentSyntax.self) {
        self = .stringSegment(node)
        return
      }
      if let node = node.as(ExpressionSegmentSyntax.self) {
        self = .expressionSegment(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
          .node(StringSegmentSyntax.self),
          .node(ExpressionSegmentSyntax.self)])
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .stringLiteralSegmentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.stringLiteralSegmentList
}

/// ### Children
/// 
/// ``SwitchCaseItemSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``SwitchCaseLabelSyntax``.``SwitchCaseLabelSyntax/caseItems``
public struct SwitchCaseItemListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = SwitchCaseItemSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .switchCaseItemList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.switchCaseItemList
}

/// ### Children
/// 
/// (``SwitchCaseSyntax`` | ``IfConfigDeclSyntax``) `*`
///
/// ### Contained in
/// 
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/elements``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/cases``
public struct SwitchCaseListSyntax: SyntaxCollection, SyntaxHashable {
  public enum Element: SyntaxChildChoices {
    case `switchCase`(SwitchCaseSyntax)
    case `ifConfigDecl`(IfConfigDeclSyntax)
    
    public var _syntaxNode: Syntax {
      switch self {
      case .switchCase(let node):
        return node._syntaxNode
      case .ifConfigDecl(let node):
        return node._syntaxNode
      }
    }
    
    init(_ data: SyntaxData) {
      self.init(Syntax(data))!
    }
    
    public init(_ node: SwitchCaseSyntax) {
      self = .switchCase(node)
    }
    
    public init(_ node: IfConfigDeclSyntax) {
      self = .ifConfigDecl(node)
    }
    
    public init?(_ node: some SyntaxProtocol) {
      if let node = node.as(SwitchCaseSyntax.self) {
        self = .switchCase(node)
        return
      }
      if let node = node.as(IfConfigDeclSyntax.self) {
        self = .ifConfigDecl(node)
        return
      }
      return nil
    }
    
    public static var structure: SyntaxNodeStructure {
      return .choices([
          .node(SwitchCaseSyntax.self),
          .node(IfConfigDeclSyntax.self)])
    }
  }
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .switchCaseList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.switchCaseList
}

/// ### Children
/// 
/// ``TupleExprElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/properties``
///  - ``AttributeSyntax``.``AttributeSyntax/arguments``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/expressions``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/arguments``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/properties``
///  - ``KeyPathSubscriptComponentSyntax``.``KeyPathSubscriptComponentSyntax/arguments``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/arguments``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/arguments``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/arguments``
///  - ``TupleExprSyntax``.``TupleExprSyntax/elements``
public struct TupleExprElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = TupleExprElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .tupleExprElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.tupleExprElementList
}

/// ### Children
/// 
/// ``TuplePatternElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``TuplePatternSyntax``.``TuplePatternSyntax/elements``
public struct TuplePatternElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = TuplePatternElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .tuplePatternElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.tuplePatternElementList
}

/// ### Children
/// 
/// ``TupleTypeElementSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/parameters``
///  - ``TupleTypeSyntax``.``TupleTypeSyntax/elements``
public struct TupleTypeElementListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = TupleTypeElementSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .tupleTypeElementList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.tupleTypeElementList
}

/// A collection of syntax nodes that occurred in the source code but could not be used to form a valid syntax tree.
///
/// ### Children
/// 
/// ``Syntax`` `*`
///
/// ### Contained in
/// 
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/unexpectedBeforeAccessesKeyword``
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/unexpectedBetweenAccessesKeywordAndLeftParen``
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/unexpectedBetweenLeftParenAndProperties``
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/unexpectedBetweenPropertiesAndRightParen``
///  - ``AccessesEffectSyntax``.``AccessesEffectSyntax/unexpectedAfterRightParen``
///  - ``AccessorBlockSyntax``.``AccessorBlockSyntax/unexpectedBeforeLeftBrace``
///  - ``AccessorBlockSyntax``.``AccessorBlockSyntax/unexpectedBetweenLeftBraceAndAccessors``
///  - ``AccessorBlockSyntax``.``AccessorBlockSyntax/unexpectedBetweenAccessorsAndRightBrace``
///  - ``AccessorBlockSyntax``.``AccessorBlockSyntax/unexpectedAfterRightBrace``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBeforeAttributes``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenAttributesAndModifier``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenModifierAndAccessorSpecifier``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenAccessorSpecifierAndParameters``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenParametersAndEffectSpecifiers``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenEffectSpecifiersAndInitEffects``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedBetweenInitEffectsAndBody``
///  - ``AccessorDeclSyntax``.``AccessorDeclSyntax/unexpectedAfterBody``
///  - ``AccessorEffectSpecifiersSyntax``.``AccessorEffectSpecifiersSyntax/unexpectedBeforeAsyncSpecifier``
///  - ``AccessorEffectSpecifiersSyntax``.``AccessorEffectSpecifiersSyntax/unexpectedBetweenAsyncSpecifierAndThrowsSpecifier``
///  - ``AccessorEffectSpecifiersSyntax``.``AccessorEffectSpecifiersSyntax/unexpectedAfterThrowsSpecifier``
///  - ``AccessorInitEffectsSyntax``.``AccessorInitEffectsSyntax/unexpectedBeforeInitializesEffect``
///  - ``AccessorInitEffectsSyntax``.``AccessorInitEffectsSyntax/unexpectedBetweenInitializesEffectAndAccessesEffect``
///  - ``AccessorInitEffectsSyntax``.``AccessorInitEffectsSyntax/unexpectedAfterAccessesEffect``
///  - ``AccessorParametersSyntax``.``AccessorParametersSyntax/unexpectedBeforeLeftParen``
///  - ``AccessorParametersSyntax``.``AccessorParametersSyntax/unexpectedBetweenLeftParenAndName``
///  - ``AccessorParametersSyntax``.``AccessorParametersSyntax/unexpectedBetweenNameAndRightParen``
///  - ``AccessorParametersSyntax``.``AccessorParametersSyntax/unexpectedAfterRightParen``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBeforeAttributes``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenModifiersAndActorKeyword``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenActorKeywordAndName``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenGenericParameterClauseAndInheritanceClause``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``ActorDeclSyntax``.``ActorDeclSyntax/unexpectedAfterMemberBlock``
///  - ``ArrayElementSyntax``.``ArrayElementSyntax/unexpectedBeforeExpression``
///  - ``ArrayElementSyntax``.``ArrayElementSyntax/unexpectedBetweenExpressionAndTrailingComma``
///  - ``ArrayElementSyntax``.``ArrayElementSyntax/unexpectedAfterTrailingComma``
///  - ``ArrayExprSyntax``.``ArrayExprSyntax/unexpectedBeforeLeftSquare``
///  - ``ArrayExprSyntax``.``ArrayExprSyntax/unexpectedBetweenLeftSquareAndElements``
///  - ``ArrayExprSyntax``.``ArrayExprSyntax/unexpectedBetweenElementsAndRightSquare``
///  - ``ArrayExprSyntax``.``ArrayExprSyntax/unexpectedAfterRightSquare``
///  - ``ArrayTypeSyntax``.``ArrayTypeSyntax/unexpectedBeforeLeftSquare``
///  - ``ArrayTypeSyntax``.``ArrayTypeSyntax/unexpectedBetweenLeftSquareAndElement``
///  - ``ArrayTypeSyntax``.``ArrayTypeSyntax/unexpectedBetweenElementAndRightSquare``
///  - ``ArrayTypeSyntax``.``ArrayTypeSyntax/unexpectedAfterRightSquare``
///  - ``ArrowExprSyntax``.``ArrowExprSyntax/unexpectedBeforeEffectSpecifiers``
///  - ``ArrowExprSyntax``.``ArrowExprSyntax/unexpectedBetweenEffectSpecifiersAndArrow``
///  - ``ArrowExprSyntax``.``ArrowExprSyntax/unexpectedAfterArrow``
///  - ``AsExprSyntax``.``AsExprSyntax/unexpectedBeforeExpression``
///  - ``AsExprSyntax``.``AsExprSyntax/unexpectedBetweenExpressionAndAsKeyword``
///  - ``AsExprSyntax``.``AsExprSyntax/unexpectedBetweenAsKeywordAndQuestionOrExclamationMark``
///  - ``AsExprSyntax``.``AsExprSyntax/unexpectedBetweenQuestionOrExclamationMarkAndType``
///  - ``AsExprSyntax``.``AsExprSyntax/unexpectedAfterType``
///  - ``AssignmentExprSyntax``.``AssignmentExprSyntax/unexpectedBeforeEqual``
///  - ``AssignmentExprSyntax``.``AssignmentExprSyntax/unexpectedAfterEqual``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBeforeAttributes``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenModifiersAndAssociatedtypeKeyword``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenAssociatedtypeKeywordAndName``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenNameAndInheritanceClause``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenInheritanceClauseAndInitializer``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedBetweenInitializerAndGenericWhereClause``
///  - ``AssociatedTypeDeclSyntax``.``AssociatedTypeDeclSyntax/unexpectedAfterGenericWhereClause``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedBeforeAtSign``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedBetweenAtSignAndAttributeName``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedBetweenAttributeNameAndLeftParen``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``AttributeSyntax``.``AttributeSyntax/unexpectedAfterRightParen``
///  - ``AttributedTypeSyntax``.``AttributedTypeSyntax/unexpectedBeforeSpecifier``
///  - ``AttributedTypeSyntax``.``AttributedTypeSyntax/unexpectedBetweenSpecifierAndAttributes``
///  - ``AttributedTypeSyntax``.``AttributedTypeSyntax/unexpectedBetweenAttributesAndBaseType``
///  - ``AttributedTypeSyntax``.``AttributedTypeSyntax/unexpectedAfterBaseType``
///  - ``AvailabilityArgumentSyntax``.``AvailabilityArgumentSyntax/unexpectedBeforeArgument``
///  - ``AvailabilityArgumentSyntax``.``AvailabilityArgumentSyntax/unexpectedBetweenArgumentAndTrailingComma``
///  - ``AvailabilityArgumentSyntax``.``AvailabilityArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/unexpectedBeforeAvailabilityKeyword``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/unexpectedBetweenAvailabilityKeywordAndLeftParen``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/unexpectedBetweenLeftParenAndAvailabilityArguments``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/unexpectedBetweenAvailabilityArgumentsAndRightParen``
///  - ``AvailabilityConditionSyntax``.``AvailabilityConditionSyntax/unexpectedAfterRightParen``
///  - ``AvailabilityLabeledArgumentSyntax``.``AvailabilityLabeledArgumentSyntax/unexpectedBeforeLabel``
///  - ``AvailabilityLabeledArgumentSyntax``.``AvailabilityLabeledArgumentSyntax/unexpectedBetweenLabelAndColon``
///  - ``AvailabilityLabeledArgumentSyntax``.``AvailabilityLabeledArgumentSyntax/unexpectedBetweenColonAndValue``
///  - ``AvailabilityLabeledArgumentSyntax``.``AvailabilityLabeledArgumentSyntax/unexpectedAfterValue``
///  - ``AwaitExprSyntax``.``AwaitExprSyntax/unexpectedBeforeAwaitKeyword``
///  - ``AwaitExprSyntax``.``AwaitExprSyntax/unexpectedBetweenAwaitKeywordAndExpression``
///  - ``AwaitExprSyntax``.``AwaitExprSyntax/unexpectedAfterExpression``
///  - ``BackDeployedAttributeArgumentsSyntax``.``BackDeployedAttributeArgumentsSyntax/unexpectedBeforeBeforeLabel``
///  - ``BackDeployedAttributeArgumentsSyntax``.``BackDeployedAttributeArgumentsSyntax/unexpectedBetweenBeforeLabelAndColon``
///  - ``BackDeployedAttributeArgumentsSyntax``.``BackDeployedAttributeArgumentsSyntax/unexpectedBetweenColonAndPlatforms``
///  - ``BackDeployedAttributeArgumentsSyntax``.``BackDeployedAttributeArgumentsSyntax/unexpectedAfterPlatforms``
///  - ``BinaryOperatorExprSyntax``.``BinaryOperatorExprSyntax/unexpectedBeforeOperator``
///  - ``BinaryOperatorExprSyntax``.``BinaryOperatorExprSyntax/unexpectedAfterOperator``
///  - ``BooleanLiteralExprSyntax``.``BooleanLiteralExprSyntax/unexpectedBeforeLiteral``
///  - ``BooleanLiteralExprSyntax``.``BooleanLiteralExprSyntax/unexpectedAfterLiteral``
///  - ``BorrowExprSyntax``.``BorrowExprSyntax/unexpectedBeforeBorrowKeyword``
///  - ``BorrowExprSyntax``.``BorrowExprSyntax/unexpectedBetweenBorrowKeywordAndExpression``
///  - ``BorrowExprSyntax``.``BorrowExprSyntax/unexpectedAfterExpression``
///  - ``BreakStmtSyntax``.``BreakStmtSyntax/unexpectedBeforeBreakKeyword``
///  - ``BreakStmtSyntax``.``BreakStmtSyntax/unexpectedBetweenBreakKeywordAndLabel``
///  - ``BreakStmtSyntax``.``BreakStmtSyntax/unexpectedAfterLabel``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedBeforeCanImportKeyword``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedBetweenCanImportKeywordAndLeftParen``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedBetweenLeftParenAndImportPath``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedBetweenImportPathAndVersionInfo``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedBetweenVersionInfoAndRightParen``
///  - ``CanImportExprSyntax``.``CanImportExprSyntax/unexpectedAfterRightParen``
///  - ``CanImportVersionInfoSyntax``.``CanImportVersionInfoSyntax/unexpectedBeforeComma``
///  - ``CanImportVersionInfoSyntax``.``CanImportVersionInfoSyntax/unexpectedBetweenCommaAndLabel``
///  - ``CanImportVersionInfoSyntax``.``CanImportVersionInfoSyntax/unexpectedBetweenLabelAndColon``
///  - ``CanImportVersionInfoSyntax``.``CanImportVersionInfoSyntax/unexpectedBetweenColonAndVersion``
///  - ``CanImportVersionInfoSyntax``.``CanImportVersionInfoSyntax/unexpectedAfterVersion``
///  - ``CatchClauseSyntax``.``CatchClauseSyntax/unexpectedBeforeCatchKeyword``
///  - ``CatchClauseSyntax``.``CatchClauseSyntax/unexpectedBetweenCatchKeywordAndCatchItems``
///  - ``CatchClauseSyntax``.``CatchClauseSyntax/unexpectedBetweenCatchItemsAndBody``
///  - ``CatchClauseSyntax``.``CatchClauseSyntax/unexpectedAfterBody``
///  - ``CatchItemSyntax``.``CatchItemSyntax/unexpectedBeforePattern``
///  - ``CatchItemSyntax``.``CatchItemSyntax/unexpectedBetweenPatternAndWhereClause``
///  - ``CatchItemSyntax``.``CatchItemSyntax/unexpectedBetweenWhereClauseAndTrailingComma``
///  - ``CatchItemSyntax``.``CatchItemSyntax/unexpectedAfterTrailingComma``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBeforeAttributes``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenModifiersAndClassKeyword``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenClassKeywordAndName``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenGenericParameterClauseAndInheritanceClause``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``ClassDeclSyntax``.``ClassDeclSyntax/unexpectedAfterMemberBlock``
///  - ``ClassRestrictionTypeSyntax``.``ClassRestrictionTypeSyntax/unexpectedBeforeClassKeyword``
///  - ``ClassRestrictionTypeSyntax``.``ClassRestrictionTypeSyntax/unexpectedAfterClassKeyword``
///  - ``ClosureCaptureClauseSyntax``.``ClosureCaptureClauseSyntax/unexpectedBeforeLeftSquare``
///  - ``ClosureCaptureClauseSyntax``.``ClosureCaptureClauseSyntax/unexpectedBetweenLeftSquareAndItems``
///  - ``ClosureCaptureClauseSyntax``.``ClosureCaptureClauseSyntax/unexpectedBetweenItemsAndRightSquare``
///  - ``ClosureCaptureClauseSyntax``.``ClosureCaptureClauseSyntax/unexpectedAfterRightSquare``
///  - ``ClosureCaptureSpecifierSyntax``.``ClosureCaptureSpecifierSyntax/unexpectedBeforeSpecifier``
///  - ``ClosureCaptureSpecifierSyntax``.``ClosureCaptureSpecifierSyntax/unexpectedBetweenSpecifierAndLeftParen``
///  - ``ClosureCaptureSpecifierSyntax``.``ClosureCaptureSpecifierSyntax/unexpectedBetweenLeftParenAndDetail``
///  - ``ClosureCaptureSpecifierSyntax``.``ClosureCaptureSpecifierSyntax/unexpectedBetweenDetailAndRightParen``
///  - ``ClosureCaptureSpecifierSyntax``.``ClosureCaptureSpecifierSyntax/unexpectedAfterRightParen``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedBeforeSpecifier``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedBetweenSpecifierAndName``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedBetweenNameAndEqual``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedBetweenEqualAndExpression``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedBetweenExpressionAndTrailingComma``
///  - ``ClosureCaptureSyntax``.``ClosureCaptureSyntax/unexpectedAfterTrailingComma``
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/unexpectedBeforeLeftBrace``
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/unexpectedBetweenLeftBraceAndSignature``
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/unexpectedBetweenSignatureAndStatements``
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/unexpectedBetweenStatementsAndRightBrace``
///  - ``ClosureExprSyntax``.``ClosureExprSyntax/unexpectedAfterRightBrace``
///  - ``ClosureParameterClauseSyntax``.``ClosureParameterClauseSyntax/unexpectedBeforeLeftParen``
///  - ``ClosureParameterClauseSyntax``.``ClosureParameterClauseSyntax/unexpectedBetweenLeftParenAndParameters``
///  - ``ClosureParameterClauseSyntax``.``ClosureParameterClauseSyntax/unexpectedBetweenParametersAndRightParen``
///  - ``ClosureParameterClauseSyntax``.``ClosureParameterClauseSyntax/unexpectedAfterRightParen``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBeforeAttributes``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenModifiersAndFirstName``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenFirstNameAndSecondName``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenSecondNameAndColon``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenColonAndType``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenTypeAndEllipsis``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedBetweenEllipsisAndTrailingComma``
///  - ``ClosureParameterSyntax``.``ClosureParameterSyntax/unexpectedAfterTrailingComma``
///  - ``ClosureShorthandParameterSyntax``.``ClosureShorthandParameterSyntax/unexpectedBeforeName``
///  - ``ClosureShorthandParameterSyntax``.``ClosureShorthandParameterSyntax/unexpectedBetweenNameAndTrailingComma``
///  - ``ClosureShorthandParameterSyntax``.``ClosureShorthandParameterSyntax/unexpectedAfterTrailingComma``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBeforeAttributes``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBetweenAttributesAndCapture``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBetweenCaptureAndParameterClause``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBetweenParameterClauseAndEffectSpecifiers``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBetweenEffectSpecifiersAndReturnClause``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedBetweenReturnClauseAndInKeyword``
///  - ``ClosureSignatureSyntax``.``ClosureSignatureSyntax/unexpectedAfterInKeyword``
///  - ``CodeBlockItemSyntax``.``CodeBlockItemSyntax/unexpectedBeforeItem``
///  - ``CodeBlockItemSyntax``.``CodeBlockItemSyntax/unexpectedBetweenItemAndSemicolon``
///  - ``CodeBlockItemSyntax``.``CodeBlockItemSyntax/unexpectedAfterSemicolon``
///  - ``CodeBlockSyntax``.``CodeBlockSyntax/unexpectedBeforeLeftBrace``
///  - ``CodeBlockSyntax``.``CodeBlockSyntax/unexpectedBetweenLeftBraceAndStatements``
///  - ``CodeBlockSyntax``.``CodeBlockSyntax/unexpectedBetweenStatementsAndRightBrace``
///  - ``CodeBlockSyntax``.``CodeBlockSyntax/unexpectedAfterRightBrace``
///  - ``CompositionTypeElementSyntax``.``CompositionTypeElementSyntax/unexpectedBeforeType``
///  - ``CompositionTypeElementSyntax``.``CompositionTypeElementSyntax/unexpectedBetweenTypeAndAmpersand``
///  - ``CompositionTypeElementSyntax``.``CompositionTypeElementSyntax/unexpectedAfterAmpersand``
///  - ``CompositionTypeSyntax``.``CompositionTypeSyntax/unexpectedBeforeElements``
///  - ``CompositionTypeSyntax``.``CompositionTypeSyntax/unexpectedAfterElements``
///  - ``ConditionElementSyntax``.``ConditionElementSyntax/unexpectedBeforeCondition``
///  - ``ConditionElementSyntax``.``ConditionElementSyntax/unexpectedBetweenConditionAndTrailingComma``
///  - ``ConditionElementSyntax``.``ConditionElementSyntax/unexpectedAfterTrailingComma``
///  - ``ConformanceRequirementSyntax``.``ConformanceRequirementSyntax/unexpectedBeforeLeftType``
///  - ``ConformanceRequirementSyntax``.``ConformanceRequirementSyntax/unexpectedBetweenLeftTypeAndColon``
///  - ``ConformanceRequirementSyntax``.``ConformanceRequirementSyntax/unexpectedBetweenColonAndRightType``
///  - ``ConformanceRequirementSyntax``.``ConformanceRequirementSyntax/unexpectedAfterRightType``
///  - ``ConsumeExprSyntax``.``ConsumeExprSyntax/unexpectedBeforeConsumeKeyword``
///  - ``ConsumeExprSyntax``.``ConsumeExprSyntax/unexpectedBetweenConsumeKeywordAndExpression``
///  - ``ConsumeExprSyntax``.``ConsumeExprSyntax/unexpectedAfterExpression``
///  - ``ContinueStmtSyntax``.``ContinueStmtSyntax/unexpectedBeforeContinueKeyword``
///  - ``ContinueStmtSyntax``.``ContinueStmtSyntax/unexpectedBetweenContinueKeywordAndLabel``
///  - ``ContinueStmtSyntax``.``ContinueStmtSyntax/unexpectedAfterLabel``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedBeforeConventionLabel``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedBetweenConventionLabelAndComma``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedBetweenCommaAndCTypeLabel``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedBetweenCTypeLabelAndColon``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedBetweenColonAndCTypeString``
///  - ``ConventionAttributeArgumentsSyntax``.``ConventionAttributeArgumentsSyntax/unexpectedAfterCTypeString``
///  - ``ConventionWitnessMethodAttributeArgumentsSyntax``.``ConventionWitnessMethodAttributeArgumentsSyntax/unexpectedBeforeWitnessMethodLabel``
///  - ``ConventionWitnessMethodAttributeArgumentsSyntax``.``ConventionWitnessMethodAttributeArgumentsSyntax/unexpectedBetweenWitnessMethodLabelAndColon``
///  - ``ConventionWitnessMethodAttributeArgumentsSyntax``.``ConventionWitnessMethodAttributeArgumentsSyntax/unexpectedBetweenColonAndProtocolName``
///  - ``ConventionWitnessMethodAttributeArgumentsSyntax``.``ConventionWitnessMethodAttributeArgumentsSyntax/unexpectedAfterProtocolName``
///  - ``CopyExprSyntax``.``CopyExprSyntax/unexpectedBeforeCopyKeyword``
///  - ``CopyExprSyntax``.``CopyExprSyntax/unexpectedBetweenCopyKeywordAndExpression``
///  - ``CopyExprSyntax``.``CopyExprSyntax/unexpectedAfterExpression``
///  - ``DeclModifierDetailSyntax``.``DeclModifierDetailSyntax/unexpectedBeforeLeftParen``
///  - ``DeclModifierDetailSyntax``.``DeclModifierDetailSyntax/unexpectedBetweenLeftParenAndDetail``
///  - ``DeclModifierDetailSyntax``.``DeclModifierDetailSyntax/unexpectedBetweenDetailAndRightParen``
///  - ``DeclModifierDetailSyntax``.``DeclModifierDetailSyntax/unexpectedAfterRightParen``
///  - ``DeclModifierSyntax``.``DeclModifierSyntax/unexpectedBeforeName``
///  - ``DeclModifierSyntax``.``DeclModifierSyntax/unexpectedBetweenNameAndDetail``
///  - ``DeclModifierSyntax``.``DeclModifierSyntax/unexpectedAfterDetail``
///  - ``DeclNameArgumentSyntax``.``DeclNameArgumentSyntax/unexpectedBeforeName``
///  - ``DeclNameArgumentSyntax``.``DeclNameArgumentSyntax/unexpectedBetweenNameAndColon``
///  - ``DeclNameArgumentSyntax``.``DeclNameArgumentSyntax/unexpectedAfterColon``
///  - ``DeclNameArgumentsSyntax``.``DeclNameArgumentsSyntax/unexpectedBeforeLeftParen``
///  - ``DeclNameArgumentsSyntax``.``DeclNameArgumentsSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``DeclNameArgumentsSyntax``.``DeclNameArgumentsSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``DeclNameArgumentsSyntax``.``DeclNameArgumentsSyntax/unexpectedAfterRightParen``
///  - ``DeclNameSyntax``.``DeclNameSyntax/unexpectedBeforeBaseName``
///  - ``DeclNameSyntax``.``DeclNameSyntax/unexpectedBetweenBaseNameAndArguments``
///  - ``DeclNameSyntax``.``DeclNameSyntax/unexpectedAfterArguments``
///  - ``DeferStmtSyntax``.``DeferStmtSyntax/unexpectedBeforeDeferKeyword``
///  - ``DeferStmtSyntax``.``DeferStmtSyntax/unexpectedBetweenDeferKeywordAndBody``
///  - ``DeferStmtSyntax``.``DeferStmtSyntax/unexpectedAfterBody``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedBeforeAttributes``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedBetweenModifiersAndDeinitKeyword``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedBetweenDeinitKeywordAndEffectSpecifiers``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedBetweenEffectSpecifiersAndBody``
///  - ``DeinitializerDeclSyntax``.``DeinitializerDeclSyntax/unexpectedAfterBody``
///  - ``DeinitializerEffectSpecifiersSyntax``.``DeinitializerEffectSpecifiersSyntax/unexpectedBeforeAsyncSpecifier``
///  - ``DeinitializerEffectSpecifiersSyntax``.``DeinitializerEffectSpecifiersSyntax/unexpectedAfterAsyncSpecifier``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBeforeOfLabel``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenOfLabelAndColon``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenColonAndOriginalDeclName``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenOriginalDeclNameAndPeriod``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenPeriodAndAccessorSpecifier``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenAccessorSpecifierAndComma``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedBetweenCommaAndParameters``
///  - ``DerivativeAttributeArgumentsSyntax``.``DerivativeAttributeArgumentsSyntax/unexpectedAfterParameters``
///  - ``DesignatedTypeSyntax``.``DesignatedTypeSyntax/unexpectedBeforeLeadingComma``
///  - ``DesignatedTypeSyntax``.``DesignatedTypeSyntax/unexpectedBetweenLeadingCommaAndName``
///  - ``DesignatedTypeSyntax``.``DesignatedTypeSyntax/unexpectedAfterName``
///  - ``DictionaryElementSyntax``.``DictionaryElementSyntax/unexpectedBeforeKey``
///  - ``DictionaryElementSyntax``.``DictionaryElementSyntax/unexpectedBetweenKeyAndColon``
///  - ``DictionaryElementSyntax``.``DictionaryElementSyntax/unexpectedBetweenColonAndValue``
///  - ``DictionaryElementSyntax``.``DictionaryElementSyntax/unexpectedBetweenValueAndTrailingComma``
///  - ``DictionaryElementSyntax``.``DictionaryElementSyntax/unexpectedAfterTrailingComma``
///  - ``DictionaryExprSyntax``.``DictionaryExprSyntax/unexpectedBeforeLeftSquare``
///  - ``DictionaryExprSyntax``.``DictionaryExprSyntax/unexpectedBetweenLeftSquareAndContent``
///  - ``DictionaryExprSyntax``.``DictionaryExprSyntax/unexpectedBetweenContentAndRightSquare``
///  - ``DictionaryExprSyntax``.``DictionaryExprSyntax/unexpectedAfterRightSquare``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedBeforeLeftSquare``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedBetweenLeftSquareAndKey``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedBetweenKeyAndColon``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedBetweenColonAndValue``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedBetweenValueAndRightSquare``
///  - ``DictionaryTypeSyntax``.``DictionaryTypeSyntax/unexpectedAfterRightSquare``
///  - ``DifferentiabilityArgumentSyntax``.``DifferentiabilityArgumentSyntax/unexpectedBeforeParameter``
///  - ``DifferentiabilityArgumentSyntax``.``DifferentiabilityArgumentSyntax/unexpectedBetweenParameterAndTrailingComma``
///  - ``DifferentiabilityArgumentSyntax``.``DifferentiabilityArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``DifferentiabilityArgumentsSyntax``.``DifferentiabilityArgumentsSyntax/unexpectedBeforeLeftParen``
///  - ``DifferentiabilityArgumentsSyntax``.``DifferentiabilityArgumentsSyntax/unexpectedBetweenLeftParenAndDifferentiabilityParameters``
///  - ``DifferentiabilityArgumentsSyntax``.``DifferentiabilityArgumentsSyntax/unexpectedBetweenDifferentiabilityParametersAndRightParen``
///  - ``DifferentiabilityArgumentsSyntax``.``DifferentiabilityArgumentsSyntax/unexpectedAfterRightParen``
///  - ``DifferentiabilityWithRespectToArgumentSyntax``.``DifferentiabilityWithRespectToArgumentSyntax/unexpectedBeforeWrtLabel``
///  - ``DifferentiabilityWithRespectToArgumentSyntax``.``DifferentiabilityWithRespectToArgumentSyntax/unexpectedBetweenWrtLabelAndColon``
///  - ``DifferentiabilityWithRespectToArgumentSyntax``.``DifferentiabilityWithRespectToArgumentSyntax/unexpectedBetweenColonAndParameters``
///  - ``DifferentiabilityWithRespectToArgumentSyntax``.``DifferentiabilityWithRespectToArgumentSyntax/unexpectedAfterParameters``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedBeforeKindSpecifier``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedBetweenKindSpecifierAndKindSpecifierComma``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedBetweenKindSpecifierCommaAndParameters``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedBetweenParametersAndParametersComma``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedBetweenParametersCommaAndGenericWhereClause``
///  - ``DifferentiableAttributeArgumentsSyntax``.``DifferentiableAttributeArgumentsSyntax/unexpectedAfterGenericWhereClause``
///  - ``DiscardAssignmentExprSyntax``.``DiscardAssignmentExprSyntax/unexpectedBeforeWildcard``
///  - ``DiscardAssignmentExprSyntax``.``DiscardAssignmentExprSyntax/unexpectedAfterWildcard``
///  - ``DiscardStmtSyntax``.``DiscardStmtSyntax/unexpectedBeforeDiscardKeyword``
///  - ``DiscardStmtSyntax``.``DiscardStmtSyntax/unexpectedBetweenDiscardKeywordAndExpression``
///  - ``DiscardStmtSyntax``.``DiscardStmtSyntax/unexpectedAfterExpression``
///  - ``DoStmtSyntax``.``DoStmtSyntax/unexpectedBeforeDoKeyword``
///  - ``DoStmtSyntax``.``DoStmtSyntax/unexpectedBetweenDoKeywordAndBody``
///  - ``DoStmtSyntax``.``DoStmtSyntax/unexpectedBetweenBodyAndCatchClauses``
///  - ``DoStmtSyntax``.``DoStmtSyntax/unexpectedAfterCatchClauses``
///  - ``DocumentationAttributeArgumentSyntax``.``DocumentationAttributeArgumentSyntax/unexpectedBeforeLabel``
///  - ``DocumentationAttributeArgumentSyntax``.``DocumentationAttributeArgumentSyntax/unexpectedBetweenLabelAndColon``
///  - ``DocumentationAttributeArgumentSyntax``.``DocumentationAttributeArgumentSyntax/unexpectedBetweenColonAndValue``
///  - ``DocumentationAttributeArgumentSyntax``.``DocumentationAttributeArgumentSyntax/unexpectedBetweenValueAndTrailingComma``
///  - ``DocumentationAttributeArgumentSyntax``.``DocumentationAttributeArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``DynamicReplacementAttributeArgumentsSyntax``.``DynamicReplacementAttributeArgumentsSyntax/unexpectedBeforeForLabel``
///  - ``DynamicReplacementAttributeArgumentsSyntax``.``DynamicReplacementAttributeArgumentsSyntax/unexpectedBetweenForLabelAndColon``
///  - ``DynamicReplacementAttributeArgumentsSyntax``.``DynamicReplacementAttributeArgumentsSyntax/unexpectedBetweenColonAndDeclName``
///  - ``DynamicReplacementAttributeArgumentsSyntax``.``DynamicReplacementAttributeArgumentsSyntax/unexpectedAfterDeclName``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/unexpectedBeforeAttributes``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/unexpectedBetweenModifiersAndPlaceholder``
///  - ``EditorPlaceholderDeclSyntax``.``EditorPlaceholderDeclSyntax/unexpectedAfterPlaceholder``
///  - ``EditorPlaceholderExprSyntax``.``EditorPlaceholderExprSyntax/unexpectedBeforePlaceholder``
///  - ``EditorPlaceholderExprSyntax``.``EditorPlaceholderExprSyntax/unexpectedAfterPlaceholder``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/unexpectedBeforeAttributes``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/unexpectedBetweenModifiersAndCaseKeyword``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/unexpectedBetweenCaseKeywordAndElements``
///  - ``EnumCaseDeclSyntax``.``EnumCaseDeclSyntax/unexpectedAfterElements``
///  - ``EnumCaseElementSyntax``.``EnumCaseElementSyntax/unexpectedBeforeName``
///  - ``EnumCaseElementSyntax``.``EnumCaseElementSyntax/unexpectedBetweenNameAndParameterClause``
///  - ``EnumCaseElementSyntax``.``EnumCaseElementSyntax/unexpectedBetweenParameterClauseAndRawValue``
///  - ``EnumCaseElementSyntax``.``EnumCaseElementSyntax/unexpectedBetweenRawValueAndTrailingComma``
///  - ``EnumCaseElementSyntax``.``EnumCaseElementSyntax/unexpectedAfterTrailingComma``
///  - ``EnumCaseParameterClauseSyntax``.``EnumCaseParameterClauseSyntax/unexpectedBeforeLeftParen``
///  - ``EnumCaseParameterClauseSyntax``.``EnumCaseParameterClauseSyntax/unexpectedBetweenLeftParenAndParameters``
///  - ``EnumCaseParameterClauseSyntax``.``EnumCaseParameterClauseSyntax/unexpectedBetweenParametersAndRightParen``
///  - ``EnumCaseParameterClauseSyntax``.``EnumCaseParameterClauseSyntax/unexpectedAfterRightParen``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBeforeModifiers``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenModifiersAndFirstName``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenFirstNameAndSecondName``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenSecondNameAndColon``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenColonAndType``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenTypeAndDefaultValue``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedBetweenDefaultValueAndTrailingComma``
///  - ``EnumCaseParameterSyntax``.``EnumCaseParameterSyntax/unexpectedAfterTrailingComma``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBeforeAttributes``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenModifiersAndEnumKeyword``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenEnumKeywordAndName``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenGenericParameterClauseAndInheritanceClause``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``EnumDeclSyntax``.``EnumDeclSyntax/unexpectedAfterMemberBlock``
///  - ``ExposeAttributeArgumentsSyntax``.``ExposeAttributeArgumentsSyntax/unexpectedBeforeLanguage``
///  - ``ExposeAttributeArgumentsSyntax``.``ExposeAttributeArgumentsSyntax/unexpectedBetweenLanguageAndComma``
///  - ``ExposeAttributeArgumentsSyntax``.``ExposeAttributeArgumentsSyntax/unexpectedBetweenCommaAndCxxName``
///  - ``ExposeAttributeArgumentsSyntax``.``ExposeAttributeArgumentsSyntax/unexpectedAfterCxxName``
///  - ``ExpressionPatternSyntax``.``ExpressionPatternSyntax/unexpectedBeforeExpression``
///  - ``ExpressionPatternSyntax``.``ExpressionPatternSyntax/unexpectedAfterExpression``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedBeforeBackslash``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedBetweenBackslashAndPounds``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedBetweenPoundsAndLeftParen``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedBetweenLeftParenAndExpressions``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedBetweenExpressionsAndRightParen``
///  - ``ExpressionSegmentSyntax``.``ExpressionSegmentSyntax/unexpectedAfterRightParen``
///  - ``ExpressionStmtSyntax``.``ExpressionStmtSyntax/unexpectedBeforeExpression``
///  - ``ExpressionStmtSyntax``.``ExpressionStmtSyntax/unexpectedAfterExpression``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBeforeAttributes``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenModifiersAndExtensionKeyword``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenExtensionKeywordAndExtendedType``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenExtendedTypeAndInheritanceClause``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``ExtensionDeclSyntax``.``ExtensionDeclSyntax/unexpectedAfterMemberBlock``
///  - ``FallThroughStmtSyntax``.``FallThroughStmtSyntax/unexpectedBeforeFallthroughKeyword``
///  - ``FallThroughStmtSyntax``.``FallThroughStmtSyntax/unexpectedAfterFallthroughKeyword``
///  - ``FloatLiteralExprSyntax``.``FloatLiteralExprSyntax/unexpectedBeforeLiteral``
///  - ``FloatLiteralExprSyntax``.``FloatLiteralExprSyntax/unexpectedAfterLiteral``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBeforeForKeyword``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenForKeywordAndTryKeyword``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenTryKeywordAndAwaitKeyword``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenAwaitKeywordAndCaseKeyword``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenCaseKeywordAndPattern``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenPatternAndTypeAnnotation``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenTypeAnnotationAndInKeyword``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenInKeywordAndSequence``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenSequenceAndWhereClause``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedBetweenWhereClauseAndBody``
///  - ``ForStmtSyntax``.``ForStmtSyntax/unexpectedAfterBody``
///  - ``ForceUnwrapExprSyntax``.``ForceUnwrapExprSyntax/unexpectedBeforeExpression``
///  - ``ForceUnwrapExprSyntax``.``ForceUnwrapExprSyntax/unexpectedBetweenExpressionAndExclamationMark``
///  - ``ForceUnwrapExprSyntax``.``ForceUnwrapExprSyntax/unexpectedAfterExclamationMark``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBeforeCalledExpression``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBetweenCalledExpressionAndLeftParen``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBetweenRightParenAndTrailingClosure``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures``
///  - ``FunctionCallExprSyntax``.``FunctionCallExprSyntax/unexpectedAfterAdditionalTrailingClosures``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBeforeAttributes``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenModifiersAndFuncKeyword``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenFuncKeywordAndName``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenGenericParameterClauseAndSignature``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenSignatureAndGenericWhereClause``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedBetweenGenericWhereClauseAndBody``
///  - ``FunctionDeclSyntax``.``FunctionDeclSyntax/unexpectedAfterBody``
///  - ``FunctionEffectSpecifiersSyntax``.``FunctionEffectSpecifiersSyntax/unexpectedBeforeAsyncSpecifier``
///  - ``FunctionEffectSpecifiersSyntax``.``FunctionEffectSpecifiersSyntax/unexpectedBetweenAsyncSpecifierAndThrowsSpecifier``
///  - ``FunctionEffectSpecifiersSyntax``.``FunctionEffectSpecifiersSyntax/unexpectedAfterThrowsSpecifier``
///  - ``FunctionParameterClauseSyntax``.``FunctionParameterClauseSyntax/unexpectedBeforeLeftParen``
///  - ``FunctionParameterClauseSyntax``.``FunctionParameterClauseSyntax/unexpectedBetweenLeftParenAndParameters``
///  - ``FunctionParameterClauseSyntax``.``FunctionParameterClauseSyntax/unexpectedBetweenParametersAndRightParen``
///  - ``FunctionParameterClauseSyntax``.``FunctionParameterClauseSyntax/unexpectedAfterRightParen``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBeforeAttributes``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenModifiersAndFirstName``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenFirstNameAndSecondName``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenSecondNameAndColon``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenColonAndType``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenTypeAndEllipsis``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenEllipsisAndDefaultValue``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedBetweenDefaultValueAndTrailingComma``
///  - ``FunctionParameterSyntax``.``FunctionParameterSyntax/unexpectedAfterTrailingComma``
///  - ``FunctionSignatureSyntax``.``FunctionSignatureSyntax/unexpectedBeforeParameterClause``
///  - ``FunctionSignatureSyntax``.``FunctionSignatureSyntax/unexpectedBetweenParameterClauseAndEffectSpecifiers``
///  - ``FunctionSignatureSyntax``.``FunctionSignatureSyntax/unexpectedBetweenEffectSpecifiersAndReturnClause``
///  - ``FunctionSignatureSyntax``.``FunctionSignatureSyntax/unexpectedAfterReturnClause``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedBeforeLeftParen``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedBetweenLeftParenAndParameters``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedBetweenParametersAndRightParen``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedBetweenRightParenAndEffectSpecifiers``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedBetweenEffectSpecifiersAndReturnClause``
///  - ``FunctionTypeSyntax``.``FunctionTypeSyntax/unexpectedAfterReturnClause``
///  - ``GenericArgumentClauseSyntax``.``GenericArgumentClauseSyntax/unexpectedBeforeLeftAngle``
///  - ``GenericArgumentClauseSyntax``.``GenericArgumentClauseSyntax/unexpectedBetweenLeftAngleAndArguments``
///  - ``GenericArgumentClauseSyntax``.``GenericArgumentClauseSyntax/unexpectedBetweenArgumentsAndRightAngle``
///  - ``GenericArgumentClauseSyntax``.``GenericArgumentClauseSyntax/unexpectedAfterRightAngle``
///  - ``GenericArgumentSyntax``.``GenericArgumentSyntax/unexpectedBeforeArgument``
///  - ``GenericArgumentSyntax``.``GenericArgumentSyntax/unexpectedBetweenArgumentAndTrailingComma``
///  - ``GenericArgumentSyntax``.``GenericArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/unexpectedBeforeLeftAngle``
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/unexpectedBetweenLeftAngleAndParameters``
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/unexpectedBetweenParametersAndGenericWhereClause``
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/unexpectedBetweenGenericWhereClauseAndRightAngle``
///  - ``GenericParameterClauseSyntax``.``GenericParameterClauseSyntax/unexpectedAfterRightAngle``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBeforeAttributes``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBetweenAttributesAndEachKeyword``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBetweenEachKeywordAndName``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBetweenNameAndColon``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBetweenColonAndInheritedType``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedBetweenInheritedTypeAndTrailingComma``
///  - ``GenericParameterSyntax``.``GenericParameterSyntax/unexpectedAfterTrailingComma``
///  - ``GenericRequirementSyntax``.``GenericRequirementSyntax/unexpectedBeforeRequirement``
///  - ``GenericRequirementSyntax``.``GenericRequirementSyntax/unexpectedBetweenRequirementAndTrailingComma``
///  - ``GenericRequirementSyntax``.``GenericRequirementSyntax/unexpectedAfterTrailingComma``
///  - ``GenericSpecializationExprSyntax``.``GenericSpecializationExprSyntax/unexpectedBeforeExpression``
///  - ``GenericSpecializationExprSyntax``.``GenericSpecializationExprSyntax/unexpectedBetweenExpressionAndGenericArgumentClause``
///  - ``GenericSpecializationExprSyntax``.``GenericSpecializationExprSyntax/unexpectedAfterGenericArgumentClause``
///  - ``GenericWhereClauseSyntax``.``GenericWhereClauseSyntax/unexpectedBeforeWhereKeyword``
///  - ``GenericWhereClauseSyntax``.``GenericWhereClauseSyntax/unexpectedBetweenWhereKeywordAndRequirements``
///  - ``GenericWhereClauseSyntax``.``GenericWhereClauseSyntax/unexpectedAfterRequirements``
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/unexpectedBeforeGuardKeyword``
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/unexpectedBetweenGuardKeywordAndConditions``
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/unexpectedBetweenConditionsAndElseKeyword``
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/unexpectedBetweenElseKeywordAndBody``
///  - ``GuardStmtSyntax``.``GuardStmtSyntax/unexpectedAfterBody``
///  - ``IdentifierExprSyntax``.``IdentifierExprSyntax/unexpectedBeforeIdentifier``
///  - ``IdentifierExprSyntax``.``IdentifierExprSyntax/unexpectedBetweenIdentifierAndDeclNameArguments``
///  - ``IdentifierExprSyntax``.``IdentifierExprSyntax/unexpectedAfterDeclNameArguments``
///  - ``IdentifierPatternSyntax``.``IdentifierPatternSyntax/unexpectedBeforeIdentifier``
///  - ``IdentifierPatternSyntax``.``IdentifierPatternSyntax/unexpectedAfterIdentifier``
///  - ``IdentifierTypeSyntax``.``IdentifierTypeSyntax/unexpectedBeforeName``
///  - ``IdentifierTypeSyntax``.``IdentifierTypeSyntax/unexpectedBetweenNameAndGenericArgumentClause``
///  - ``IdentifierTypeSyntax``.``IdentifierTypeSyntax/unexpectedAfterGenericArgumentClause``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/unexpectedBeforePoundKeyword``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/unexpectedBetweenPoundKeywordAndCondition``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/unexpectedBetweenConditionAndElements``
///  - ``IfConfigClauseSyntax``.``IfConfigClauseSyntax/unexpectedAfterElements``
///  - ``IfConfigDeclSyntax``.``IfConfigDeclSyntax/unexpectedBeforeClauses``
///  - ``IfConfigDeclSyntax``.``IfConfigDeclSyntax/unexpectedBetweenClausesAndPoundEndif``
///  - ``IfConfigDeclSyntax``.``IfConfigDeclSyntax/unexpectedAfterPoundEndif``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedBeforeIfKeyword``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedBetweenIfKeywordAndConditions``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedBetweenConditionsAndBody``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedBetweenBodyAndElseKeyword``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedBetweenElseKeywordAndElseBody``
///  - ``IfExprSyntax``.``IfExprSyntax/unexpectedAfterElseBody``
///  - ``ImplementsAttributeArgumentsSyntax``.``ImplementsAttributeArgumentsSyntax/unexpectedBeforeType``
///  - ``ImplementsAttributeArgumentsSyntax``.``ImplementsAttributeArgumentsSyntax/unexpectedBetweenTypeAndComma``
///  - ``ImplementsAttributeArgumentsSyntax``.``ImplementsAttributeArgumentsSyntax/unexpectedBetweenCommaAndDeclBaseName``
///  - ``ImplementsAttributeArgumentsSyntax``.``ImplementsAttributeArgumentsSyntax/unexpectedBetweenDeclBaseNameAndDeclNameArguments``
///  - ``ImplementsAttributeArgumentsSyntax``.``ImplementsAttributeArgumentsSyntax/unexpectedAfterDeclNameArguments``
///  - ``ImplicitlyUnwrappedOptionalTypeSyntax``.``ImplicitlyUnwrappedOptionalTypeSyntax/unexpectedBeforeWrappedType``
///  - ``ImplicitlyUnwrappedOptionalTypeSyntax``.``ImplicitlyUnwrappedOptionalTypeSyntax/unexpectedBetweenWrappedTypeAndExclamationMark``
///  - ``ImplicitlyUnwrappedOptionalTypeSyntax``.``ImplicitlyUnwrappedOptionalTypeSyntax/unexpectedAfterExclamationMark``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedBeforeAttributes``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedBetweenModifiersAndImportKeyword``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedBetweenImportKeywordAndImportKindSpecifier``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedBetweenImportKindSpecifierAndPath``
///  - ``ImportDeclSyntax``.``ImportDeclSyntax/unexpectedAfterPath``
///  - ``ImportPathComponentSyntax``.``ImportPathComponentSyntax/unexpectedBeforeName``
///  - ``ImportPathComponentSyntax``.``ImportPathComponentSyntax/unexpectedBetweenNameAndTrailingPeriod``
///  - ``ImportPathComponentSyntax``.``ImportPathComponentSyntax/unexpectedAfterTrailingPeriod``
///  - ``InOutExprSyntax``.``InOutExprSyntax/unexpectedBeforeAmpersand``
///  - ``InOutExprSyntax``.``InOutExprSyntax/unexpectedBetweenAmpersandAndExpression``
///  - ``InOutExprSyntax``.``InOutExprSyntax/unexpectedAfterExpression``
///  - ``InfixOperatorExprSyntax``.``InfixOperatorExprSyntax/unexpectedBeforeLeftOperand``
///  - ``InfixOperatorExprSyntax``.``InfixOperatorExprSyntax/unexpectedBetweenLeftOperandAndOperator``
///  - ``InfixOperatorExprSyntax``.``InfixOperatorExprSyntax/unexpectedBetweenOperatorAndRightOperand``
///  - ``InfixOperatorExprSyntax``.``InfixOperatorExprSyntax/unexpectedAfterRightOperand``
///  - ``InheritanceClauseSyntax``.``InheritanceClauseSyntax/unexpectedBeforeColon``
///  - ``InheritanceClauseSyntax``.``InheritanceClauseSyntax/unexpectedBetweenColonAndInheritedTypes``
///  - ``InheritanceClauseSyntax``.``InheritanceClauseSyntax/unexpectedAfterInheritedTypes``
///  - ``InheritedTypeSyntax``.``InheritedTypeSyntax/unexpectedBeforeType``
///  - ``InheritedTypeSyntax``.``InheritedTypeSyntax/unexpectedBetweenTypeAndTrailingComma``
///  - ``InheritedTypeSyntax``.``InheritedTypeSyntax/unexpectedAfterTrailingComma``
///  - ``InitializerClauseSyntax``.``InitializerClauseSyntax/unexpectedBeforeEqual``
///  - ``InitializerClauseSyntax``.``InitializerClauseSyntax/unexpectedBetweenEqualAndValue``
///  - ``InitializerClauseSyntax``.``InitializerClauseSyntax/unexpectedAfterValue``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBeforeAttributes``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenModifiersAndInitKeyword``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenInitKeywordAndOptionalMark``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenOptionalMarkAndGenericParameterClause``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenGenericParameterClauseAndSignature``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenSignatureAndGenericWhereClause``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedBetweenGenericWhereClauseAndBody``
///  - ``InitializerDeclSyntax``.``InitializerDeclSyntax/unexpectedAfterBody``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/unexpectedBeforeInitializesKeyword``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/unexpectedBetweenInitializesKeywordAndLeftParen``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/unexpectedBetweenLeftParenAndProperties``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/unexpectedBetweenPropertiesAndRightParen``
///  - ``InitializesEffectSyntax``.``InitializesEffectSyntax/unexpectedAfterRightParen``
///  - ``IntegerLiteralExprSyntax``.``IntegerLiteralExprSyntax/unexpectedBeforeLiteral``
///  - ``IntegerLiteralExprSyntax``.``IntegerLiteralExprSyntax/unexpectedAfterLiteral``
///  - ``IsExprSyntax``.``IsExprSyntax/unexpectedBeforeExpression``
///  - ``IsExprSyntax``.``IsExprSyntax/unexpectedBetweenExpressionAndIsKeyword``
///  - ``IsExprSyntax``.``IsExprSyntax/unexpectedBetweenIsKeywordAndType``
///  - ``IsExprSyntax``.``IsExprSyntax/unexpectedAfterType``
///  - ``IsTypePatternSyntax``.``IsTypePatternSyntax/unexpectedBeforeIsKeyword``
///  - ``IsTypePatternSyntax``.``IsTypePatternSyntax/unexpectedBetweenIsKeywordAndType``
///  - ``IsTypePatternSyntax``.``IsTypePatternSyntax/unexpectedAfterType``
///  - ``KeyPathComponentSyntax``.``KeyPathComponentSyntax/unexpectedBeforePeriod``
///  - ``KeyPathComponentSyntax``.``KeyPathComponentSyntax/unexpectedBetweenPeriodAndComponent``
///  - ``KeyPathComponentSyntax``.``KeyPathComponentSyntax/unexpectedAfterComponent``
///  - ``KeyPathExprSyntax``.``KeyPathExprSyntax/unexpectedBeforeBackslash``
///  - ``KeyPathExprSyntax``.``KeyPathExprSyntax/unexpectedBetweenBackslashAndRoot``
///  - ``KeyPathExprSyntax``.``KeyPathExprSyntax/unexpectedBetweenRootAndComponents``
///  - ``KeyPathExprSyntax``.``KeyPathExprSyntax/unexpectedAfterComponents``
///  - ``KeyPathOptionalComponentSyntax``.``KeyPathOptionalComponentSyntax/unexpectedBeforeQuestionOrExclamationMark``
///  - ``KeyPathOptionalComponentSyntax``.``KeyPathOptionalComponentSyntax/unexpectedAfterQuestionOrExclamationMark``
///  - ``KeyPathPropertyComponentSyntax``.``KeyPathPropertyComponentSyntax/unexpectedBeforeProperty``
///  - ``KeyPathPropertyComponentSyntax``.``KeyPathPropertyComponentSyntax/unexpectedBetweenPropertyAndDeclNameArguments``
///  - ``KeyPathPropertyComponentSyntax``.``KeyPathPropertyComponentSyntax/unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause``
///  - ``KeyPathPropertyComponentSyntax``.``KeyPathPropertyComponentSyntax/unexpectedAfterGenericArgumentClause``
///  - ``KeyPathSubscriptComponentSyntax``.``KeyPathSubscriptComponentSyntax/unexpectedBeforeLeftSquare``
///  - ``KeyPathSubscriptComponentSyntax``.``KeyPathSubscriptComponentSyntax/unexpectedBetweenLeftSquareAndArguments``
///  - ``KeyPathSubscriptComponentSyntax``.``KeyPathSubscriptComponentSyntax/unexpectedBetweenArgumentsAndRightSquare``
///  - ``KeyPathSubscriptComponentSyntax``.``KeyPathSubscriptComponentSyntax/unexpectedAfterRightSquare``
///  - ``LabeledSpecializeArgumentSyntax``.``LabeledSpecializeArgumentSyntax/unexpectedBeforeLabel``
///  - ``LabeledSpecializeArgumentSyntax``.``LabeledSpecializeArgumentSyntax/unexpectedBetweenLabelAndColon``
///  - ``LabeledSpecializeArgumentSyntax``.``LabeledSpecializeArgumentSyntax/unexpectedBetweenColonAndValue``
///  - ``LabeledSpecializeArgumentSyntax``.``LabeledSpecializeArgumentSyntax/unexpectedBetweenValueAndTrailingComma``
///  - ``LabeledSpecializeArgumentSyntax``.``LabeledSpecializeArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``LabeledStmtSyntax``.``LabeledStmtSyntax/unexpectedBeforeLabel``
///  - ``LabeledStmtSyntax``.``LabeledStmtSyntax/unexpectedBetweenLabelAndColon``
///  - ``LabeledStmtSyntax``.``LabeledStmtSyntax/unexpectedBetweenColonAndStatement``
///  - ``LabeledStmtSyntax``.``LabeledStmtSyntax/unexpectedAfterStatement``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBeforeType``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenTypeAndColon``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenColonAndLayoutSpecifier``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenLayoutSpecifierAndLeftParen``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenLeftParenAndSize``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenSizeAndComma``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenCommaAndAlignment``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedBetweenAlignmentAndRightParen``
///  - ``LayoutRequirementSyntax``.``LayoutRequirementSyntax/unexpectedAfterRightParen``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBeforeAttributes``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenModifiersAndMacroKeyword``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenMacroKeywordAndName``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenGenericParameterClauseAndSignature``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenSignatureAndDefinition``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedBetweenDefinitionAndGenericWhereClause``
///  - ``MacroDeclSyntax``.``MacroDeclSyntax/unexpectedAfterGenericWhereClause``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBeforeAttributes``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenModifiersAndPound``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenPoundAndMacroName``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenMacroNameAndGenericArgumentClause``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenGenericArgumentClauseAndLeftParen``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenRightParenAndTrailingClosure``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures``
///  - ``MacroExpansionDeclSyntax``.``MacroExpansionDeclSyntax/unexpectedAfterAdditionalTrailingClosures``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBeforePound``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenPoundAndMacroName``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenMacroNameAndGenericArgumentClause``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenGenericArgumentClauseAndLeftParen``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenRightParenAndTrailingClosure``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures``
///  - ``MacroExpansionExprSyntax``.``MacroExpansionExprSyntax/unexpectedAfterAdditionalTrailingClosures``
///  - ``MatchingPatternConditionSyntax``.``MatchingPatternConditionSyntax/unexpectedBeforeCaseKeyword``
///  - ``MatchingPatternConditionSyntax``.``MatchingPatternConditionSyntax/unexpectedBetweenCaseKeywordAndPattern``
///  - ``MatchingPatternConditionSyntax``.``MatchingPatternConditionSyntax/unexpectedBetweenPatternAndTypeAnnotation``
///  - ``MatchingPatternConditionSyntax``.``MatchingPatternConditionSyntax/unexpectedBetweenTypeAnnotationAndInitializer``
///  - ``MatchingPatternConditionSyntax``.``MatchingPatternConditionSyntax/unexpectedAfterInitializer``
///  - ``MemberAccessExprSyntax``.``MemberAccessExprSyntax/unexpectedBeforeBase``
///  - ``MemberAccessExprSyntax``.``MemberAccessExprSyntax/unexpectedBetweenBaseAndPeriod``
///  - ``MemberAccessExprSyntax``.``MemberAccessExprSyntax/unexpectedBetweenPeriodAndName``
///  - ``MemberAccessExprSyntax``.``MemberAccessExprSyntax/unexpectedBetweenNameAndDeclNameArguments``
///  - ``MemberAccessExprSyntax``.``MemberAccessExprSyntax/unexpectedAfterDeclNameArguments``
///  - ``MemberBlockItemSyntax``.``MemberBlockItemSyntax/unexpectedBeforeDecl``
///  - ``MemberBlockItemSyntax``.``MemberBlockItemSyntax/unexpectedBetweenDeclAndSemicolon``
///  - ``MemberBlockItemSyntax``.``MemberBlockItemSyntax/unexpectedAfterSemicolon``
///  - ``MemberBlockSyntax``.``MemberBlockSyntax/unexpectedBeforeLeftBrace``
///  - ``MemberBlockSyntax``.``MemberBlockSyntax/unexpectedBetweenLeftBraceAndMembers``
///  - ``MemberBlockSyntax``.``MemberBlockSyntax/unexpectedBetweenMembersAndRightBrace``
///  - ``MemberBlockSyntax``.``MemberBlockSyntax/unexpectedAfterRightBrace``
///  - ``MemberTypeSyntax``.``MemberTypeSyntax/unexpectedBeforeBaseType``
///  - ``MemberTypeSyntax``.``MemberTypeSyntax/unexpectedBetweenBaseTypeAndPeriod``
///  - ``MemberTypeSyntax``.``MemberTypeSyntax/unexpectedBetweenPeriodAndName``
///  - ``MemberTypeSyntax``.``MemberTypeSyntax/unexpectedBetweenNameAndGenericArgumentClause``
///  - ``MemberTypeSyntax``.``MemberTypeSyntax/unexpectedAfterGenericArgumentClause``
///  - ``MetatypeTypeSyntax``.``MetatypeTypeSyntax/unexpectedBeforeBaseType``
///  - ``MetatypeTypeSyntax``.``MetatypeTypeSyntax/unexpectedBetweenBaseTypeAndPeriod``
///  - ``MetatypeTypeSyntax``.``MetatypeTypeSyntax/unexpectedBetweenPeriodAndMetatypeSpecifier``
///  - ``MetatypeTypeSyntax``.``MetatypeTypeSyntax/unexpectedAfterMetatypeSpecifier``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/unexpectedBeforeAttributes``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/unexpectedBetweenModifiersAndPlaceholder``
///  - ``MissingDeclSyntax``.``MissingDeclSyntax/unexpectedAfterPlaceholder``
///  - ``MissingExprSyntax``.``MissingExprSyntax/unexpectedBeforePlaceholder``
///  - ``MissingExprSyntax``.``MissingExprSyntax/unexpectedAfterPlaceholder``
///  - ``MissingPatternSyntax``.``MissingPatternSyntax/unexpectedBeforePlaceholder``
///  - ``MissingPatternSyntax``.``MissingPatternSyntax/unexpectedAfterPlaceholder``
///  - ``MissingStmtSyntax``.``MissingStmtSyntax/unexpectedBeforePlaceholder``
///  - ``MissingStmtSyntax``.``MissingStmtSyntax/unexpectedAfterPlaceholder``
///  - ``MissingSyntax``.``MissingSyntax/unexpectedBeforePlaceholder``
///  - ``MissingSyntax``.``MissingSyntax/unexpectedAfterPlaceholder``
///  - ``MissingTypeSyntax``.``MissingTypeSyntax/unexpectedBeforePlaceholder``
///  - ``MissingTypeSyntax``.``MissingTypeSyntax/unexpectedAfterPlaceholder``
///  - ``MultipleTrailingClosureElementSyntax``.``MultipleTrailingClosureElementSyntax/unexpectedBeforeLabel``
///  - ``MultipleTrailingClosureElementSyntax``.``MultipleTrailingClosureElementSyntax/unexpectedBetweenLabelAndColon``
///  - ``MultipleTrailingClosureElementSyntax``.``MultipleTrailingClosureElementSyntax/unexpectedBetweenColonAndClosure``
///  - ``MultipleTrailingClosureElementSyntax``.``MultipleTrailingClosureElementSyntax/unexpectedAfterClosure``
///  - ``NamedOpaqueReturnTypeSyntax``.``NamedOpaqueReturnTypeSyntax/unexpectedBeforeGenericParameterClause``
///  - ``NamedOpaqueReturnTypeSyntax``.``NamedOpaqueReturnTypeSyntax/unexpectedBetweenGenericParameterClauseAndType``
///  - ``NamedOpaqueReturnTypeSyntax``.``NamedOpaqueReturnTypeSyntax/unexpectedAfterType``
///  - ``NilLiteralExprSyntax``.``NilLiteralExprSyntax/unexpectedBeforeNilKeyword``
///  - ``NilLiteralExprSyntax``.``NilLiteralExprSyntax/unexpectedAfterNilKeyword``
///  - ``ObjCSelectorPieceSyntax``.``ObjCSelectorPieceSyntax/unexpectedBeforeName``
///  - ``ObjCSelectorPieceSyntax``.``ObjCSelectorPieceSyntax/unexpectedBetweenNameAndColon``
///  - ``ObjCSelectorPieceSyntax``.``ObjCSelectorPieceSyntax/unexpectedAfterColon``
///  - ``OpaqueReturnTypeOfAttributeArgumentsSyntax``.``OpaqueReturnTypeOfAttributeArgumentsSyntax/unexpectedBeforeMangledName``
///  - ``OpaqueReturnTypeOfAttributeArgumentsSyntax``.``OpaqueReturnTypeOfAttributeArgumentsSyntax/unexpectedBetweenMangledNameAndComma``
///  - ``OpaqueReturnTypeOfAttributeArgumentsSyntax``.``OpaqueReturnTypeOfAttributeArgumentsSyntax/unexpectedBetweenCommaAndOrdinal``
///  - ``OpaqueReturnTypeOfAttributeArgumentsSyntax``.``OpaqueReturnTypeOfAttributeArgumentsSyntax/unexpectedAfterOrdinal``
///  - ``OperatorDeclSyntax``.``OperatorDeclSyntax/unexpectedBeforeFixitySpecifier``
///  - ``OperatorDeclSyntax``.``OperatorDeclSyntax/unexpectedBetweenFixitySpecifierAndOperatorKeyword``
///  - ``OperatorDeclSyntax``.``OperatorDeclSyntax/unexpectedBetweenOperatorKeywordAndName``
///  - ``OperatorDeclSyntax``.``OperatorDeclSyntax/unexpectedBetweenNameAndOperatorPrecedenceAndTypes``
///  - ``OperatorDeclSyntax``.``OperatorDeclSyntax/unexpectedAfterOperatorPrecedenceAndTypes``
///  - ``OperatorPrecedenceAndTypesSyntax``.``OperatorPrecedenceAndTypesSyntax/unexpectedBeforeColon``
///  - ``OperatorPrecedenceAndTypesSyntax``.``OperatorPrecedenceAndTypesSyntax/unexpectedBetweenColonAndPrecedenceGroup``
///  - ``OperatorPrecedenceAndTypesSyntax``.``OperatorPrecedenceAndTypesSyntax/unexpectedBetweenPrecedenceGroupAndDesignatedTypes``
///  - ``OperatorPrecedenceAndTypesSyntax``.``OperatorPrecedenceAndTypesSyntax/unexpectedAfterDesignatedTypes``
///  - ``OptionalBindingConditionSyntax``.``OptionalBindingConditionSyntax/unexpectedBeforeBindingSpecifier``
///  - ``OptionalBindingConditionSyntax``.``OptionalBindingConditionSyntax/unexpectedBetweenBindingSpecifierAndPattern``
///  - ``OptionalBindingConditionSyntax``.``OptionalBindingConditionSyntax/unexpectedBetweenPatternAndTypeAnnotation``
///  - ``OptionalBindingConditionSyntax``.``OptionalBindingConditionSyntax/unexpectedBetweenTypeAnnotationAndInitializer``
///  - ``OptionalBindingConditionSyntax``.``OptionalBindingConditionSyntax/unexpectedAfterInitializer``
///  - ``OptionalChainingExprSyntax``.``OptionalChainingExprSyntax/unexpectedBeforeExpression``
///  - ``OptionalChainingExprSyntax``.``OptionalChainingExprSyntax/unexpectedBetweenExpressionAndQuestionMark``
///  - ``OptionalChainingExprSyntax``.``OptionalChainingExprSyntax/unexpectedAfterQuestionMark``
///  - ``OptionalTypeSyntax``.``OptionalTypeSyntax/unexpectedBeforeWrappedType``
///  - ``OptionalTypeSyntax``.``OptionalTypeSyntax/unexpectedBetweenWrappedTypeAndQuestionMark``
///  - ``OptionalTypeSyntax``.``OptionalTypeSyntax/unexpectedAfterQuestionMark``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedBeforeModuleLabel``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedBetweenModuleLabelAndColon``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedBetweenColonAndModuleName``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedBetweenModuleNameAndComma``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedBetweenCommaAndPlatforms``
///  - ``OriginallyDefinedInAttributeArgumentsSyntax``.``OriginallyDefinedInAttributeArgumentsSyntax/unexpectedAfterPlatforms``
///  - ``PackElementExprSyntax``.``PackElementExprSyntax/unexpectedBeforeEachKeyword``
///  - ``PackElementExprSyntax``.``PackElementExprSyntax/unexpectedBetweenEachKeywordAndPack``
///  - ``PackElementExprSyntax``.``PackElementExprSyntax/unexpectedAfterPack``
///  - ``PackElementTypeSyntax``.``PackElementTypeSyntax/unexpectedBeforeEachKeyword``
///  - ``PackElementTypeSyntax``.``PackElementTypeSyntax/unexpectedBetweenEachKeywordAndPack``
///  - ``PackElementTypeSyntax``.``PackElementTypeSyntax/unexpectedAfterPack``
///  - ``PackExpansionExprSyntax``.``PackExpansionExprSyntax/unexpectedBeforeRepeatKeyword``
///  - ``PackExpansionExprSyntax``.``PackExpansionExprSyntax/unexpectedBetweenRepeatKeywordAndRepetitionPattern``
///  - ``PackExpansionExprSyntax``.``PackExpansionExprSyntax/unexpectedAfterRepetitionPattern``
///  - ``PackExpansionTypeSyntax``.``PackExpansionTypeSyntax/unexpectedBeforeRepeatKeyword``
///  - ``PackExpansionTypeSyntax``.``PackExpansionTypeSyntax/unexpectedBetweenRepeatKeywordAndRepetitionPattern``
///  - ``PackExpansionTypeSyntax``.``PackExpansionTypeSyntax/unexpectedAfterRepetitionPattern``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedBeforePattern``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedBetweenPatternAndTypeAnnotation``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedBetweenTypeAnnotationAndInitializer``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedBetweenInitializerAndAccessors``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedBetweenAccessorsAndTrailingComma``
///  - ``PatternBindingSyntax``.``PatternBindingSyntax/unexpectedAfterTrailingComma``
///  - ``PatternExprSyntax``.``PatternExprSyntax/unexpectedBeforePattern``
///  - ``PatternExprSyntax``.``PatternExprSyntax/unexpectedAfterPattern``
///  - ``PlatformVersionItemSyntax``.``PlatformVersionItemSyntax/unexpectedBeforeAvailabilityVersionRestriction``
///  - ``PlatformVersionItemSyntax``.``PlatformVersionItemSyntax/unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma``
///  - ``PlatformVersionItemSyntax``.``PlatformVersionItemSyntax/unexpectedAfterTrailingComma``
///  - ``PlatformVersionSyntax``.``PlatformVersionSyntax/unexpectedBeforePlatform``
///  - ``PlatformVersionSyntax``.``PlatformVersionSyntax/unexpectedBetweenPlatformAndVersion``
///  - ``PlatformVersionSyntax``.``PlatformVersionSyntax/unexpectedAfterVersion``
///  - ``PostfixIfConfigExprSyntax``.``PostfixIfConfigExprSyntax/unexpectedBeforeBase``
///  - ``PostfixIfConfigExprSyntax``.``PostfixIfConfigExprSyntax/unexpectedBetweenBaseAndConfig``
///  - ``PostfixIfConfigExprSyntax``.``PostfixIfConfigExprSyntax/unexpectedAfterConfig``
///  - ``PostfixOperatorExprSyntax``.``PostfixOperatorExprSyntax/unexpectedBeforeExpression``
///  - ``PostfixOperatorExprSyntax``.``PostfixOperatorExprSyntax/unexpectedBetweenExpressionAndOperator``
///  - ``PostfixOperatorExprSyntax``.``PostfixOperatorExprSyntax/unexpectedAfterOperator``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBeforeFileLabel``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenFileLabelAndFileColon``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenFileColonAndFileName``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenFileNameAndComma``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenCommaAndLineLabel``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenLineLabelAndLineColon``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedBetweenLineColonAndLineNumber``
///  - ``PoundSourceLocationArgumentsSyntax``.``PoundSourceLocationArgumentsSyntax/unexpectedAfterLineNumber``
///  - ``PoundSourceLocationSyntax``.``PoundSourceLocationSyntax/unexpectedBeforePoundSourceLocation``
///  - ``PoundSourceLocationSyntax``.``PoundSourceLocationSyntax/unexpectedBetweenPoundSourceLocationAndLeftParen``
///  - ``PoundSourceLocationSyntax``.``PoundSourceLocationSyntax/unexpectedBetweenLeftParenAndArguments``
///  - ``PoundSourceLocationSyntax``.``PoundSourceLocationSyntax/unexpectedBetweenArgumentsAndRightParen``
///  - ``PoundSourceLocationSyntax``.``PoundSourceLocationSyntax/unexpectedAfterRightParen``
///  - ``PrecedenceGroupAssignmentSyntax``.``PrecedenceGroupAssignmentSyntax/unexpectedBeforeAssignmentLabel``
///  - ``PrecedenceGroupAssignmentSyntax``.``PrecedenceGroupAssignmentSyntax/unexpectedBetweenAssignmentLabelAndColon``
///  - ``PrecedenceGroupAssignmentSyntax``.``PrecedenceGroupAssignmentSyntax/unexpectedBetweenColonAndValue``
///  - ``PrecedenceGroupAssignmentSyntax``.``PrecedenceGroupAssignmentSyntax/unexpectedAfterValue``
///  - ``PrecedenceGroupAssociativitySyntax``.``PrecedenceGroupAssociativitySyntax/unexpectedBeforeAssociativityLabel``
///  - ``PrecedenceGroupAssociativitySyntax``.``PrecedenceGroupAssociativitySyntax/unexpectedBetweenAssociativityLabelAndColon``
///  - ``PrecedenceGroupAssociativitySyntax``.``PrecedenceGroupAssociativitySyntax/unexpectedBetweenColonAndValue``
///  - ``PrecedenceGroupAssociativitySyntax``.``PrecedenceGroupAssociativitySyntax/unexpectedAfterValue``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBeforeAttributes``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenModifiersAndPrecedencegroupKeyword``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenPrecedencegroupKeywordAndName``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenNameAndLeftBrace``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenLeftBraceAndGroupAttributes``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedBetweenGroupAttributesAndRightBrace``
///  - ``PrecedenceGroupDeclSyntax``.``PrecedenceGroupDeclSyntax/unexpectedAfterRightBrace``
///  - ``PrecedenceGroupNameSyntax``.``PrecedenceGroupNameSyntax/unexpectedBeforeName``
///  - ``PrecedenceGroupNameSyntax``.``PrecedenceGroupNameSyntax/unexpectedBetweenNameAndTrailingComma``
///  - ``PrecedenceGroupNameSyntax``.``PrecedenceGroupNameSyntax/unexpectedAfterTrailingComma``
///  - ``PrecedenceGroupRelationSyntax``.``PrecedenceGroupRelationSyntax/unexpectedBeforeHigherThanOrLowerThanLabel``
///  - ``PrecedenceGroupRelationSyntax``.``PrecedenceGroupRelationSyntax/unexpectedBetweenHigherThanOrLowerThanLabelAndColon``
///  - ``PrecedenceGroupRelationSyntax``.``PrecedenceGroupRelationSyntax/unexpectedBetweenColonAndPrecedenceGroups``
///  - ``PrecedenceGroupRelationSyntax``.``PrecedenceGroupRelationSyntax/unexpectedAfterPrecedenceGroups``
///  - ``PrefixOperatorExprSyntax``.``PrefixOperatorExprSyntax/unexpectedBeforeOperator``
///  - ``PrefixOperatorExprSyntax``.``PrefixOperatorExprSyntax/unexpectedBetweenOperatorAndExpression``
///  - ``PrefixOperatorExprSyntax``.``PrefixOperatorExprSyntax/unexpectedAfterExpression``
///  - ``PrimaryAssociatedTypeClauseSyntax``.``PrimaryAssociatedTypeClauseSyntax/unexpectedBeforeLeftAngle``
///  - ``PrimaryAssociatedTypeClauseSyntax``.``PrimaryAssociatedTypeClauseSyntax/unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes``
///  - ``PrimaryAssociatedTypeClauseSyntax``.``PrimaryAssociatedTypeClauseSyntax/unexpectedBetweenPrimaryAssociatedTypesAndRightAngle``
///  - ``PrimaryAssociatedTypeClauseSyntax``.``PrimaryAssociatedTypeClauseSyntax/unexpectedAfterRightAngle``
///  - ``PrimaryAssociatedTypeSyntax``.``PrimaryAssociatedTypeSyntax/unexpectedBeforeName``
///  - ``PrimaryAssociatedTypeSyntax``.``PrimaryAssociatedTypeSyntax/unexpectedBetweenNameAndTrailingComma``
///  - ``PrimaryAssociatedTypeSyntax``.``PrimaryAssociatedTypeSyntax/unexpectedAfterTrailingComma``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBeforeAttributes``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenModifiersAndProtocolKeyword``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenProtocolKeywordAndName``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenNameAndPrimaryAssociatedTypeClause``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``ProtocolDeclSyntax``.``ProtocolDeclSyntax/unexpectedAfterMemberBlock``
///  - ``QualifiedDeclNameSyntax``.``QualifiedDeclNameSyntax/unexpectedBeforeBaseType``
///  - ``QualifiedDeclNameSyntax``.``QualifiedDeclNameSyntax/unexpectedBetweenBaseTypeAndPeriod``
///  - ``QualifiedDeclNameSyntax``.``QualifiedDeclNameSyntax/unexpectedBetweenPeriodAndName``
///  - ``QualifiedDeclNameSyntax``.``QualifiedDeclNameSyntax/unexpectedBetweenNameAndArguments``
///  - ``QualifiedDeclNameSyntax``.``QualifiedDeclNameSyntax/unexpectedAfterArguments``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedBeforeOpeningPounds``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedBetweenOpeningPoundsAndOpeningSlash``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedBetweenOpeningSlashAndRegex``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedBetweenRegexAndClosingSlash``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedBetweenClosingSlashAndClosingPounds``
///  - ``RegexLiteralExprSyntax``.``RegexLiteralExprSyntax/unexpectedAfterClosingPounds``
///  - ``RepeatStmtSyntax``.``RepeatStmtSyntax/unexpectedBeforeRepeatKeyword``
///  - ``RepeatStmtSyntax``.``RepeatStmtSyntax/unexpectedBetweenRepeatKeywordAndBody``
///  - ``RepeatStmtSyntax``.``RepeatStmtSyntax/unexpectedBetweenBodyAndWhileKeyword``
///  - ``RepeatStmtSyntax``.``RepeatStmtSyntax/unexpectedBetweenWhileKeywordAndCondition``
///  - ``RepeatStmtSyntax``.``RepeatStmtSyntax/unexpectedAfterCondition``
///  - ``ReturnClauseSyntax``.``ReturnClauseSyntax/unexpectedBeforeArrow``
///  - ``ReturnClauseSyntax``.``ReturnClauseSyntax/unexpectedBetweenArrowAndType``
///  - ``ReturnClauseSyntax``.``ReturnClauseSyntax/unexpectedAfterType``
///  - ``ReturnStmtSyntax``.``ReturnStmtSyntax/unexpectedBeforeReturnKeyword``
///  - ``ReturnStmtSyntax``.``ReturnStmtSyntax/unexpectedBetweenReturnKeywordAndExpression``
///  - ``ReturnStmtSyntax``.``ReturnStmtSyntax/unexpectedAfterExpression``
///  - ``SameTypeRequirementSyntax``.``SameTypeRequirementSyntax/unexpectedBeforeLeftType``
///  - ``SameTypeRequirementSyntax``.``SameTypeRequirementSyntax/unexpectedBetweenLeftTypeAndEqual``
///  - ``SameTypeRequirementSyntax``.``SameTypeRequirementSyntax/unexpectedBetweenEqualAndRightType``
///  - ``SameTypeRequirementSyntax``.``SameTypeRequirementSyntax/unexpectedAfterRightType``
///  - ``SequenceExprSyntax``.``SequenceExprSyntax/unexpectedBeforeElements``
///  - ``SequenceExprSyntax``.``SequenceExprSyntax/unexpectedAfterElements``
///  - ``SomeOrAnyTypeSyntax``.``SomeOrAnyTypeSyntax/unexpectedBeforeSomeOrAnySpecifier``
///  - ``SomeOrAnyTypeSyntax``.``SomeOrAnyTypeSyntax/unexpectedBetweenSomeOrAnySpecifierAndConstraint``
///  - ``SomeOrAnyTypeSyntax``.``SomeOrAnyTypeSyntax/unexpectedAfterConstraint``
///  - ``SourceFileSyntax``.``SourceFileSyntax/unexpectedBeforeStatements``
///  - ``SourceFileSyntax``.``SourceFileSyntax/unexpectedBetweenStatementsAndEndOfFileToken``
///  - ``SourceFileSyntax``.``SourceFileSyntax/unexpectedAfterEndOfFileToken``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/unexpectedBeforeAvailabilityLabel``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/unexpectedBetweenAvailabilityLabelAndColon``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/unexpectedBetweenColonAndAvailabilityArguments``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/unexpectedBetweenAvailabilityArgumentsAndSemicolon``
///  - ``SpecializeAvailabilityArgumentSyntax``.``SpecializeAvailabilityArgumentSyntax/unexpectedAfterSemicolon``
///  - ``SpecializeTargetFunctionArgumentSyntax``.``SpecializeTargetFunctionArgumentSyntax/unexpectedBeforeTargetLabel``
///  - ``SpecializeTargetFunctionArgumentSyntax``.``SpecializeTargetFunctionArgumentSyntax/unexpectedBetweenTargetLabelAndColon``
///  - ``SpecializeTargetFunctionArgumentSyntax``.``SpecializeTargetFunctionArgumentSyntax/unexpectedBetweenColonAndDeclName``
///  - ``SpecializeTargetFunctionArgumentSyntax``.``SpecializeTargetFunctionArgumentSyntax/unexpectedBetweenDeclNameAndTrailingComma``
///  - ``SpecializeTargetFunctionArgumentSyntax``.``SpecializeTargetFunctionArgumentSyntax/unexpectedAfterTrailingComma``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedBeforeOpeningPounds``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedBetweenOpeningPoundsAndOpeningQuote``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedBetweenOpeningQuoteAndSegments``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedBetweenSegmentsAndClosingQuote``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedBetweenClosingQuoteAndClosingPounds``
///  - ``StringLiteralExprSyntax``.``StringLiteralExprSyntax/unexpectedAfterClosingPounds``
///  - ``StringSegmentSyntax``.``StringSegmentSyntax/unexpectedBeforeContent``
///  - ``StringSegmentSyntax``.``StringSegmentSyntax/unexpectedAfterContent``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBeforeAttributes``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenModifiersAndStructKeyword``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenStructKeywordAndName``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenGenericParameterClauseAndInheritanceClause``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenInheritanceClauseAndGenericWhereClause``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedBetweenGenericWhereClauseAndMemberBlock``
///  - ``StructDeclSyntax``.``StructDeclSyntax/unexpectedAfterMemberBlock``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBeforeCalledExpression``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBetweenCalledExpressionAndLeftSquare``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBetweenLeftSquareAndArguments``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBetweenArgumentsAndRightSquare``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBetweenRightSquareAndTrailingClosure``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures``
///  - ``SubscriptCallExprSyntax``.``SubscriptCallExprSyntax/unexpectedAfterAdditionalTrailingClosures``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBeforeAttributes``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenModifiersAndSubscriptKeyword``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenSubscriptKeywordAndGenericParameterClause``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenGenericParameterClauseAndParameterClause``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenParameterClauseAndReturnClause``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenReturnClauseAndGenericWhereClause``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedBetweenGenericWhereClauseAndAccessors``
///  - ``SubscriptDeclSyntax``.``SubscriptDeclSyntax/unexpectedAfterAccessors``
///  - ``SuperExprSyntax``.``SuperExprSyntax/unexpectedBeforeSuperKeyword``
///  - ``SuperExprSyntax``.``SuperExprSyntax/unexpectedAfterSuperKeyword``
///  - ``SuppressedTypeSyntax``.``SuppressedTypeSyntax/unexpectedBeforeWithoutTilde``
///  - ``SuppressedTypeSyntax``.``SuppressedTypeSyntax/unexpectedBetweenWithoutTildeAndType``
///  - ``SuppressedTypeSyntax``.``SuppressedTypeSyntax/unexpectedAfterType``
///  - ``SwitchCaseItemSyntax``.``SwitchCaseItemSyntax/unexpectedBeforePattern``
///  - ``SwitchCaseItemSyntax``.``SwitchCaseItemSyntax/unexpectedBetweenPatternAndWhereClause``
///  - ``SwitchCaseItemSyntax``.``SwitchCaseItemSyntax/unexpectedBetweenWhereClauseAndTrailingComma``
///  - ``SwitchCaseItemSyntax``.``SwitchCaseItemSyntax/unexpectedAfterTrailingComma``
///  - ``SwitchCaseLabelSyntax``.``SwitchCaseLabelSyntax/unexpectedBeforeCaseKeyword``
///  - ``SwitchCaseLabelSyntax``.``SwitchCaseLabelSyntax/unexpectedBetweenCaseKeywordAndCaseItems``
///  - ``SwitchCaseLabelSyntax``.``SwitchCaseLabelSyntax/unexpectedBetweenCaseItemsAndColon``
///  - ``SwitchCaseLabelSyntax``.``SwitchCaseLabelSyntax/unexpectedAfterColon``
///  - ``SwitchCaseSyntax``.``SwitchCaseSyntax/unexpectedBeforeAttribute``
///  - ``SwitchCaseSyntax``.``SwitchCaseSyntax/unexpectedBetweenAttributeAndLabel``
///  - ``SwitchCaseSyntax``.``SwitchCaseSyntax/unexpectedBetweenLabelAndStatements``
///  - ``SwitchCaseSyntax``.``SwitchCaseSyntax/unexpectedAfterStatements``
///  - ``SwitchDefaultLabelSyntax``.``SwitchDefaultLabelSyntax/unexpectedBeforeDefaultKeyword``
///  - ``SwitchDefaultLabelSyntax``.``SwitchDefaultLabelSyntax/unexpectedBetweenDefaultKeywordAndColon``
///  - ``SwitchDefaultLabelSyntax``.``SwitchDefaultLabelSyntax/unexpectedAfterColon``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedBeforeSwitchKeyword``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedBetweenSwitchKeywordAndSubject``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedBetweenSubjectAndLeftBrace``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedBetweenLeftBraceAndCases``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedBetweenCasesAndRightBrace``
///  - ``SwitchExprSyntax``.``SwitchExprSyntax/unexpectedAfterRightBrace``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedBeforeCondition``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedBetweenConditionAndQuestionMark``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedBetweenQuestionMarkAndThenExpression``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedBetweenThenExpressionAndColon``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedBetweenColonAndElseExpression``
///  - ``TernaryExprSyntax``.``TernaryExprSyntax/unexpectedAfterElseExpression``
///  - ``ThrowStmtSyntax``.``ThrowStmtSyntax/unexpectedBeforeThrowKeyword``
///  - ``ThrowStmtSyntax``.``ThrowStmtSyntax/unexpectedBetweenThrowKeywordAndExpression``
///  - ``ThrowStmtSyntax``.``ThrowStmtSyntax/unexpectedAfterExpression``
///  - ``TryExprSyntax``.``TryExprSyntax/unexpectedBeforeTryKeyword``
///  - ``TryExprSyntax``.``TryExprSyntax/unexpectedBetweenTryKeywordAndQuestionOrExclamationMark``
///  - ``TryExprSyntax``.``TryExprSyntax/unexpectedBetweenQuestionOrExclamationMarkAndExpression``
///  - ``TryExprSyntax``.``TryExprSyntax/unexpectedAfterExpression``
///  - ``TupleExprElementSyntax``.``TupleExprElementSyntax/unexpectedBeforeLabel``
///  - ``TupleExprElementSyntax``.``TupleExprElementSyntax/unexpectedBetweenLabelAndColon``
///  - ``TupleExprElementSyntax``.``TupleExprElementSyntax/unexpectedBetweenColonAndExpression``
///  - ``TupleExprElementSyntax``.``TupleExprElementSyntax/unexpectedBetweenExpressionAndTrailingComma``
///  - ``TupleExprElementSyntax``.``TupleExprElementSyntax/unexpectedAfterTrailingComma``
///  - ``TupleExprSyntax``.``TupleExprSyntax/unexpectedBeforeLeftParen``
///  - ``TupleExprSyntax``.``TupleExprSyntax/unexpectedBetweenLeftParenAndElements``
///  - ``TupleExprSyntax``.``TupleExprSyntax/unexpectedBetweenElementsAndRightParen``
///  - ``TupleExprSyntax``.``TupleExprSyntax/unexpectedAfterRightParen``
///  - ``TuplePatternElementSyntax``.``TuplePatternElementSyntax/unexpectedBeforeLabel``
///  - ``TuplePatternElementSyntax``.``TuplePatternElementSyntax/unexpectedBetweenLabelAndColon``
///  - ``TuplePatternElementSyntax``.``TuplePatternElementSyntax/unexpectedBetweenColonAndPattern``
///  - ``TuplePatternElementSyntax``.``TuplePatternElementSyntax/unexpectedBetweenPatternAndTrailingComma``
///  - ``TuplePatternElementSyntax``.``TuplePatternElementSyntax/unexpectedAfterTrailingComma``
///  - ``TuplePatternSyntax``.``TuplePatternSyntax/unexpectedBeforeLeftParen``
///  - ``TuplePatternSyntax``.``TuplePatternSyntax/unexpectedBetweenLeftParenAndElements``
///  - ``TuplePatternSyntax``.``TuplePatternSyntax/unexpectedBetweenElementsAndRightParen``
///  - ``TuplePatternSyntax``.``TuplePatternSyntax/unexpectedAfterRightParen``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBeforeInoutKeyword``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenInoutKeywordAndFirstName``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenFirstNameAndSecondName``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenSecondNameAndColon``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenColonAndType``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenTypeAndEllipsis``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenEllipsisAndInitializer``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedBetweenInitializerAndTrailingComma``
///  - ``TupleTypeElementSyntax``.``TupleTypeElementSyntax/unexpectedAfterTrailingComma``
///  - ``TupleTypeSyntax``.``TupleTypeSyntax/unexpectedBeforeLeftParen``
///  - ``TupleTypeSyntax``.``TupleTypeSyntax/unexpectedBetweenLeftParenAndElements``
///  - ``TupleTypeSyntax``.``TupleTypeSyntax/unexpectedBetweenElementsAndRightParen``
///  - ``TupleTypeSyntax``.``TupleTypeSyntax/unexpectedAfterRightParen``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBeforeAttributes``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenModifiersAndTypealiasKeyword``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenTypealiasKeywordAndName``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenNameAndGenericParameterClause``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenGenericParameterClauseAndInitializer``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedBetweenInitializerAndGenericWhereClause``
///  - ``TypeAliasDeclSyntax``.``TypeAliasDeclSyntax/unexpectedAfterGenericWhereClause``
///  - ``TypeAnnotationSyntax``.``TypeAnnotationSyntax/unexpectedBeforeColon``
///  - ``TypeAnnotationSyntax``.``TypeAnnotationSyntax/unexpectedBetweenColonAndType``
///  - ``TypeAnnotationSyntax``.``TypeAnnotationSyntax/unexpectedAfterType``
///  - ``TypeEffectSpecifiersSyntax``.``TypeEffectSpecifiersSyntax/unexpectedBeforeAsyncSpecifier``
///  - ``TypeEffectSpecifiersSyntax``.``TypeEffectSpecifiersSyntax/unexpectedBetweenAsyncSpecifierAndThrowsSpecifier``
///  - ``TypeEffectSpecifiersSyntax``.``TypeEffectSpecifiersSyntax/unexpectedAfterThrowsSpecifier``
///  - ``TypeExprSyntax``.``TypeExprSyntax/unexpectedBeforeType``
///  - ``TypeExprSyntax``.``TypeExprSyntax/unexpectedAfterType``
///  - ``TypeInitializerClauseSyntax``.``TypeInitializerClauseSyntax/unexpectedBeforeEqual``
///  - ``TypeInitializerClauseSyntax``.``TypeInitializerClauseSyntax/unexpectedBetweenEqualAndValue``
///  - ``TypeInitializerClauseSyntax``.``TypeInitializerClauseSyntax/unexpectedAfterValue``
///  - ``UnavailableFromAsyncAttributeArgumentsSyntax``.``UnavailableFromAsyncAttributeArgumentsSyntax/unexpectedBeforeMessageLabel``
///  - ``UnavailableFromAsyncAttributeArgumentsSyntax``.``UnavailableFromAsyncAttributeArgumentsSyntax/unexpectedBetweenMessageLabelAndColon``
///  - ``UnavailableFromAsyncAttributeArgumentsSyntax``.``UnavailableFromAsyncAttributeArgumentsSyntax/unexpectedBetweenColonAndMessage``
///  - ``UnavailableFromAsyncAttributeArgumentsSyntax``.``UnavailableFromAsyncAttributeArgumentsSyntax/unexpectedAfterMessage``
///  - ``UnderscorePrivateAttributeArgumentsSyntax``.``UnderscorePrivateAttributeArgumentsSyntax/unexpectedBeforeSourceFileLabel``
///  - ``UnderscorePrivateAttributeArgumentsSyntax``.``UnderscorePrivateAttributeArgumentsSyntax/unexpectedBetweenSourceFileLabelAndColon``
///  - ``UnderscorePrivateAttributeArgumentsSyntax``.``UnderscorePrivateAttributeArgumentsSyntax/unexpectedBetweenColonAndFilename``
///  - ``UnderscorePrivateAttributeArgumentsSyntax``.``UnderscorePrivateAttributeArgumentsSyntax/unexpectedAfterFilename``
///  - ``UnresolvedAsExprSyntax``.``UnresolvedAsExprSyntax/unexpectedBeforeAsKeyword``
///  - ``UnresolvedAsExprSyntax``.``UnresolvedAsExprSyntax/unexpectedBetweenAsKeywordAndQuestionOrExclamationMark``
///  - ``UnresolvedAsExprSyntax``.``UnresolvedAsExprSyntax/unexpectedAfterQuestionOrExclamationMark``
///  - ``UnresolvedIsExprSyntax``.``UnresolvedIsExprSyntax/unexpectedBeforeIsKeyword``
///  - ``UnresolvedIsExprSyntax``.``UnresolvedIsExprSyntax/unexpectedAfterIsKeyword``
///  - ``UnresolvedTernaryExprSyntax``.``UnresolvedTernaryExprSyntax/unexpectedBeforeQuestionMark``
///  - ``UnresolvedTernaryExprSyntax``.``UnresolvedTernaryExprSyntax/unexpectedBetweenQuestionMarkAndThenExpression``
///  - ``UnresolvedTernaryExprSyntax``.``UnresolvedTernaryExprSyntax/unexpectedBetweenThenExpressionAndColon``
///  - ``UnresolvedTernaryExprSyntax``.``UnresolvedTernaryExprSyntax/unexpectedAfterColon``
///  - ``ValueBindingPatternSyntax``.``ValueBindingPatternSyntax/unexpectedBeforeBindingSpecifier``
///  - ``ValueBindingPatternSyntax``.``ValueBindingPatternSyntax/unexpectedBetweenBindingSpecifierAndPattern``
///  - ``ValueBindingPatternSyntax``.``ValueBindingPatternSyntax/unexpectedAfterPattern``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/unexpectedBeforeAttributes``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/unexpectedBetweenAttributesAndModifiers``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/unexpectedBetweenModifiersAndBindingSpecifier``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/unexpectedBetweenBindingSpecifierAndBindings``
///  - ``VariableDeclSyntax``.``VariableDeclSyntax/unexpectedAfterBindings``
///  - ``VersionComponentSyntax``.``VersionComponentSyntax/unexpectedBeforePeriod``
///  - ``VersionComponentSyntax``.``VersionComponentSyntax/unexpectedBetweenPeriodAndNumber``
///  - ``VersionComponentSyntax``.``VersionComponentSyntax/unexpectedAfterNumber``
///  - ``VersionTupleSyntax``.``VersionTupleSyntax/unexpectedBeforeMajor``
///  - ``VersionTupleSyntax``.``VersionTupleSyntax/unexpectedBetweenMajorAndComponents``
///  - ``VersionTupleSyntax``.``VersionTupleSyntax/unexpectedAfterComponents``
///  - ``WhereClauseSyntax``.``WhereClauseSyntax/unexpectedBeforeWhereKeyword``
///  - ``WhereClauseSyntax``.``WhereClauseSyntax/unexpectedBetweenWhereKeywordAndCondition``
///  - ``WhereClauseSyntax``.``WhereClauseSyntax/unexpectedAfterCondition``
///  - ``WhileStmtSyntax``.``WhileStmtSyntax/unexpectedBeforeWhileKeyword``
///  - ``WhileStmtSyntax``.``WhileStmtSyntax/unexpectedBetweenWhileKeywordAndConditions``
///  - ``WhileStmtSyntax``.``WhileStmtSyntax/unexpectedBetweenConditionsAndBody``
///  - ``WhileStmtSyntax``.``WhileStmtSyntax/unexpectedAfterBody``
///  - ``WildcardPatternSyntax``.``WildcardPatternSyntax/unexpectedBeforeWildcard``
///  - ``WildcardPatternSyntax``.``WildcardPatternSyntax/unexpectedBetweenWildcardAndTypeAnnotation``
///  - ``WildcardPatternSyntax``.``WildcardPatternSyntax/unexpectedAfterTypeAnnotation``
///  - ``YieldStmtArgumentClauseSyntax``.``YieldStmtArgumentClauseSyntax/unexpectedBeforeLeftParen``
///  - ``YieldStmtArgumentClauseSyntax``.``YieldStmtArgumentClauseSyntax/unexpectedBetweenLeftParenAndElements``
///  - ``YieldStmtArgumentClauseSyntax``.``YieldStmtArgumentClauseSyntax/unexpectedBetweenElementsAndRightParen``
///  - ``YieldStmtArgumentClauseSyntax``.``YieldStmtArgumentClauseSyntax/unexpectedAfterRightParen``
///  - ``YieldStmtArgumentSyntax``.``YieldStmtArgumentSyntax/unexpectedBeforeExpression``
///  - ``YieldStmtArgumentSyntax``.``YieldStmtArgumentSyntax/unexpectedBetweenExpressionAndComma``
///  - ``YieldStmtArgumentSyntax``.``YieldStmtArgumentSyntax/unexpectedAfterComma``
///  - ``YieldStmtSyntax``.``YieldStmtSyntax/unexpectedBeforeYieldKeyword``
///  - ``YieldStmtSyntax``.``YieldStmtSyntax/unexpectedBetweenYieldKeywordAndYieldedExpressions``
///  - ``YieldStmtSyntax``.``YieldStmtSyntax/unexpectedAfterYieldedExpressions``
public struct UnexpectedNodesSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = Syntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .unexpectedNodes else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.unexpectedNodes
}

/// ### Children
/// 
/// ``VersionComponentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``VersionTupleSyntax``.``VersionTupleSyntax/components``
public struct VersionComponentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = VersionComponentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .versionComponentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.versionComponentList
}

/// ### Children
/// 
/// ``YieldStmtArgumentSyntax`` `*`
///
/// ### Contained in
/// 
///  - ``YieldStmtArgumentClauseSyntax``.``YieldStmtArgumentClauseSyntax/elements``
public struct YieldStmtArgumentListSyntax: SyntaxCollection, SyntaxHashable {
  public typealias Element = YieldStmtArgumentSyntax
  
  public let _syntaxNode: Syntax
  
  public init?(_ node: some SyntaxProtocol) {
    guard node.raw.kind == .yieldStmtArgumentList else {
      return nil
    }
    self._syntaxNode = node._syntaxNode
  }
  
  public static let syntaxKind = SyntaxKind.yieldStmtArgumentList
}
