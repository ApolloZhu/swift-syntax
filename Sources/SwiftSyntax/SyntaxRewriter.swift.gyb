%{
  from gyb_syntax_support import *
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxFactory.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxRewriter.swift - Syntax Rewriter class ------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the SyntaxRewriter, a class that performs a standard walk
// and tree-rebuilding pattern.
//
// Subclassers of this class can override the walking behavior for any syntax
// node and transform nodes however they like.
//
//===----------------------------------------------------------------------===//

open class SyntaxRewriter {
  public init() {}

% for node in SYNTAX_NODES:
%   if is_visitable(node):
  /// Visit a `${node.name}`.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node
  open func visit(_ node: ${node.name}) -> ${node.base_type} {
    return ${node.base_type}(visitChildren(node))
  }

%   end
% end

  /// Visit a `TokenSyntax`.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node
  open func visit(_ token: TokenSyntax) -> Syntax {
    return Syntax(token)
  }
  
  /// Visit a `UnknownSyntax`.
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node
  open func visit(_ node: UnknownSyntax) -> Syntax {
    return Syntax(visitChildren(node))
  }

  /// The function called before visiting the node and its descendents.
  ///   - node: the node we are about to visit.
  open func visitPre(_ node: Syntax) {}

  /// Override point to choose custom visitation dispatch instead of the
  /// specialized `visit(_:)` methods. Use this instead of those methods if
  /// you intend to dynamically dispatch rewriting behavior.
  /// - note: If this method returns a non-nil result, the specialized
  ///         `visit(_:)` methods will not be called for this node and the 
  ///         visited node will be replaced by the returned node in the 
  ///         rewritten tree.
  open func visitAny(_ node: Syntax) -> Syntax? {
    return nil
  }

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: Syntax) {}

  /// Visit any Syntax node. 
  ///   - Parameter node: the node that is being visited
  ///   - Returns: the rewritten node
  public func visit(_ node: Syntax) -> Syntax {
    return visit(node.data)
  }

% for node in SYNTAX_NODES:
  /// Implementation detail of visit(_:). Do not call directly.
  private func visitImpl${node.name}(_ data: SyntaxData) -> Syntax {
%   if node.is_base():
      let node = Unknown${node.name}(data)
      // Accessing _syntaxNode directly is faster than calling Syntax(node)
      visitPre(node._syntaxNode)
      defer { visitPost(node._syntaxNode) }
      if let newNode = visitAny(node._syntaxNode) { return newNode }
      return Syntax(visit(node))
%   else:
      let node = ${node.name}(data)
      // Accessing _syntaxNode directly is faster than calling Syntax(node)
      visitPre(node._syntaxNode)
      defer { visitPost(node._syntaxNode) }
      if let newNode = visitAny(node._syntaxNode) { return newNode }
%     if node.base_type == 'Syntax':
      return visit(node)
%     else:
      return Syntax(visit(node))
%     end
%   end
  }

% end

  private func visit(_ data: SyntaxData) -> Syntax {
    switch data.raw.kind {
    case .token:
      let node = TokenSyntax(data)
      // Accessing _syntaxNode directly is faster than calling Syntax(node)
      visitPre(node._syntaxNode)
      defer { visitPost(node._syntaxNode) }
      if let newNode = visitAny(node._syntaxNode) { return newNode }
      return visit(node)
    case .unknown:
      let node = UnknownSyntax(data)
      // Accessing _syntaxNode directly is faster than calling Syntax(node)
      visitPre(node._syntaxNode)
      defer { visitPost(node._syntaxNode) }
      if let newNode = visitAny(node._syntaxNode) { return newNode }
      return visit(node)
    // The implementation of every generated case goes into its own function. This
    // circumvents an issue where the compiler allocates stack space for every
    // case statement next to each other in debug builds, causing it to allocate
    // ~50KB per call to this function. rdar://55929175
  % for node in SYNTAX_NODES:
    case .${node.swift_syntax_kind}:
      return visitImpl${node.name}(data)
  % end
    }
  }

  private func visitChildren<SyntaxType: SyntaxProtocol>(
    _ node: SyntaxType
  ) -> SyntaxType {
    // Walk over all children of this node and rewrite them. Don't store any 
    // rewritten nodes until the first non-`nil` value is encountered. When this 
    // happens, retrieve all previous syntax nodes from the parent node to 
    // initialize the new layout. Once we know that we have to rewrite the 
    // layout, we need to collect all futher children, regardless of whether 
    // they are rewritten or not.
    
    // newLayout is nil until the first child node is rewritten and rewritten 
    // nodes are being collected.
    var newLayout: ContiguousArray<RawSyntax?>?

    let syntaxNode = node._syntaxNode
    let parentBox = SyntaxBox(syntaxNode)

    // Incrementing i manually is faster than using .enumerated()
    var childIndex = 0
    for (raw, info) in RawSyntaxChildren(syntaxNode) {
      defer { childIndex += 1 }
      guard let child = raw else {
        // Node does not exist. If we are collecting rewritten nodes, we need to 
        // collect this one as well, otherwise we can ignore it.
        if newLayout != nil {
          newLayout!.append(nil)
        }
        continue
      }

      // Build the Syntax node to rewrite
      let absoluteRaw = AbsoluteRawSyntax(raw: child, info: info)
      let data = SyntaxData(absoluteRaw, parentBox: parentBox)
      
      let rewritten = visit(data)
      if rewritten.data.nodeId != info.nodeId {
        // The node was rewritten, let's handle it
        if newLayout == nil {
          // We have not yet collected any previous rewritten nodes. Initialize
          // the new layout with the previous nodes of the parent. This is 
          // possible, since we know they were not rewritten.
          
          // The below implementation is based on Collection.map but directly
          // reserves enough capacity for the entire layout.
          newLayout = ContiguousArray<RawSyntax?>()
          newLayout!.reserveCapacity(node.raw.numberOfChildren)
          for j in 0..<childIndex {
            newLayout!.append(node.raw.child(at: j))
          }
        }
        
        // Now that we know we have a new layout in which we collect rewritten 
        // nodes, add it.
        newLayout!.append(rewritten.raw)
      } else {
        // The node was not changed by the rewriter. Only store it if a previous
        // node has been rewritten and we are collecting a rewritten layout.
        if newLayout != nil {
          newLayout!.append(raw)
        }
      }
    }

    if let newLayout = newLayout {
      // A child node was rewritten. Build the updated node.
      
      // Sanity check, ensure the new children are the same length.
      assert(newLayout.count == node.raw.numberOfChildren)
      
      let newRaw = node.raw.replacingLayout(Array(newLayout))
      return SyntaxType(Syntax(SyntaxData.forRoot(newRaw)))!
    } else {
      // No child node was rewritten. So no need to change this node as well.
      return node
    }

  }
}

/// The enum describes how the SyntaxVistor should continue after visiting
/// the current node.
public enum SyntaxVisitorContinueKind {

  /// The visitor should visit the descendents of the current node.
  case visitChildren

  /// The visitor should avoid visiting the descendents of the current node.
  case skipChildren
}

open class SyntaxVisitor {
  public init() {}

  /// Walk all nodes of the given syntax tree, calling the corresponding `visit` 
  /// function for every node that is being visited.
  public func walk<SyntaxType: SyntaxProtocol>(_ node: SyntaxType) {
    visit(node.data)
  }

% for node in SYNTAX_NODES:
%   if is_visitable(node):
  /// Visiting `${node.name}` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `${node.name}` and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ${node.name}) {}
%   end
% end

  /// Visiting `TokenSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TokenSyntax) {}

  /// Visiting `UnknownSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnknownSyntax) {}

% for node in SYNTAX_NODES:
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImpl${node.name}(_ data: SyntaxData) {
%   if node.is_base():
      let node = Unknown${node.name}(data)
      let needsChildren = (visit(node) == .visitChildren)
      // Avoid calling into visitChildren if possible.
      if needsChildren && node.raw.numberOfChildren > 0 {
        visitChildren(node)
      }
      visitPost(node)
%   else:
      let node = ${node.name}(data)
      let needsChildren = (visit(node) == .visitChildren)
      // Avoid calling into visitChildren if possible.
      if needsChildren && node.raw.numberOfChildren > 0 {
        visitChildren(node)
      }
      visitPost(node)
%   end
  }

% end

  private func visit(_ data: SyntaxData) {
    switch data.raw.kind {
    case .token:
      let node = TokenSyntax(data)
      _ = visit(node)
      // No children to visit.
      visitPost(node)
    case .unknown:
      let node = UnknownSyntax(data)
      let needsChildren = (visit(node) == .visitChildren)
      // Avoid calling into visitChildren if possible.
      if needsChildren && node.raw.numberOfChildren > 0 {
        visitChildren(node)
      }
      visitPost(node)
    // The implementation of every generated case goes into its own function. This
    // circumvents an issue where the compiler allocates stack space for every
    // case statement next to each other in debug builds, causing it to allocate
    // ~50KB per call to this function. rdar://55929175
  % for node in SYNTAX_NODES:
    case .${node.swift_syntax_kind}:
      visitImpl${node.name}(data)
  % end
    }
  }

  private func visitChildren<SyntaxType: SyntaxProtocol>(_ node: SyntaxType) {
    let syntaxNode = Syntax(node)
    let parentBox = SyntaxBox(syntaxNode)
    for childRaw in PresentRawSyntaxChildren(syntaxNode) {
      let childData = SyntaxData(childRaw, parentBox: parentBox)
      visit(childData)
    }
  }
}

/// A `SyntaxVisitor` that can visit the nodes as generic `Syntax` values.
///
/// This subclass of `SyntaxVisitor` is slower than the type-specific visitation 
/// of `SyntaxVisitor`. Use `SyntaxAnyVisitor` if the `visitAny(_)` function 
/// would be useful to have, otherwise inherit from `SyntaxVisitor`.
///
/// This works by overriding the type-specific visit function that delegate to 
/// `visitAny(_)`. A subclass that provides a custom type-specific visit 
/// function, should also call `visitAny(_)` in its implementation, if calling 
/// `visitAny` is needed:
///
///     struct MyVisitor: SyntaxAnyVisitor {
///       func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {
///         <code>
///       }
///
///       func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
///         <code>
///         // Call this to pass tokens to `visitAny(_)` as well if needed
///         visitAny(token)
///       }
///
open class SyntaxAnyVisitor: SyntaxVisitor {
  /// Visiting `UnknownSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting the node and its descendents.
  ///   - node: the node we just finished visiting.
  open func visitAnyPost(_ node: Syntax) {}

  // MARK: Override type specific visit methods

  override open func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(token._syntaxNode)
  }

  override open func visitPost(_ node: TokenSyntax) {
    visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnknownSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnknownSyntax) {
    visitAnyPost(node._syntaxNode)
  }
  
% for node in SYNTAX_NODES:
%   if is_visitable(node):
  override open func visit(_ node: ${node.name}) -> SyntaxVisitorContinueKind {
    return visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ${node.name}) {
    visitAnyPost(node._syntaxNode)
  }
%   end
% end

}
