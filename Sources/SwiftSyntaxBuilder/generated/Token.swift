
//// Automatically Generated by generate-swiftsyntaxbuilder
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

public extension TokenSyntax {
  /// The `_` token
  static var `wildcard`: TokenSyntax {
    return .wildcardToken()
  }
  
  /// The `(` token
  static var `leftParen`: TokenSyntax {
    return .leftParenToken()
  }
  
  /// The `)` token
  static var `rightParen`: TokenSyntax {
    return .rightParenToken()
  }
  
  /// The `{` token
  static var `leftBrace`: TokenSyntax {
    return .leftBraceToken()
  }
  
  /// The `}` token
  static var `rightBrace`: TokenSyntax {
    return .rightBraceToken()
  }
  
  /// The `[` token
  static var `leftSquareBracket`: TokenSyntax {
    return .leftSquareBracketToken()
  }
  
  /// The `]` token
  static var `rightSquareBracket`: TokenSyntax {
    return .rightSquareBracketToken()
  }
  
  /// The `<` token
  static var `leftAngle`: TokenSyntax {
    return .leftAngleToken()
  }
  
  /// The `>` token
  static var `rightAngle`: TokenSyntax {
    return .rightAngleToken()
  }
  
  /// The `.` token
  static var `period`: TokenSyntax {
    return .periodToken()
  }
  
  /// The `,` token
  static var `comma`: TokenSyntax {
    return .commaToken()
  }
  
  /// The `...` token
  static var `ellipsis`: TokenSyntax {
    return .ellipsisToken()
  }
  
  /// The `:` token
  static var `colon`: TokenSyntax {
    return .colonToken()
  }
  
  /// The `;` token
  static var `semicolon`: TokenSyntax {
    return .semicolonToken()
  }
  
  /// The `=` token
  static var `equal`: TokenSyntax {
    return .equalToken()
  }
  
  /// The `@` token
  static var `atSign`: TokenSyntax {
    return .atSignToken()
  }
  
  /// The `#` token
  static var `pound`: TokenSyntax {
    return .poundToken()
  }
  
  /// The `&` token
  static var `prefixAmpersand`: TokenSyntax {
    return .prefixAmpersandToken()
  }
  
  /// The `->` token
  static var `arrow`: TokenSyntax {
    return .arrowToken()
  }
  
  /// The ``` token
  static var `backtick`: TokenSyntax {
    return .backtickToken()
  }
  
  /// The `\` token
  static var `backslash`: TokenSyntax {
    return .backslashToken()
  }
  
  /// The `!` token
  static var `exclamationMark`: TokenSyntax {
    return .exclamationMarkToken()
  }
  
  /// The `?` token
  static var `postfixQuestionMark`: TokenSyntax {
    return .postfixQuestionMarkToken()
  }
  
  /// The `?` token
  static var `infixQuestionMark`: TokenSyntax {
    return .infixQuestionMarkToken()
  }
  
  /// The `"` token
  static var `stringQuote`: TokenSyntax {
    return .stringQuoteToken()
  }
  
  /// The `'` token
  static var `singleQuote`: TokenSyntax {
    return .singleQuoteToken()
  }
  
  /// The `"""` token
  static var `multilineStringQuote`: TokenSyntax {
    return .multilineStringQuoteToken()
  }
  
  /// The `#keyPath` keyword
  static var `poundKeyPath`: Token {
    return .poundKeyPathKeyword()
  }
  
  /// The `#line` keyword
  static var `poundLine`: Token {
    return .poundLineKeyword()
  }
  
  /// The `#selector` keyword
  static var `poundSelector`: Token {
    return .poundSelectorKeyword()
  }
  
  /// The `#file` keyword
  static var `poundFile`: Token {
    return .poundFileKeyword()
  }
  
  /// The `#fileID` keyword
  static var `poundFileID`: Token {
    return .poundFileIDKeyword()
  }
  
  /// The `#filePath` keyword
  static var `poundFilePath`: Token {
    return .poundFilePathKeyword()
  }
  
  /// The `#column` keyword
  static var `poundColumn`: Token {
    return .poundColumnKeyword()
  }
  
  /// The `#function` keyword
  static var `poundFunction`: Token {
    return .poundFunctionKeyword()
  }
  
  /// The `#dsohandle` keyword
  static var `poundDsohandle`: Token {
    return .poundDsohandleKeyword()
  }
  
  /// The `#assert` keyword
  static var `poundAssert`: Token {
    return .poundAssertKeyword()
  }
  
  /// The `#sourceLocation` keyword
  static var `poundSourceLocation`: Token {
    return .poundSourceLocationKeyword()
  }
  
  /// The `#warning` keyword
  static var `poundWarning`: Token {
    return .poundWarningKeyword()
  }
  
  /// The `#error` keyword
  static var `poundError`: Token {
    return .poundErrorKeyword()
  }
  
  /// The `#if` keyword
  static var `poundIf`: Token {
    return .poundIfKeyword()
  }
  
  /// The `#else` keyword
  static var `poundElse`: Token {
    return .poundElseKeyword()
  }
  
  /// The `#elseif` keyword
  static var `poundElseif`: Token {
    return .poundElseifKeyword()
  }
  
  /// The `#endif` keyword
  static var `poundEndif`: Token {
    return .poundEndifKeyword()
  }
  
  /// The `#available` keyword
  static var `poundAvailable`: Token {
    return .poundAvailableKeyword()
  }
  
  /// The `#unavailable` keyword
  static var `poundUnavailable`: Token {
    return .poundUnavailableKeyword()
  }
  
  /// The `#fileLiteral` keyword
  static var `poundFileLiteral`: Token {
    return .poundFileLiteralKeyword()
  }
  
  /// The `#imageLiteral` keyword
  static var `poundImageLiteral`: Token {
    return .poundImageLiteralKeyword()
  }
  
  /// The `#colorLiteral` keyword
  static var `poundColorLiteral`: Token {
    return .poundColorLiteralKeyword()
  }
  
  /// The `#_hasSymbol` keyword
  static var `poundHasSymbol`: Token {
    return .poundHasSymbolKeyword()
  }
  
  /// The `eof` token
  static var eof: TokenSyntax {
    return .eof()
  }
  
  /// The `open` contextual token
  static var open: TokenSyntax {
    return .keyword(.open).withTrailingTrivia(.space)
  }
}
