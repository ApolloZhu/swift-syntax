
//// Automatically Generated by generate-swift-syntax-builder
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

/// Namespace for commonly used tokens with default trivia.
public extension TokenSyntax {
  
  /// The `associatedtype` keyword
  static var `associatedtype`: TokenSyntax {
    TokenSyntax.associatedtypeKeyword()
  }
  
  /// The `class` keyword
  static var `class`: TokenSyntax {
    TokenSyntax.classKeyword()
  }
  
  /// The `deinit` keyword
  static var `deinit`: TokenSyntax {
    TokenSyntax.deinitKeyword()
  }
  
  /// The `enum` keyword
  static var `enum`: TokenSyntax {
    TokenSyntax.enumKeyword()
  }
  
  /// The `extension` keyword
  static var `extension`: TokenSyntax {
    TokenSyntax.extensionKeyword()
  }
  
  /// The `func` keyword
  static var `func`: TokenSyntax {
    TokenSyntax.funcKeyword()
  }
  
  /// The `import` keyword
  static var `import`: TokenSyntax {
    TokenSyntax.importKeyword()
  }
  
  /// The `init` keyword
  static var `init`: TokenSyntax {
    TokenSyntax.initKeyword()
  }
  
  /// The `inout` keyword
  static var `inout`: TokenSyntax {
    TokenSyntax.inoutKeyword()
  }
  
  /// The `let` keyword
  static var `let`: TokenSyntax {
    TokenSyntax.letKeyword()
  }
  
  /// The `operator` keyword
  static var `operator`: TokenSyntax {
    TokenSyntax.operatorKeyword()
  }
  
  /// The `precedencegroup` keyword
  static var `precedencegroup`: TokenSyntax {
    TokenSyntax.precedencegroupKeyword()
  }
  
  /// The `protocol` keyword
  static var `protocol`: TokenSyntax {
    TokenSyntax.protocolKeyword()
  }
  
  /// The `struct` keyword
  static var `struct`: TokenSyntax {
    TokenSyntax.structKeyword()
  }
  
  /// The `subscript` keyword
  static var `subscript`: TokenSyntax {
    TokenSyntax.subscriptKeyword()
  }
  
  /// The `typealias` keyword
  static var `typealias`: TokenSyntax {
    TokenSyntax.typealiasKeyword()
  }
  
  /// The `var` keyword
  static var `var`: TokenSyntax {
    TokenSyntax.varKeyword()
  }
  
  /// The `fileprivate` keyword
  static var `fileprivate`: TokenSyntax {
    TokenSyntax.fileprivateKeyword()
  }
  
  /// The `internal` keyword
  static var `internal`: TokenSyntax {
    TokenSyntax.internalKeyword()
  }
  
  /// The `private` keyword
  static var `private`: TokenSyntax {
    TokenSyntax.privateKeyword()
  }
  
  /// The `public` keyword
  static var `public`: TokenSyntax {
    TokenSyntax.publicKeyword()
  }
  
  /// The `static` keyword
  static var `static`: TokenSyntax {
    TokenSyntax.staticKeyword()
  }
  
  /// The `defer` keyword
  static var `defer`: TokenSyntax {
    TokenSyntax.deferKeyword()
  }
  
  /// The `if` keyword
  static var `if`: TokenSyntax {
    TokenSyntax.ifKeyword()
  }
  
  /// The `guard` keyword
  static var `guard`: TokenSyntax {
    TokenSyntax.guardKeyword()
  }
  
  /// The `do` keyword
  static var `do`: TokenSyntax {
    TokenSyntax.doKeyword()
  }
  
  /// The `repeat` keyword
  static var `repeat`: TokenSyntax {
    TokenSyntax.repeatKeyword()
  }
  
  /// The `else` keyword
  static var `else`: TokenSyntax {
    TokenSyntax.elseKeyword()
  }
  
  /// The `for` keyword
  static var `for`: TokenSyntax {
    TokenSyntax.forKeyword()
  }
  
  /// The `in` keyword
  static var `in`: TokenSyntax {
    TokenSyntax.inKeyword()
  }
  
  /// The `while` keyword
  static var `while`: TokenSyntax {
    TokenSyntax.whileKeyword()
  }
  
  /// The `return` keyword
  static var `return`: TokenSyntax {
    TokenSyntax.returnKeyword()
  }
  
  /// The `break` keyword
  static var `break`: TokenSyntax {
    TokenSyntax.breakKeyword()
  }
  
  /// The `continue` keyword
  static var `continue`: TokenSyntax {
    TokenSyntax.continueKeyword()
  }
  
  /// The `fallthrough` keyword
  static var `fallthrough`: TokenSyntax {
    TokenSyntax.fallthroughKeyword()
  }
  
  /// The `switch` keyword
  static var `switch`: TokenSyntax {
    TokenSyntax.switchKeyword()
  }
  
  /// The `case` keyword
  static var `case`: TokenSyntax {
    TokenSyntax.caseKeyword()
  }
  
  /// The `default` keyword
  static var `default`: TokenSyntax {
    TokenSyntax.defaultKeyword()
  }
  
  /// The `where` keyword
  static var `where`: TokenSyntax {
    TokenSyntax.whereKeyword()
  }
  
  /// The `catch` keyword
  static var `catch`: TokenSyntax {
    TokenSyntax.catchKeyword()
  }
  
  /// The `throw` keyword
  static var `throw`: TokenSyntax {
    TokenSyntax.throwKeyword()
  }
  
  /// The `as` keyword
  static var `as`: TokenSyntax {
    TokenSyntax.asKeyword()
  }
  
  /// The `Any` keyword
  static var `any`: TokenSyntax {
    TokenSyntax.anyKeyword()
  }
  
  /// The `false` keyword
  static var `false`: TokenSyntax {
    TokenSyntax.falseKeyword()
  }
  
  /// The `is` keyword
  static var `is`: TokenSyntax {
    TokenSyntax.isKeyword()
  }
  
  /// The `nil` keyword
  static var `nil`: TokenSyntax {
    TokenSyntax.nilKeyword()
  }
  
  /// The `rethrows` keyword
  static var `rethrows`: TokenSyntax {
    TokenSyntax.rethrowsKeyword()
  }
  
  /// The `super` keyword
  static var `super`: TokenSyntax {
    TokenSyntax.superKeyword()
  }
  
  /// The `self` keyword
  static var `self`: TokenSyntax {
    TokenSyntax.selfKeyword()
  }
  
  /// The `Self` keyword
  static var `capitalSelf`: TokenSyntax {
    TokenSyntax.capitalSelfKeyword()
  }
  
  /// The `true` keyword
  static var `true`: TokenSyntax {
    TokenSyntax.trueKeyword()
  }
  
  /// The `try` keyword
  static var `try`: TokenSyntax {
    TokenSyntax.tryKeyword()
  }
  
  /// The `throws` keyword
  static var `throws`: TokenSyntax {
    TokenSyntax.throwsKeyword()
  }
  
  /// The `__FILE__` keyword
  static var `__FILE__`: TokenSyntax {
    TokenSyntax.__file__Keyword()
  }
  
  /// The `__LINE__` keyword
  static var `__LINE__`: TokenSyntax {
    TokenSyntax.__line__Keyword()
  }
  
  /// The `__COLUMN__` keyword
  static var `__COLUMN__`: TokenSyntax {
    TokenSyntax.__column__Keyword()
  }
  
  /// The `__FUNCTION__` keyword
  static var `__FUNCTION__`: TokenSyntax {
    TokenSyntax.__function__Keyword()
  }
  
  /// The `__DSO_HANDLE__` keyword
  static var `__DSO_HANDLE__`: TokenSyntax {
    TokenSyntax.__dso_handle__Keyword()
  }
  
  /// The `_` keyword
  static var `wildcard`: TokenSyntax {
    TokenSyntax.wildcardKeyword()
  }
  
  /// The `(` token
  static var `leftParen`: TokenSyntax {
    TokenSyntax.leftParenToken()
  }
  
  /// The `)` token
  static var `rightParen`: TokenSyntax {
    TokenSyntax.rightParenToken()
  }
  
  /// The `{` token
  static var `leftBrace`: TokenSyntax {
    TokenSyntax.leftBraceToken()
  }
  
  /// The `}` token
  static var `rightBrace`: TokenSyntax {
    TokenSyntax.rightBraceToken()
  }
  
  /// The `[` token
  static var `leftSquareBracket`: TokenSyntax {
    TokenSyntax.leftSquareBracketToken()
  }
  
  /// The `]` token
  static var `rightSquareBracket`: TokenSyntax {
    TokenSyntax.rightSquareBracketToken()
  }
  
  /// The `<` token
  static var `leftAngle`: TokenSyntax {
    TokenSyntax.leftAngleToken()
  }
  
  /// The `>` token
  static var `rightAngle`: TokenSyntax {
    TokenSyntax.rightAngleToken()
  }
  
  /// The `.` token
  static var `period`: TokenSyntax {
    TokenSyntax.periodToken()
  }
  
  /// The `.` token
  static var `prefixPeriod`: TokenSyntax {
    TokenSyntax.prefixPeriodToken()
  }
  
  /// The `,` token
  static var `comma`: TokenSyntax {
    TokenSyntax.commaToken()
  }
  
  /// The `...` token
  static var `ellipsis`: TokenSyntax {
    TokenSyntax.ellipsisToken()
  }
  
  /// The `:` token
  static var `colon`: TokenSyntax {
    TokenSyntax.colonToken()
  }
  
  /// The `;` token
  static var `semicolon`: TokenSyntax {
    TokenSyntax.semicolonToken()
  }
  
  /// The `=` token
  static var `equal`: TokenSyntax {
    TokenSyntax.equalToken()
  }
  
  /// The `@` token
  static var `atSign`: TokenSyntax {
    TokenSyntax.atSignToken()
  }
  
  /// The `#` token
  static var `pound`: TokenSyntax {
    TokenSyntax.poundToken()
  }
  
  /// The `&` token
  static var `prefixAmpersand`: TokenSyntax {
    TokenSyntax.prefixAmpersandToken()
  }
  
  /// The `->` token
  static var `arrow`: TokenSyntax {
    TokenSyntax.arrowToken()
  }
  
  /// The ``` token
  static var `backtick`: TokenSyntax {
    TokenSyntax.backtickToken()
  }
  
  /// The `\` token
  static var `backslash`: TokenSyntax {
    TokenSyntax.backslashToken()
  }
  
  /// The `!` token
  static var `exclamationMark`: TokenSyntax {
    TokenSyntax.exclamationMarkToken()
  }
  
  /// The `?` token
  static var `postfixQuestionMark`: TokenSyntax {
    TokenSyntax.postfixQuestionMarkToken()
  }
  
  /// The `?` token
  static var `infixQuestionMark`: TokenSyntax {
    TokenSyntax.infixQuestionMarkToken()
  }
  
  /// The `"` token
  static var `stringQuote`: TokenSyntax {
    TokenSyntax.stringQuoteToken()
  }
  
  /// The `'` token
  static var `singleQuote`: TokenSyntax {
    TokenSyntax.singleQuoteToken()
  }
  
  /// The `"""` token
  static var `multilineStringQuote`: TokenSyntax {
    TokenSyntax.multilineStringQuoteToken()
  }
  
  /// The `#keyPath` keyword
  static var `poundKeyPath`: TokenSyntax {
    TokenSyntax.poundKeyPathKeyword()
  }
  
  /// The `#line` keyword
  static var `poundLine`: TokenSyntax {
    TokenSyntax.poundLineKeyword()
  }
  
  /// The `#selector` keyword
  static var `poundSelector`: TokenSyntax {
    TokenSyntax.poundSelectorKeyword()
  }
  
  /// The `#file` keyword
  static var `poundFile`: TokenSyntax {
    TokenSyntax.poundFileKeyword()
  }
  
  /// The `#fileID` keyword
  static var `poundFileID`: TokenSyntax {
    TokenSyntax.poundFileIDKeyword()
  }
  
  /// The `#filePath` keyword
  static var `poundFilePath`: TokenSyntax {
    TokenSyntax.poundFilePathKeyword()
  }
  
  /// The `#column` keyword
  static var `poundColumn`: TokenSyntax {
    TokenSyntax.poundColumnKeyword()
  }
  
  /// The `#function` keyword
  static var `poundFunction`: TokenSyntax {
    TokenSyntax.poundFunctionKeyword()
  }
  
  /// The `#dsohandle` keyword
  static var `poundDsohandle`: TokenSyntax {
    TokenSyntax.poundDsohandleKeyword()
  }
  
  /// The `#assert` keyword
  static var `poundAssert`: TokenSyntax {
    TokenSyntax.poundAssertKeyword()
  }
  
  /// The `#sourceLocation` keyword
  static var `poundSourceLocation`: TokenSyntax {
    TokenSyntax.poundSourceLocationKeyword()
  }
  
  /// The `#warning` keyword
  static var `poundWarning`: TokenSyntax {
    TokenSyntax.poundWarningKeyword()
  }
  
  /// The `#error` keyword
  static var `poundError`: TokenSyntax {
    TokenSyntax.poundErrorKeyword()
  }
  
  /// The `#if` keyword
  static var `poundIf`: TokenSyntax {
    TokenSyntax.poundIfKeyword()
  }
  
  /// The `#else` keyword
  static var `poundElse`: TokenSyntax {
    TokenSyntax.poundElseKeyword()
  }
  
  /// The `#elseif` keyword
  static var `poundElseif`: TokenSyntax {
    TokenSyntax.poundElseifKeyword()
  }
  
  /// The `#endif` keyword
  static var `poundEndif`: TokenSyntax {
    TokenSyntax.poundEndifKeyword()
  }
  
  /// The `#available` keyword
  static var `poundAvailable`: TokenSyntax {
    TokenSyntax.poundAvailableKeyword()
  }
  
  /// The `#unavailable` keyword
  static var `poundUnavailable`: TokenSyntax {
    TokenSyntax.poundUnavailableKeyword()
  }
  
  /// The `#fileLiteral` keyword
  static var `poundFileLiteral`: TokenSyntax {
    TokenSyntax.poundFileLiteralKeyword()
  }
  
  /// The `#imageLiteral` keyword
  static var `poundImageLiteral`: TokenSyntax {
    TokenSyntax.poundImageLiteralKeyword()
  }
  
  /// The `#colorLiteral` keyword
  static var `poundColorLiteral`: TokenSyntax {
    TokenSyntax.poundColorLiteralKeyword()
  }
  
  /// The `)` token
  static var `stringInterpolationAnchor`: TokenSyntax {
    TokenSyntax.stringInterpolationAnchorToken()
  }
  
  /// The `yield` token
  static var `yield`: TokenSyntax {
    TokenSyntax.yieldToken()
  }
  
  /// The `eof` token
  static var eof: TokenSyntax {
    TokenSyntax.eof()
  }
  
  /// The `open` contextual token
  static var open: TokenSyntax {
    TokenSyntax.contextualKeyword("open")
    .withTrailingTrivia(.space)
  }
}
