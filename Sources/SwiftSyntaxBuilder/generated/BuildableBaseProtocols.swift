
//// Automatically Generated by generate-swiftsyntaxbuilder
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax
import SwiftBasicFormat

public protocol DeclListBuildable: SyntaxListBuildable {
  /// Builds list of `DeclSyntax`s.
  func buildDeclList() -> [DeclSyntax]
}
public protocol DeclBuildable: ExpressibleAsDeclBuildable, DeclListBuildable, SyntaxBuildable {
  /// Builds list of `DeclSyntax`s.
  func buildDecl() -> DeclSyntax
}
public extension DeclBuildable {
  /// Satisfies conformance to `ExpressibleAsDeclBuildable`.
  func createDeclBuildable() -> DeclBuildable {
    return self
  }
  /// Builds list of `DeclSyntax`s.
  ///
  /// Satisfies conformance to `DeclListBuildable`
  func buildDeclList() -> [DeclSyntax] {
    return [buildDecl()]
  }
  /// Builds a `DeclSyntax`.
  /// - Returns: A new `Syntax` with the built `DeclSyntax`.
  ///
  /// Satisfies conformance to `SyntaxBuildable`.
  func buildSyntax() -> Syntax {
    return Syntax(buildDecl())
  }
}
public protocol ExprListBuildable: SyntaxListBuildable {
  /// Builds list of `ExprSyntax`s.
  func buildExprList() -> [ExprSyntax]
}
public protocol ExprBuildable: ExpressibleAsExprBuildable, ExprListBuildable, SyntaxBuildable {
  /// Builds list of `ExprSyntax`s.
  func buildExpr() -> ExprSyntax
}
public extension ExprBuildable {
  /// Satisfies conformance to `ExpressibleAsExprBuildable`.
  func createExprBuildable() -> ExprBuildable {
    return self
  }
  /// Builds list of `ExprSyntax`s.
  ///
  /// Satisfies conformance to `ExprListBuildable`
  func buildExprList() -> [ExprSyntax] {
    return [buildExpr()]
  }
  /// Builds a `ExprSyntax`.
  /// - Returns: A new `Syntax` with the built `ExprSyntax`.
  ///
  /// Satisfies conformance to `SyntaxBuildable`.
  func buildSyntax() -> Syntax {
    return Syntax(buildExpr())
  }
}
public protocol PatternListBuildable: SyntaxListBuildable {
  /// Builds list of `PatternSyntax`s.
  func buildPatternList() -> [PatternSyntax]
}
public protocol PatternBuildable: ExpressibleAsPatternBuildable, PatternListBuildable, SyntaxBuildable {
  /// Builds list of `PatternSyntax`s.
  func buildPattern() -> PatternSyntax
}
public extension PatternBuildable {
  /// Satisfies conformance to `ExpressibleAsPatternBuildable`.
  func createPatternBuildable() -> PatternBuildable {
    return self
  }
  /// Builds list of `PatternSyntax`s.
  ///
  /// Satisfies conformance to `PatternListBuildable`
  func buildPatternList() -> [PatternSyntax] {
    return [buildPattern()]
  }
  /// Builds a `PatternSyntax`.
  /// - Returns: A new `Syntax` with the built `PatternSyntax`.
  ///
  /// Satisfies conformance to `SyntaxBuildable`.
  func buildSyntax() -> Syntax {
    return Syntax(buildPattern())
  }
}
public protocol StmtListBuildable: SyntaxListBuildable {
  /// Builds list of `StmtSyntax`s.
  func buildStmtList() -> [StmtSyntax]
}
public protocol StmtBuildable: ExpressibleAsStmtBuildable, StmtListBuildable, SyntaxBuildable {
  /// Builds list of `StmtSyntax`s.
  func buildStmt() -> StmtSyntax
}
public extension StmtBuildable {
  /// Satisfies conformance to `ExpressibleAsStmtBuildable`.
  func createStmtBuildable() -> StmtBuildable {
    return self
  }
  /// Builds list of `StmtSyntax`s.
  ///
  /// Satisfies conformance to `StmtListBuildable`
  func buildStmtList() -> [StmtSyntax] {
    return [buildStmt()]
  }
  /// Builds a `StmtSyntax`.
  /// - Returns: A new `Syntax` with the built `StmtSyntax`.
  ///
  /// Satisfies conformance to `SyntaxBuildable`.
  func buildSyntax() -> Syntax {
    return Syntax(buildStmt())
  }
}
public protocol SyntaxListBuildable {
  /// Builds list of `Syntax`s.
  func buildSyntaxList() -> [Syntax]
}
public protocol SyntaxBuildable: ExpressibleAsSyntaxBuildable, SyntaxListBuildable {
  /// Builds list of `Syntax`s.
  func buildSyntax() -> Syntax
}
public extension SyntaxBuildable {
  /// Satisfies conformance to `ExpressibleAsSyntaxBuildable`.
  func createSyntaxBuildable() -> SyntaxBuildable {
    return self
  }
  /// Builds list of `Syntax`s.
  ///
  /// Satisfies conformance to `SyntaxListBuildable`
  func buildSyntaxList() -> [Syntax] {
    return [buildSyntax()]
  }
}
public protocol TypeListBuildable: SyntaxListBuildable {
  /// Builds list of `TypeSyntax`s.
  func buildTypeList() -> [TypeSyntax]
}
public protocol TypeBuildable: ExpressibleAsTypeBuildable, TypeListBuildable, SyntaxBuildable {
  /// Builds list of `TypeSyntax`s.
  func buildType() -> TypeSyntax
}
public extension TypeBuildable {
  /// Satisfies conformance to `ExpressibleAsTypeBuildable`.
  func createTypeBuildable() -> TypeBuildable {
    return self
  }
  /// Builds list of `TypeSyntax`s.
  ///
  /// Satisfies conformance to `TypeListBuildable`
  func buildTypeList() -> [TypeSyntax] {
    return [buildType()]
  }
  /// Builds a `TypeSyntax`.
  /// - Returns: A new `Syntax` with the built `TypeSyntax`.
  ///
  /// Satisfies conformance to `SyntaxBuildable`.
  func buildSyntax() -> Syntax {
    return Syntax(buildType())
  }
}
