
//// Automatically Generated by generate-swiftsyntaxbuilder
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

/// `AccessPath` represents a collection of `AccessPathComponentSyntax`
extension AccessPath: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: AccessPathComponent...) {
    self.init (elements)
  }
}

/// `AccessorList` represents a collection of `AccessorDeclSyntax`
extension AccessorList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: AccessorDecl...) {
    self.init (elements)
  }
}

/// `ArrayElementList` represents a collection of `ArrayElementSyntax`
extension ArrayElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ArrayElement...) {
    self.init (elements)
  }
}

/// `AttributeList` represents a collection of `Syntax`
extension AttributeList: ExpressibleByArrayLiteral {
  /// Creates a `AttributeList` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = AttributeListSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `AvailabilitySpecList` represents a collection of `AvailabilityArgumentSyntax`
extension AvailabilitySpecList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: AvailabilityArgument...) {
    self.init (elements)
  }
}

/// `BackDeployVersionList` represents a collection of `BackDeployVersionArgumentSyntax`
extension BackDeployVersionList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: BackDeployVersionArgument...) {
    self.init (elements)
  }
}

/// `CaseItemList` represents a collection of `CaseItemSyntax`
extension CaseItemList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: CaseItem...) {
    self.init (elements)
  }
}

/// `CatchClauseList` represents a collection of `CatchClauseSyntax`
extension CatchClauseList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: CatchClause...) {
    self.init (elements)
  }
}

/// `CatchItemList` represents a collection of `CatchItemSyntax`
extension CatchItemList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: CatchItem...) {
    self.init (elements)
  }
}

/// `ClosureCaptureItemList` represents a collection of `ClosureCaptureItemSyntax`
extension ClosureCaptureItemList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ClosureCaptureItem...) {
    self.init (elements)
  }
}

/// `ClosureParamList` represents a collection of `ClosureParamSyntax`
extension ClosureParamList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ClosureParam...) {
    self.init (elements)
  }
}

/// `CodeBlockItemList` represents a collection of `CodeBlockItemSyntax`
extension CodeBlockItemList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: CodeBlockItem...) {
    self.init (elements)
  }
}

/// `CompositionTypeElementList` represents a collection of `CompositionTypeElementSyntax`
extension CompositionTypeElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: CompositionTypeElement...) {
    self.init (elements)
  }
}

/// `ConditionElementList` represents a collection of `ConditionElementSyntax`
extension ConditionElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ConditionElement...) {
    self.init (elements)
  }
}

/// `DeclNameArgumentList` represents a collection of `DeclNameArgumentSyntax`
extension DeclNameArgumentList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: DeclNameArgument...) {
    self.init (elements)
  }
}

/// `DesignatedTypeList` represents a collection of `DesignatedTypeElementSyntax`
extension DesignatedTypeList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: DesignatedTypeElement...) {
    self.init (elements)
  }
}

/// `DictionaryElementList` represents a collection of `DictionaryElementSyntax`
extension DictionaryElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: DictionaryElement...) {
    self.init (elements)
  }
}

/// `DifferentiabilityParamList` represents a collection of `DifferentiabilityParamSyntax`
extension DifferentiabilityParamList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: DifferentiabilityParam...) {
    self.init (elements)
  }
}

/// A collection of 0 or more `EnumCaseElement`s.
extension EnumCaseElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: EnumCaseElement...) {
    self.init (elements)
  }
}

/// A list of expressions connected by operators. This list is containedby a `SequenceExprSyntax`.
extension ExprList: ExpressibleByArrayLiteral {
  /// Creates a `ExprList` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `ExprSyntaxProtocol`
  public init (_ elements: [ExprSyntaxProtocol]) {
    self = ExprListSyntax(elements.map { 
      ExprSyntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: ExprSyntaxProtocol...) {
    self.init (elements)
  }
}

/// `FunctionParameterList` represents a collection of `FunctionParameterSyntax`
extension FunctionParameterList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: FunctionParameter...) {
    self.init (elements)
  }
}

/// `GenericArgumentList` represents a collection of `GenericArgumentSyntax`
extension GenericArgumentList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: GenericArgument...) {
    self.init (elements)
  }
}

/// `GenericParameterList` represents a collection of `GenericParameterSyntax`
extension GenericParameterList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: GenericParameter...) {
    self.init (elements)
  }
}

/// `GenericRequirementList` represents a collection of `GenericRequirementSyntax`
extension GenericRequirementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: GenericRequirement...) {
    self.init (elements)
  }
}

/// `IfConfigClauseList` represents a collection of `IfConfigClauseSyntax`
extension IfConfigClauseList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: IfConfigClause...) {
    self.init (elements)
  }
}

/// `InheritedTypeList` represents a collection of `InheritedTypeSyntax`
extension InheritedTypeList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: InheritedType...) {
    self.init (elements)
  }
}

/// `KeyPathComponentList` represents a collection of `KeyPathComponentSyntax`
extension KeyPathComponentList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: KeyPathComponent...) {
    self.init (elements)
  }
}

/// `MemberDeclList` represents a collection of `MemberDeclListItemSyntax`
extension MemberDeclList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: MemberDeclListItem...) {
    self.init (elements)
  }
}

/// `ModifierList` represents a collection of `DeclModifierSyntax`
extension ModifierList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: DeclModifier...) {
    self.init (elements)
  }
}

/// `MultipleTrailingClosureElementList` represents a collection of `MultipleTrailingClosureElementSyntax`
extension MultipleTrailingClosureElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: MultipleTrailingClosureElement...) {
    self.init (elements)
  }
}

/// `NonEmptyTokenList` represents a collection of `TokenSyntax`
extension NonEmptyTokenList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: Token...) {
    self.init (elements)
  }
}

/// `ObjCSelector` represents a collection of `ObjCSelectorPieceSyntax`
extension ObjCSelector: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ObjCSelectorPiece...) {
    self.init (elements)
  }
}

/// `ObjcName` represents a collection of `ObjcNamePieceSyntax`
extension ObjcName: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: ObjcNamePiece...) {
    self.init (elements)
  }
}

/// `PatternBindingList` represents a collection of `PatternBindingSyntax`
extension PatternBindingList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: PatternBinding...) {
    self.init (elements)
  }
}

/// `PrecedenceGroupAttributeList` represents a collection of `Syntax`
extension PrecedenceGroupAttributeList: ExpressibleByArrayLiteral {
  /// Creates a `PrecedenceGroupAttributeList` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = PrecedenceGroupAttributeListSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `PrecedenceGroupNameList` represents a collection of `PrecedenceGroupNameElementSyntax`
extension PrecedenceGroupNameList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: PrecedenceGroupNameElement...) {
    self.init (elements)
  }
}

/// `PrimaryAssociatedTypeList` represents a collection of `PrimaryAssociatedTypeSyntax`
extension PrimaryAssociatedTypeList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: PrimaryAssociatedType...) {
    self.init (elements)
  }
}

/// A collection of arguments for the `@_specialize` attribute
extension SpecializeAttributeSpecList: ExpressibleByArrayLiteral {
  /// Creates a `SpecializeAttributeSpecList` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = SpecializeAttributeSpecListSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `StringLiteralSegments` represents a collection of `Syntax`
extension StringLiteralSegments: ExpressibleByArrayLiteral {
  /// Creates a `StringLiteralSegments` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = StringLiteralSegmentsSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `SwitchCaseList` represents a collection of `Syntax`
extension SwitchCaseList: ExpressibleByArrayLiteral {
  /// Creates a `SwitchCaseList` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = SwitchCaseListSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `TokenList` represents a collection of `TokenSyntax`
extension TokenList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: Token...) {
    self.init (elements)
  }
}

/// `TupleExprElementList` represents a collection of `TupleExprElementSyntax`
extension TupleExprElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: TupleExprElement...) {
    self.init (elements)
  }
}

/// `TuplePatternElementList` represents a collection of `TuplePatternElementSyntax`
extension TuplePatternElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: TuplePatternElement...) {
    self.init (elements)
  }
}

/// `TupleTypeElementList` represents a collection of `TupleTypeElementSyntax`
extension TupleTypeElementList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: TupleTypeElement...) {
    self.init (elements)
  }
}

/// A collection of syntax nodes that occurred in the source code butcould not be used to form a valid syntax tree.
extension UnexpectedNodes: ExpressibleByArrayLiteral {
  /// Creates a `UnexpectedNodes` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `SyntaxProtocol`
  public init (_ elements: [SyntaxProtocol]) {
    self = UnexpectedNodesSyntax(elements.map { 
      Syntax(fromProtocol: $0) 
    })
  }
  public init (arrayLiteral elements: SyntaxProtocol...) {
    self.init (elements)
  }
}

/// `YieldExprList` represents a collection of `YieldExprListElementSyntax`
extension YieldExprList: ExpressibleByArrayLiteral {
  public init (arrayLiteral elements: YieldExprListElement...) {
    self.init (elements)
  }
}
