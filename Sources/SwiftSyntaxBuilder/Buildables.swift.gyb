%{
  from gyb_syntax_support import *
  from gyb_syntax_support.kinds import lowercase_first_word
  from gyb_syntax_support.kinds import SYNTAX_BASE_KINDS
  from gyb_syntax_support.kinds import syntax_buildable_child_type, syntax_buildable_default_init_value
  from gyb_syntax_support.protocolsMap import SYNTAX_BUILDABLE_EXPRESSIBLE_AS_CONFORMANCES
  SYNTAX_COLLECTION_EXPRESSIBLE_AS_CONFORMANCES = syntax_collection_element_to_collection_mapping()
  NODE_MAP = create_node_map()
  # -*- mode: Swift -*-
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From DeclBuildables.swift.gyb.
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2021 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

// MARK: Protocols

% for kind in SYNTAX_BASE_KINDS:
%   if kind != 'SyntaxCollection':
%     build_kind = 'Syntax' if kind == 'Syntax' else kind + 'Syntax'
%     if kind == 'Syntax':
public protocol ${kind}ListBuildable {
%     else:
public protocol ${kind}ListBuildable: SyntaxListBuildable {
%     end
  /// Builds list of `${build_kind}`s.
  /// - Parameter format: The `Format` to use.
  /// - Parameter leadingTrivia: Replaces the the last leading trivia if not nil.
  /// - Returns: A list of `${build_kind}`.
  func build${kind}List(format: Format, leadingTrivia: Trivia?) -> [${build_kind}]
}

%     buildable_type = kind + 'Buildable'
%     expressible_as_type = 'ExpressibleAs' + buildable_type
%     expressible_as_protocols = SYNTAX_COLLECTION_EXPRESSIBLE_AS_CONFORMANCES.get(buildable_type) or []
%     expressible_as_protocols += SYNTAX_BUILDABLE_EXPRESSIBLE_AS_CONFORMANCES.get(buildable_type) or []
%     expressible_as_protocols = map(lambda x : 'ExpressibleAs' + x, expressible_as_protocols)
%     if expressible_as_protocols:
public protocol ${expressible_as_type}: ${', '.join(expressible_as_protocols)} {
%     else:
public protocol ${expressible_as_type} {
%     end
  func create${buildable_type}() -> ${buildable_type}
}

%     if kind == 'Syntax':
public protocol ${buildable_type}: ExpressibleAs${buildable_type}, ${kind}ListBuildable {
%     else:
public protocol ${buildable_type}: ExpressibleAs${buildable_type}, SyntaxBuildable, ${kind}ListBuildable {
%     end
  /// Builds a `${build_kind}`.
  /// - Parameter format: The `Format` to use.
  /// - Parameter leadingTrivia: Replaces the the last leading trivia if not nil.
  /// - Returns: A list of `${build_kind}`.
  func build${kind}(format: Format, leadingTrivia: Trivia?) -> ${build_kind}
}

extension ${buildable_type} {
  public func create${buildable_type}() -> ${buildable_type} {
    self
  }
}

extension ${buildable_type} {
%     if kind != 'Syntax':
  /// Builds a `${build_kind}`.
  /// - Returns: A `${build_kind}`.
  func build${kind}(format: Format) -> ${build_kind} {
    build${kind}(format: format, leadingTrivia: nil)
  }

%     end
  /// Builds a `${build_kind}`.
  /// - Returns: A `${build_kind}`.
  public func buildSyntax(format: Format) -> Syntax {
    buildSyntax(format: format, leadingTrivia: nil)
  }

  /// Builds a `${build_kind}`.
  /// - Parameter format: The `Format` to use.
  /// - Parameter leadingTrivia: Replaces the the last leading trivia if not nil.
  /// - Returns: A new `Syntax` with the builded `${build_kind}`.
  public func buildSyntax(format: Format, leadingTrivia: Trivia?) -> Syntax {
    Syntax(build${kind}(format: format, leadingTrivia: leadingTrivia))
  }

  /// Builds list of `${build_kind}`s.
  /// - Parameter format: The `Format` to use.
  /// - Parameter leadingTrivia: Replaces the the last leading trivia if not nil.
  /// - Returns: A list of `${build_kind}`.
  public func build${kind}List(format: Format, leadingTrivia: Trivia? = nil) -> [${build_kind}] {
    [build${kind}(format: format, leadingTrivia: leadingTrivia)]
  }
}

%   end
% end
// MARK: - Buildables

% for node in SYNTAX_NODES:
%   if node.is_buildable():
%     if node.description:
%       for line in dedented_lines(node.description):
/// ${line}
%       end
%     end
public struct ${node.syntax_kind}: ${node.base_kind}Buildable {
%     for child in node.children:
%       param_type = syntax_buildable_child_type(child.type_name, child.syntax_kind, child.is_token(), child.is_optional)
  let ${"%s: %s" % (child.swift_name, param_type)}
%     end

  /// Creates a `${node.syntax_kind}` using the provided parameters.
  /// - Parameters:
%     for child in node.children:
%       description = ""
%       if child.description:
%         for line in dedented_lines(child.description):
%           description += line
%         end
%       end
%       description = description.replace("\n", " ").strip()
  ///   - ${lowercase_first_word(child.name)}: ${description}
%     end
  public init(
%     init_parameters = []
%     for child in node.children:
%       child_token = SYNTAX_TOKEN_MAP.get(child.syntax_kind)
%       param_type = syntax_buildable_child_type(child.type_name, child.syntax_kind, child.is_token(), child.is_optional)
%       default_value = syntax_buildable_default_init_value(child, child_token)
%       init_parameters.append("%s: ExpressibleAs%s%s" % (child.swift_name, param_type, default_value))
%     end
    ${',\n    '.join(init_parameters)}
  ) {
%     for child in node.children:
%       create_method_dot = '?.' if child.is_optional else '.'
%       child_token = SYNTAX_TOKEN_MAP.get(child.syntax_kind)
%       param_type = syntax_buildable_child_type(child.type_name, child.syntax_kind, child.is_token())
    self.${child.swift_name} = ${child.swift_name}${create_method_dot}create${param_type}()
%     end
  }
  
  func build${node.syntax_kind}(format: Format, leadingTrivia: Trivia? = nil) -> ${node.syntax_kind}Syntax {
%     child_params = []
%     for child in node.children:
%       param_expr = child.swift_name
%       if child.is_token() and child.requires_leading_newline:
%         param_expr = param_expr + '.withLeadingTrivia(.newlines(1) + format._makeIndent() + (' + param_expr + '.leadingTrivia ?? []))'
%       elif child.syntax_kind in SYNTAX_BASE_KINDS or not child.is_token():
%         if child.is_optional:
%           param_expr = param_expr + "?"
%         end
%         format = 'format'
%         if child.is_indented:
%           format += '._indented()'
%         end            
%         param_expr = param_expr + ".build" + child.syntax_kind + "(format: " + format + ")"
%       end
%       child_params.append("%s: %s" % (child.swift_name, param_expr))
%     end
    let ${node.swift_syntax_kind} = SyntaxFactory.make${node.syntax_kind}(
      ${',\n      '.join(child_params)}
    )
    
    if let leadingTrivia = leadingTrivia {
      return ${node.swift_syntax_kind}.withLeadingTrivia(leadingTrivia + (${node.swift_syntax_kind}.leadingTrivia ?? []))
    }

    return ${node.swift_syntax_kind}
  }

  /// Conformance for `${node.syntax_kind}` to the `${node.base_kind}Buildable` protocol.
%     return_type = 'Syntax' if node.base_kind == 'Syntax' else node.base_kind + 'Syntax'
  public func build${node.base_kind}(format: Format, leadingTrivia: Trivia? = nil) -> ${return_type} {
    let ${node.swift_syntax_kind} = build${node.syntax_kind}(format: format, leadingTrivia: leadingTrivia)
    return ${return_type}(${node.swift_syntax_kind})
  }
}

%   elif node.is_syntax_collection():
// MARK: - Syntax collection

%     element_type = syntax_buildable_child_type(node.collection_element_type, node.collection_element, node.is_token())
%     if node.description:
%       for line in dedented_lines(node.description):
/// ${line}
%       end
%     else:
/// `${node.syntax_kind}` represents a collection of 
/// `${element_type}`s.
%     end
public struct ${node.syntax_kind}: SyntaxBuildable {
  let elements: [${element_type}]

  /// Creates a `${node.syntax_kind}` with the provided list of elements.
  /// - Parameters:
  ///   - elements: A list of `ExpressibleAs${element_type}`
  public init(_ elements: [ExpressibleAs${element_type}]) {
    self.elements = elements.map { $0.create${element_type}() }
  }

  public func build${node.syntax_kind}(format: Format) -> ${node.syntax_kind}Syntax {
%     if not node.is_token():
%       leading_trivia = 'nil'
%       if node.elements_separated_by_newline:
%         leading_trivia = '.newlines(1) + format._makeIndent()'
%       end
    return SyntaxFactory.make${node.syntax_kind}(elements.map {
      $0.build${node.collection_element}(format: format, leadingTrivia: ${leading_trivia})
    })
%     else:
    return SyntaxFactory.make${node.syntax_kind}(elements)
%     end
  }

  public func buildSyntax(format: Format, leadingTrivia: Trivia? = nil) -> Syntax {
    let ${node.swift_syntax_kind} = build${node.syntax_kind}(format: format)

    if let leadingTrivia = leadingTrivia {
      return Syntax(${node.swift_syntax_kind}).withLeadingTrivia(leadingTrivia + (${node.swift_syntax_kind}.leadingTrivia ?? []))
    }

    return Syntax(${node.swift_syntax_kind})
  }
}

%   end
%   if node.is_buildable() or node.is_syntax_collection():
%     expressible_as_type = 'ExpressibleAs' + node.syntax_kind
%     expressible_as_protocols = SYNTAX_COLLECTION_EXPRESSIBLE_AS_CONFORMANCES.get(node.syntax_kind) or []
%     expressible_as_protocols += SYNTAX_BUILDABLE_EXPRESSIBLE_AS_CONFORMANCES.get(node.syntax_kind) or []
%     expressible_as_protocols = map(lambda x : 'ExpressibleAs' + x, expressible_as_protocols)
%     if expressible_as_protocols:
public protocol ${expressible_as_type}: ${', '.join(expressible_as_protocols)} {
%     else:
public protocol ${expressible_as_type} {
%     end
  func create${node.syntax_kind}() -> ${node.syntax_kind}
}

extension ${node.syntax_kind}: ${expressible_as_type} {
  public func create${node.syntax_kind}() -> ${node.syntax_kind} {
    self
  }
}

%   end
% end
public protocol ExpressibleAsTokenSyntax {
  func createTokenSyntax() -> TokenSyntax
}

extension TokenSyntax: ExpressibleAsTokenSyntax {
  public func createTokenSyntax() -> TokenSyntax {
    self
  }
}

// MARK: - Syntax buildable expressible as conformances

% for protocol, conformances in SYNTAX_COLLECTION_EXPRESSIBLE_AS_CONFORMANCES.items():
 %   for conformance in conformances:
 extension ExpressibleAs${protocol} {
   public func create${conformance}() -> ${conformance} {
     ${conformance}([self])
   }
 }

 %   end
 % end
% for protocol, conformances in SYNTAX_BUILDABLE_EXPRESSIBLE_AS_CONFORMANCES.items():
%   for conformance in conformances:
%     node = NODE_MAP.get(conformance)
%     if node and node.children:
%       non_defaulted_params = filter(lambda child : syntax_buildable_default_init_value(child, SYNTAX_TOKEN_MAP.get(child.syntax_kind)) == "", node.children)
%       assert len(non_defaulted_params) == 1, "ExpressibleAs conformances expects the conforming type to have an initializer with a single non-optional child"
%       param = non_defaulted_params[0].swift_name
extension ExpressibleAs${protocol} {
  public func create${conformance}() -> ${conformance} {
    ${conformance}(${param}: self)
  }
}

%     end
%   end
% end
