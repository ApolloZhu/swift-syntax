
//// Automatically Generated by generate-swiftparser
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//


@_spi(RawSyntax) import SwiftSyntax

enum DeclarationModifier: RawTokenKindSubset {
  case staticKeyword
  
  case classKeyword
  
  case final
  
  case required
  
  case optional
  
  case lazy
  
  case dynamic
  
  case infix
  
  case prefix
  
  case postfix
  
  case __consuming
  
  case mutating
  
  case nonmutating
  
  case convenience
  
  case override
  
  case privateKeyword
  
  case fileprivateKeyword
  
  case internalKeyword
  
  case publicKeyword
  
  case package
  
  case open
  
  case __setter_access
  
  case weak
  
  case unowned
  
  case `rethrows`
  
  case indirect
  
  case isolated
  
  case async
  
  case reasync
  
  case nonisolated
  
  case distributed
  
  case _const
  
  case _local
  
  init?(lexeme: Lexer.Lexeme) {
    switch lexeme {
    case RawTokenKindMatch(.staticKeyword): 
      self = .staticKeyword
    case RawTokenKindMatch(.classKeyword): 
      self = .classKeyword
    case RawTokenKindMatch(.final): 
      self = .final
    case RawTokenKindMatch(.required): 
      self = .required
    case RawTokenKindMatch(.optional): 
      self = .optional
    case RawTokenKindMatch(.lazy): 
      self = .lazy
    case RawTokenKindMatch(.dynamic): 
      self = .dynamic
    case RawTokenKindMatch(.infix): 
      self = .infix
    case RawTokenKindMatch(.prefix): 
      self = .prefix
    case RawTokenKindMatch(.postfix): 
      self = .postfix
    case RawTokenKindMatch(.__consuming): 
      self = .__consuming
    case RawTokenKindMatch(.mutating): 
      self = .mutating
    case RawTokenKindMatch(.nonmutating): 
      self = .nonmutating
    case RawTokenKindMatch(.convenience): 
      self = .convenience
    case RawTokenKindMatch(.override): 
      self = .override
    case RawTokenKindMatch(.privateKeyword): 
      self = .privateKeyword
    case RawTokenKindMatch(.fileprivateKeyword): 
      self = .fileprivateKeyword
    case RawTokenKindMatch(.internalKeyword): 
      self = .internalKeyword
    case RawTokenKindMatch(.publicKeyword): 
      self = .publicKeyword
    case RawTokenKindMatch(.package): 
      self = .package
    case RawTokenKindMatch(.open): 
      self = .open
    case RawTokenKindMatch(.__setter_access): 
      self = .__setter_access
    case RawTokenKindMatch(.weak): 
      self = .weak
    case RawTokenKindMatch(.unowned): 
      self = .unowned
    case RawTokenKindMatch(.`rethrows`): 
      self = .`rethrows`
    case RawTokenKindMatch(.indirect): 
      self = .indirect
    case RawTokenKindMatch(.isolated): 
      self = .isolated
    case RawTokenKindMatch(.async): 
      self = .async
    case RawTokenKindMatch(.reasync): 
      self = .reasync
    case RawTokenKindMatch(.nonisolated): 
      self = .nonisolated
    case RawTokenKindMatch(.distributed): 
      self = .distributed
    case RawTokenKindMatch(._const): 
      self = ._const
    case RawTokenKindMatch(._local): 
      self = ._local
    default: 
      return nil
    }
  }
  
  var rawTokenKind: RawTokenKind {
    switch self {
    case .staticKeyword: 
      return .staticKeyword
    case .classKeyword: 
      return .classKeyword
    case .final: 
      return .keyword(.final)
    case .required: 
      return .keyword(.required)
    case .optional: 
      return .keyword(.optional)
    case .lazy: 
      return .keyword(.lazy)
    case .dynamic: 
      return .keyword(.dynamic)
    case .infix: 
      return .keyword(.infix)
    case .prefix: 
      return .keyword(.prefix)
    case .postfix: 
      return .keyword(.postfix)
    case .__consuming: 
      return .keyword(.__consuming)
    case .mutating: 
      return .keyword(.mutating)
    case .nonmutating: 
      return .keyword(.nonmutating)
    case .convenience: 
      return .keyword(.convenience)
    case .override: 
      return .keyword(.override)
    case .privateKeyword: 
      return .privateKeyword
    case .fileprivateKeyword: 
      return .fileprivateKeyword
    case .internalKeyword: 
      return .internalKeyword
    case .publicKeyword: 
      return .publicKeyword
    case .package: 
      return .keyword(.package)
    case .open: 
      return .keyword(.open)
    case .__setter_access: 
      return .keyword(.__setter_access)
    case .weak: 
      return .keyword(.weak)
    case .unowned: 
      return .keyword(.unowned)
    case .`rethrows`: 
      return .keyword(.`rethrows`)
    case .indirect: 
      return .keyword(.indirect)
    case .isolated: 
      return .keyword(.isolated)
    case .async: 
      return .keyword(.async)
    case .reasync: 
      return .keyword(.reasync)
    case .nonisolated: 
      return .keyword(.nonisolated)
    case .distributed: 
      return .keyword(.distributed)
    case ._const: 
      return .keyword(._const)
    case ._local: 
      return .keyword(._local)
    }
  }
}
