
//// Automatically Generated by generate-swiftbasicformat
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax
open class BasicFormat: SyntaxRewriter {
  public var indentationLevel: Int = 0
  open var indentation: TriviaPiece { .spaces(indentationLevel * 4) }
  public var indentedNewline: Trivia { Trivia(pieces: [.newlines(1), indentation]) }
  private var lastRewrittenToken: TokenSyntax?
  
  open override func visit(_ node: UnknownDeclSyntax) -> DeclSyntax {
    return DeclSyntax(UnknownDeclSyntax())
  }
  
  open override func visit(_ node: UnknownExprSyntax) -> ExprSyntax {
    return ExprSyntax(UnknownExprSyntax())
  }
  
  open override func visit(_ node: UnknownStmtSyntax) -> StmtSyntax {
    return StmtSyntax(UnknownStmtSyntax())
  }
  
  open override func visit(_ node: UnknownTypeSyntax) -> TypeSyntax {
    return TypeSyntax(UnknownTypeSyntax())
  }
  
  open override func visit(_ node: UnknownPatternSyntax) -> PatternSyntax {
    return PatternSyntax(UnknownPatternSyntax())
  }
  
  open override func visit(_ node: MissingSyntax) -> Syntax {
    return Syntax(MissingSyntax())
  }
  
  open override func visit(_ node: MissingDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    return DeclSyntax(MissingDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers))
  }
  
  open override func visit(_ node: MissingExprSyntax) -> ExprSyntax {
    return ExprSyntax(MissingExprSyntax())
  }
  
  open override func visit(_ node: MissingStmtSyntax) -> StmtSyntax {
    return StmtSyntax(MissingStmtSyntax())
  }
  
  open override func visit(_ node: MissingTypeSyntax) -> TypeSyntax {
    return TypeSyntax(MissingTypeSyntax())
  }
  
  open override func visit(_ node: MissingPatternSyntax) -> PatternSyntax {
    return PatternSyntax(MissingPatternSyntax())
  }
  
  open override func visit(_ node: CodeBlockItemSyntax) -> Syntax {
    let unexpectedBeforeItem = node.unexpectedBeforeItem.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let item = self.visit(node.item).cast(Syntax.self)
    let unexpectedBetweenItemAndSemicolon = node.unexpectedBetweenItemAndSemicolon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let semicolon = node.semicolon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenSemicolonAndErrorTokens = node.unexpectedBetweenSemicolonAndErrorTokens.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let errorTokens = node.errorTokens.map(self.visit)?.cast(Syntax.self)
    return Syntax(CodeBlockItemSyntax(unexpectedBeforeItem, item: item, unexpectedBetweenItemAndSemicolon, semicolon: semicolon, unexpectedBetweenSemicolonAndErrorTokens, errorTokens: errorTokens))
  }
  
  open override func visit(_ node: CodeBlockItemListSyntax) -> Syntax {
    var formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(CodeBlockItemSyntax.self)
    }
    formattedChildren = formattedChildren.map {
      if $0.leadingTrivia?.first?.isNewline == true {
        return $0
      } else {
        return $0.withLeadingTrivia(indentedNewline + ($0.leadingTrivia ?? []))
      }
    }
    return Syntax(CodeBlockItemListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: CodeBlockSyntax) -> Syntax {
    let unexpectedBeforeLeftBrace = node.unexpectedBeforeLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndStatements = node.unexpectedBetweenLeftBraceAndStatements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    indentationLevel += 1
    let statements = self.visit(node.statements).cast(CodeBlockItemListSyntax.self)
    indentationLevel -= 1
    let unexpectedBetweenStatementsAndRightBrace = node.unexpectedBetweenStatementsAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    var rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    if rightBrace.leadingTrivia.first?.isNewline != true {
      rightBrace.leadingTrivia = indentedNewline + rightBrace.leadingTrivia
    }
    return Syntax(CodeBlockSyntax(unexpectedBeforeLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndStatements, statements: statements, unexpectedBetweenStatementsAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: UnexpectedNodesSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    return Syntax(UnexpectedNodesSyntax(formattedChildren))
  }
  
  open override func visit(_ node: InOutExprSyntax) -> ExprSyntax {
    let unexpectedBeforeAmpersand = node.unexpectedBeforeAmpersand.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ampersand = self.visit(node.ampersand).cast(TokenSyntax.self)
    let unexpectedBetweenAmpersandAndExpression = node.unexpectedBetweenAmpersandAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return ExprSyntax(InOutExprSyntax(unexpectedBeforeAmpersand, ampersand: ampersand, unexpectedBetweenAmpersandAndExpression, expression: expression))
  }
  
  open override func visit(_ node: PoundColumnExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundColumn = node.unexpectedBeforePoundColumn.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundColumn = self.visit(node.poundColumn).cast(TokenSyntax.self)
    return ExprSyntax(PoundColumnExprSyntax(unexpectedBeforePoundColumn, poundColumn: poundColumn))
  }
  
  open override func visit(_ node: TupleExprElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(TupleExprElementSyntax.self)
    }
    return Syntax(TupleExprElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ArrayElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ArrayElementSyntax.self)
    }
    return Syntax(ArrayElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DictionaryElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(DictionaryElementSyntax.self)
    }
    return Syntax(DictionaryElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: StringLiteralSegmentsSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    return Syntax(StringLiteralSegmentsSyntax(formattedChildren))
  }
  
  open override func visit(_ node: TryExprSyntax) -> ExprSyntax {
    let unexpectedBeforeTryKeyword = node.unexpectedBeforeTryKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let tryKeyword = self.visit(node.tryKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenTryKeywordAndQuestionOrExclamationMark = node.unexpectedBetweenTryKeywordAndQuestionOrExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionOrExclamationMark = node.questionOrExclamationMark.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenQuestionOrExclamationMarkAndExpression = node.unexpectedBetweenQuestionOrExclamationMarkAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return ExprSyntax(TryExprSyntax(unexpectedBeforeTryKeyword, tryKeyword: tryKeyword, unexpectedBetweenTryKeywordAndQuestionOrExclamationMark, questionOrExclamationMark: questionOrExclamationMark, unexpectedBetweenQuestionOrExclamationMarkAndExpression, expression: expression))
  }
  
  open override func visit(_ node: AwaitExprSyntax) -> ExprSyntax {
    let unexpectedBeforeAwaitKeyword = node.unexpectedBeforeAwaitKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let awaitKeyword = self.visit(node.awaitKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenAwaitKeywordAndExpression = node.unexpectedBetweenAwaitKeywordAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return ExprSyntax(AwaitExprSyntax(unexpectedBeforeAwaitKeyword, awaitKeyword: awaitKeyword, unexpectedBetweenAwaitKeywordAndExpression, expression: expression))
  }
  
  open override func visit(_ node: MoveExprSyntax) -> ExprSyntax {
    let unexpectedBeforeMoveKeyword = node.unexpectedBeforeMoveKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let moveKeyword = self.visit(node.moveKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenMoveKeywordAndExpression = node.unexpectedBetweenMoveKeywordAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return ExprSyntax(MoveExprSyntax(unexpectedBeforeMoveKeyword, moveKeyword: moveKeyword, unexpectedBetweenMoveKeywordAndExpression, expression: expression))
  }
  
  open override func visit(_ node: DeclNameArgumentSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndColon = node.unexpectedBetweenNameAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    return Syntax(DeclNameArgumentSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndColon, colon: colon))
  }
  
  open override func visit(_ node: DeclNameArgumentListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(DeclNameArgumentSyntax.self)
    }
    return Syntax(DeclNameArgumentListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DeclNameArgumentsSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArguments = node.unexpectedBetweenLeftParenAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = self.visit(node.arguments).cast(DeclNameArgumentListSyntax.self)
    let unexpectedBetweenArgumentsAndRightParen = node.unexpectedBetweenArgumentsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(DeclNameArgumentsSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArguments, arguments: arguments, unexpectedBetweenArgumentsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: IdentifierExprSyntax) -> ExprSyntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndDeclNameArguments = node.unexpectedBetweenIdentifierAndDeclNameArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declNameArguments = node.declNameArguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return ExprSyntax(IdentifierExprSyntax(unexpectedBeforeIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndDeclNameArguments, declNameArguments: declNameArguments))
  }
  
  open override func visit(_ node: SuperRefExprSyntax) -> ExprSyntax {
    let unexpectedBeforeSuperKeyword = node.unexpectedBeforeSuperKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let superKeyword = self.visit(node.superKeyword).cast(TokenSyntax.self)
    return ExprSyntax(SuperRefExprSyntax(unexpectedBeforeSuperKeyword, superKeyword: superKeyword))
  }
  
  open override func visit(_ node: NilLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeNilKeyword = node.unexpectedBeforeNilKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let nilKeyword = self.visit(node.nilKeyword).cast(TokenSyntax.self)
    return ExprSyntax(NilLiteralExprSyntax(unexpectedBeforeNilKeyword, nilKeyword: nilKeyword))
  }
  
  open override func visit(_ node: DiscardAssignmentExprSyntax) -> ExprSyntax {
    let unexpectedBeforeWildcard = node.unexpectedBeforeWildcard.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let wildcard = self.visit(node.wildcard).cast(TokenSyntax.self)
    return ExprSyntax(DiscardAssignmentExprSyntax(unexpectedBeforeWildcard, wildcard: wildcard))
  }
  
  open override func visit(_ node: AssignmentExprSyntax) -> ExprSyntax {
    let unexpectedBeforeAssignToken = node.unexpectedBeforeAssignToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let assignToken = self.visit(node.assignToken).cast(TokenSyntax.self)
    return ExprSyntax(AssignmentExprSyntax(unexpectedBeforeAssignToken, assignToken: assignToken))
  }
  
  open override func visit(_ node: SequenceExprSyntax) -> ExprSyntax {
    let unexpectedBeforeElements = node.unexpectedBeforeElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(ExprListSyntax.self)
    return ExprSyntax(SequenceExprSyntax(unexpectedBeforeElements, elements: elements))
  }
  
  open override func visit(_ node: ExprListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ExprSyntax.self)
    }
    return Syntax(ExprListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: PoundLineExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundLine = node.unexpectedBeforePoundLine.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundLine = self.visit(node.poundLine).cast(TokenSyntax.self)
    return ExprSyntax(PoundLineExprSyntax(unexpectedBeforePoundLine, poundLine: poundLine))
  }
  
  open override func visit(_ node: PoundFileExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundFile = node.unexpectedBeforePoundFile.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundFile = self.visit(node.poundFile).cast(TokenSyntax.self)
    return ExprSyntax(PoundFileExprSyntax(unexpectedBeforePoundFile, poundFile: poundFile))
  }
  
  open override func visit(_ node: PoundFileIDExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundFileID = node.unexpectedBeforePoundFileID.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundFileID = self.visit(node.poundFileID).cast(TokenSyntax.self)
    return ExprSyntax(PoundFileIDExprSyntax(unexpectedBeforePoundFileID, poundFileID: poundFileID))
  }
  
  open override func visit(_ node: PoundFilePathExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundFilePath = node.unexpectedBeforePoundFilePath.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundFilePath = self.visit(node.poundFilePath).cast(TokenSyntax.self)
    return ExprSyntax(PoundFilePathExprSyntax(unexpectedBeforePoundFilePath, poundFilePath: poundFilePath))
  }
  
  open override func visit(_ node: PoundFunctionExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundFunction = node.unexpectedBeforePoundFunction.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundFunction = self.visit(node.poundFunction).cast(TokenSyntax.self)
    return ExprSyntax(PoundFunctionExprSyntax(unexpectedBeforePoundFunction, poundFunction: poundFunction))
  }
  
  open override func visit(_ node: PoundDsohandleExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundDsohandle = node.unexpectedBeforePoundDsohandle.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundDsohandle = self.visit(node.poundDsohandle).cast(TokenSyntax.self)
    return ExprSyntax(PoundDsohandleExprSyntax(unexpectedBeforePoundDsohandle, poundDsohandle: poundDsohandle))
  }
  
  open override func visit(_ node: SymbolicReferenceExprSyntax) -> ExprSyntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericArgumentClause = node.unexpectedBetweenIdentifierAndGenericArgumentClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericArgumentClause = node.genericArgumentClause.map(self.visit)?.cast(GenericArgumentClauseSyntax.self)
    return ExprSyntax(SymbolicReferenceExprSyntax(unexpectedBeforeIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericArgumentClause, genericArgumentClause: genericArgumentClause))
  }
  
  open override func visit(_ node: PrefixOperatorExprSyntax) -> ExprSyntax {
    let unexpectedBeforeOperatorToken = node.unexpectedBeforeOperatorToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorToken = node.operatorToken.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenOperatorTokenAndPostfixExpression = node.unexpectedBetweenOperatorTokenAndPostfixExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let postfixExpression = self.visit(node.postfixExpression).cast(ExprSyntax.self)
    return ExprSyntax(PrefixOperatorExprSyntax(unexpectedBeforeOperatorToken, operatorToken: operatorToken, unexpectedBetweenOperatorTokenAndPostfixExpression, postfixExpression: postfixExpression))
  }
  
  open override func visit(_ node: BinaryOperatorExprSyntax) -> ExprSyntax {
    let unexpectedBeforeOperatorToken = node.unexpectedBeforeOperatorToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorToken = self.visit(node.operatorToken).cast(TokenSyntax.self)
    return ExprSyntax(BinaryOperatorExprSyntax(unexpectedBeforeOperatorToken, operatorToken: operatorToken))
  }
  
  open override func visit(_ node: ArrowExprSyntax) -> ExprSyntax {
    let unexpectedBeforeAsyncKeyword = node.unexpectedBeforeAsyncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asyncKeyword = node.asyncKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAsyncKeywordAndThrowsToken = node.unexpectedBetweenAsyncKeywordAndThrowsToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwsToken = node.throwsToken.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenThrowsTokenAndArrowToken = node.unexpectedBetweenThrowsTokenAndArrowToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arrowToken = self.visit(node.arrowToken).cast(TokenSyntax.self)
    return ExprSyntax(ArrowExprSyntax(unexpectedBeforeAsyncKeyword, asyncKeyword: asyncKeyword, unexpectedBetweenAsyncKeywordAndThrowsToken, throwsToken: throwsToken, unexpectedBetweenThrowsTokenAndArrowToken, arrowToken: arrowToken))
  }
  
  open override func visit(_ node: InfixOperatorExprSyntax) -> ExprSyntax {
    let unexpectedBeforeLeftOperand = node.unexpectedBeforeLeftOperand.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftOperand = self.visit(node.leftOperand).cast(ExprSyntax.self)
    let unexpectedBetweenLeftOperandAndOperatorOperand = node.unexpectedBetweenLeftOperandAndOperatorOperand.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorOperand = self.visit(node.operatorOperand).cast(ExprSyntax.self)
    let unexpectedBetweenOperatorOperandAndRightOperand = node.unexpectedBetweenOperatorOperandAndRightOperand.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightOperand = self.visit(node.rightOperand).cast(ExprSyntax.self)
    return ExprSyntax(InfixOperatorExprSyntax(unexpectedBeforeLeftOperand, leftOperand: leftOperand, unexpectedBetweenLeftOperandAndOperatorOperand, operatorOperand: operatorOperand, unexpectedBetweenOperatorOperandAndRightOperand, rightOperand: rightOperand))
  }
  
  open override func visit(_ node: FloatLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeFloatingDigits = node.unexpectedBeforeFloatingDigits.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let floatingDigits = self.visit(node.floatingDigits).cast(TokenSyntax.self)
    return ExprSyntax(FloatLiteralExprSyntax(unexpectedBeforeFloatingDigits, floatingDigits: floatingDigits))
  }
  
  open override func visit(_ node: TupleExprSyntax) -> ExprSyntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndElementList = node.unexpectedBetweenLeftParenAndElementList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elementList = self.visit(node.elementList).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenElementListAndRightParen = node.unexpectedBetweenElementListAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return ExprSyntax(TupleExprSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndElementList, elementList: elementList, unexpectedBetweenElementListAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: ArrayExprSyntax) -> ExprSyntax {
    let unexpectedBeforeLeftSquare = node.unexpectedBeforeLeftSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftSquare = self.visit(node.leftSquare).cast(TokenSyntax.self)
    let unexpectedBetweenLeftSquareAndElements = node.unexpectedBetweenLeftSquareAndElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(ArrayElementListSyntax.self)
    let unexpectedBetweenElementsAndRightSquare = node.unexpectedBetweenElementsAndRightSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightSquare = self.visit(node.rightSquare).cast(TokenSyntax.self)
    return ExprSyntax(ArrayExprSyntax(unexpectedBeforeLeftSquare, leftSquare: leftSquare, unexpectedBetweenLeftSquareAndElements, elements: elements, unexpectedBetweenElementsAndRightSquare, rightSquare: rightSquare))
  }
  
  open override func visit(_ node: DictionaryExprSyntax) -> ExprSyntax {
    let unexpectedBeforeLeftSquare = node.unexpectedBeforeLeftSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftSquare = self.visit(node.leftSquare).cast(TokenSyntax.self)
    let unexpectedBetweenLeftSquareAndContent = node.unexpectedBetweenLeftSquareAndContent.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let content = self.visit(node.content).cast(Syntax.self)
    let unexpectedBetweenContentAndRightSquare = node.unexpectedBetweenContentAndRightSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightSquare = self.visit(node.rightSquare).cast(TokenSyntax.self)
    return ExprSyntax(DictionaryExprSyntax(unexpectedBeforeLeftSquare, leftSquare: leftSquare, unexpectedBetweenLeftSquareAndContent, content: content, unexpectedBetweenContentAndRightSquare, rightSquare: rightSquare))
  }
  
  open override func visit(_ node: TupleExprElementSyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = node.label.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndExpression = node.unexpectedBetweenColonAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndTrailingComma = node.unexpectedBetweenExpressionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(TupleExprElementSyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndExpression, expression: expression, unexpectedBetweenExpressionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: ArrayElementSyntax) -> Syntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndTrailingComma = node.unexpectedBetweenExpressionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ArrayElementSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: DictionaryElementSyntax) -> Syntax {
    let unexpectedBeforeKeyExpression = node.unexpectedBeforeKeyExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let keyExpression = self.visit(node.keyExpression).cast(ExprSyntax.self)
    let unexpectedBetweenKeyExpressionAndColon = node.unexpectedBetweenKeyExpressionAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndValueExpression = node.unexpectedBetweenColonAndValueExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let valueExpression = self.visit(node.valueExpression).cast(ExprSyntax.self)
    let unexpectedBetweenValueExpressionAndTrailingComma = node.unexpectedBetweenValueExpressionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(DictionaryElementSyntax(unexpectedBeforeKeyExpression, keyExpression: keyExpression, unexpectedBetweenKeyExpressionAndColon, colon: colon, unexpectedBetweenColonAndValueExpression, valueExpression: valueExpression, unexpectedBetweenValueExpressionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: IntegerLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeDigits = node.unexpectedBeforeDigits.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let digits = self.visit(node.digits).cast(TokenSyntax.self)
    return ExprSyntax(IntegerLiteralExprSyntax(unexpectedBeforeDigits, digits: digits))
  }
  
  open override func visit(_ node: BooleanLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeBooleanLiteral = node.unexpectedBeforeBooleanLiteral.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let booleanLiteral = self.visit(node.booleanLiteral).cast(TokenSyntax.self)
    return ExprSyntax(BooleanLiteralExprSyntax(unexpectedBeforeBooleanLiteral, booleanLiteral: booleanLiteral))
  }
  
  open override func visit(_ node: UnresolvedTernaryExprSyntax) -> ExprSyntax {
    let unexpectedBeforeQuestionMark = node.unexpectedBeforeQuestionMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionMark = self.visit(node.questionMark).cast(TokenSyntax.self)
    let unexpectedBetweenQuestionMarkAndFirstChoice = node.unexpectedBetweenQuestionMarkAndFirstChoice.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let firstChoice = self.visit(node.firstChoice).cast(ExprSyntax.self)
    let unexpectedBetweenFirstChoiceAndColonMark = node.unexpectedBetweenFirstChoiceAndColonMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colonMark = self.visit(node.colonMark).cast(TokenSyntax.self)
    return ExprSyntax(UnresolvedTernaryExprSyntax(unexpectedBeforeQuestionMark, questionMark: questionMark, unexpectedBetweenQuestionMarkAndFirstChoice, firstChoice: firstChoice, unexpectedBetweenFirstChoiceAndColonMark, colonMark: colonMark))
  }
  
  open override func visit(_ node: TernaryExprSyntax) -> ExprSyntax {
    let unexpectedBeforeConditionExpression = node.unexpectedBeforeConditionExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let conditionExpression = self.visit(node.conditionExpression).cast(ExprSyntax.self)
    let unexpectedBetweenConditionExpressionAndQuestionMark = node.unexpectedBetweenConditionExpressionAndQuestionMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionMark = self.visit(node.questionMark).cast(TokenSyntax.self)
    let unexpectedBetweenQuestionMarkAndFirstChoice = node.unexpectedBetweenQuestionMarkAndFirstChoice.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let firstChoice = self.visit(node.firstChoice).cast(ExprSyntax.self)
    let unexpectedBetweenFirstChoiceAndColonMark = node.unexpectedBetweenFirstChoiceAndColonMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colonMark = self.visit(node.colonMark).cast(TokenSyntax.self)
    let unexpectedBetweenColonMarkAndSecondChoice = node.unexpectedBetweenColonMarkAndSecondChoice.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let secondChoice = self.visit(node.secondChoice).cast(ExprSyntax.self)
    return ExprSyntax(TernaryExprSyntax(unexpectedBeforeConditionExpression, conditionExpression: conditionExpression, unexpectedBetweenConditionExpressionAndQuestionMark, questionMark: questionMark, unexpectedBetweenQuestionMarkAndFirstChoice, firstChoice: firstChoice, unexpectedBetweenFirstChoiceAndColonMark, colonMark: colonMark, unexpectedBetweenColonMarkAndSecondChoice, secondChoice: secondChoice))
  }
  
  open override func visit(_ node: MemberAccessExprSyntax) -> ExprSyntax {
    let unexpectedBeforeBase = node.unexpectedBeforeBase.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let base = node.base.map(self.visit)?.cast(ExprSyntax.self)
    let unexpectedBetweenBaseAndDot = node.unexpectedBetweenBaseAndDot.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let dot = self.visit(node.dot).cast(TokenSyntax.self)
    let unexpectedBetweenDotAndName = node.unexpectedBetweenDotAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndDeclNameArguments = node.unexpectedBetweenNameAndDeclNameArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declNameArguments = node.declNameArguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return ExprSyntax(MemberAccessExprSyntax(unexpectedBeforeBase, base: base, unexpectedBetweenBaseAndDot, dot: dot, unexpectedBetweenDotAndName, name: name, unexpectedBetweenNameAndDeclNameArguments, declNameArguments: declNameArguments))
  }
  
  open override func visit(_ node: UnresolvedIsExprSyntax) -> ExprSyntax {
    let unexpectedBeforeIsTok = node.unexpectedBeforeIsTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let isTok = self.visit(node.isTok).cast(TokenSyntax.self)
    return ExprSyntax(UnresolvedIsExprSyntax(unexpectedBeforeIsTok, isTok: isTok))
  }
  
  open override func visit(_ node: IsExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndIsTok = node.unexpectedBetweenExpressionAndIsTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let isTok = self.visit(node.isTok).cast(TokenSyntax.self)
    let unexpectedBetweenIsTokAndTypeName = node.unexpectedBetweenIsTokAndTypeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeName = self.visit(node.typeName).cast(TypeSyntax.self)
    return ExprSyntax(IsExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndIsTok, isTok: isTok, unexpectedBetweenIsTokAndTypeName, typeName: typeName))
  }
  
  open override func visit(_ node: UnresolvedAsExprSyntax) -> ExprSyntax {
    let unexpectedBeforeAsTok = node.unexpectedBeforeAsTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asTok = self.visit(node.asTok).cast(TokenSyntax.self)
    let unexpectedBetweenAsTokAndQuestionOrExclamationMark = node.unexpectedBetweenAsTokAndQuestionOrExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionOrExclamationMark = node.questionOrExclamationMark.map(self.visit)?.cast(TokenSyntax.self)
    return ExprSyntax(UnresolvedAsExprSyntax(unexpectedBeforeAsTok, asTok: asTok, unexpectedBetweenAsTokAndQuestionOrExclamationMark, questionOrExclamationMark: questionOrExclamationMark))
  }
  
  open override func visit(_ node: AsExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndAsTok = node.unexpectedBetweenExpressionAndAsTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asTok = self.visit(node.asTok).cast(TokenSyntax.self)
    let unexpectedBetweenAsTokAndQuestionOrExclamationMark = node.unexpectedBetweenAsTokAndQuestionOrExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionOrExclamationMark = node.questionOrExclamationMark.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenQuestionOrExclamationMarkAndTypeName = node.unexpectedBetweenQuestionOrExclamationMarkAndTypeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeName = self.visit(node.typeName).cast(TypeSyntax.self)
    return ExprSyntax(AsExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndAsTok, asTok: asTok, unexpectedBetweenAsTokAndQuestionOrExclamationMark, questionOrExclamationMark: questionOrExclamationMark, unexpectedBetweenQuestionOrExclamationMarkAndTypeName, typeName: typeName))
  }
  
  open override func visit(_ node: TypeExprSyntax) -> ExprSyntax {
    let unexpectedBeforeType = node.unexpectedBeforeType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    return ExprSyntax(TypeExprSyntax(unexpectedBeforeType, type: type))
  }
  
  open override func visit(_ node: ClosureCaptureItemSyntax) -> Syntax {
    let unexpectedBeforeSpecifier = node.unexpectedBeforeSpecifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let specifier = node.specifier.map(self.visit)?.cast(TokenListSyntax.self)
    let unexpectedBetweenSpecifierAndName = node.unexpectedBetweenSpecifierAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = node.name.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenNameAndAssignToken = node.unexpectedBetweenNameAndAssignToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let assignToken = node.assignToken.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAssignTokenAndExpression = node.unexpectedBetweenAssignTokenAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndTrailingComma = node.unexpectedBetweenExpressionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ClosureCaptureItemSyntax(unexpectedBeforeSpecifier, specifier: specifier, unexpectedBetweenSpecifierAndName, name: name, unexpectedBetweenNameAndAssignToken, assignToken: assignToken, unexpectedBetweenAssignTokenAndExpression, expression: expression, unexpectedBetweenExpressionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: ClosureCaptureItemListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ClosureCaptureItemSyntax.self)
    }
    return Syntax(ClosureCaptureItemListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ClosureCaptureSignatureSyntax) -> Syntax {
    let unexpectedBeforeLeftSquare = node.unexpectedBeforeLeftSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftSquare = self.visit(node.leftSquare).cast(TokenSyntax.self)
    let unexpectedBetweenLeftSquareAndItems = node.unexpectedBetweenLeftSquareAndItems.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let items = node.items.map(self.visit)?.cast(ClosureCaptureItemListSyntax.self)
    let unexpectedBetweenItemsAndRightSquare = node.unexpectedBetweenItemsAndRightSquare.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightSquare = self.visit(node.rightSquare).cast(TokenSyntax.self)
    return Syntax(ClosureCaptureSignatureSyntax(unexpectedBeforeLeftSquare, leftSquare: leftSquare, unexpectedBetweenLeftSquareAndItems, items: items, unexpectedBetweenItemsAndRightSquare, rightSquare: rightSquare))
  }
  
  open override func visit(_ node: ClosureParamSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndTrailingComma = node.unexpectedBetweenNameAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ClosureParamSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: ClosureParamListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ClosureParamSyntax.self)
    }
    return Syntax(ClosureParamListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ClosureSignatureSyntax) -> Syntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndCapture = node.unexpectedBetweenAttributesAndCapture.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let capture = node.capture.map(self.visit)?.cast(ClosureCaptureSignatureSyntax.self)
    let unexpectedBetweenCaptureAndInput = node.unexpectedBetweenCaptureAndInput.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let input = node.input.map(self.visit)?.cast(Syntax.self)
    let unexpectedBetweenInputAndAsyncKeyword = node.unexpectedBetweenInputAndAsyncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asyncKeyword = node.asyncKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAsyncKeywordAndThrowsTok = node.unexpectedBetweenAsyncKeywordAndThrowsTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwsTok = node.throwsTok.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenThrowsTokAndOutput = node.unexpectedBetweenThrowsTokAndOutput.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let output = node.output.map(self.visit)?.cast(ReturnClauseSyntax.self)
    let unexpectedBetweenOutputAndInTok = node.unexpectedBetweenOutputAndInTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inTok = self.visit(node.inTok).cast(TokenSyntax.self)
    return Syntax(ClosureSignatureSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndCapture, capture: capture, unexpectedBetweenCaptureAndInput, input: input, unexpectedBetweenInputAndAsyncKeyword, asyncKeyword: asyncKeyword, unexpectedBetweenAsyncKeywordAndThrowsTok, throwsTok: throwsTok, unexpectedBetweenThrowsTokAndOutput, output: output, unexpectedBetweenOutputAndInTok, inTok: inTok))
  }
  
  open override func visit(_ node: ClosureExprSyntax) -> ExprSyntax {
    let unexpectedBeforeLeftBrace = node.unexpectedBeforeLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndSignature = node.unexpectedBetweenLeftBraceAndSignature.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let signature = node.signature.map(self.visit)?.cast(ClosureSignatureSyntax.self)
    let unexpectedBetweenSignatureAndStatements = node.unexpectedBetweenSignatureAndStatements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    indentationLevel += 1
    let statements = self.visit(node.statements).cast(CodeBlockItemListSyntax.self)
    indentationLevel -= 1
    let unexpectedBetweenStatementsAndRightBrace = node.unexpectedBetweenStatementsAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    var rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    if rightBrace.leadingTrivia.first?.isNewline != true {
      rightBrace.leadingTrivia = indentedNewline + rightBrace.leadingTrivia
    }
    return ExprSyntax(ClosureExprSyntax(unexpectedBeforeLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndSignature, signature: signature, unexpectedBetweenSignatureAndStatements, statements: statements, unexpectedBetweenStatementsAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: UnresolvedPatternExprSyntax) -> ExprSyntax {
    let unexpectedBeforePattern = node.unexpectedBeforePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    return ExprSyntax(UnresolvedPatternExprSyntax(unexpectedBeforePattern, pattern: pattern))
  }
  
  open override func visit(_ node: MultipleTrailingClosureElementSyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndClosure = node.unexpectedBetweenColonAndClosure.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let closure = self.visit(node.closure).cast(ClosureExprSyntax.self)
    return Syntax(MultipleTrailingClosureElementSyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndClosure, closure: closure))
  }
  
  open override func visit(_ node: MultipleTrailingClosureElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(MultipleTrailingClosureElementSyntax.self)
    }
    return Syntax(MultipleTrailingClosureElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: FunctionCallExprSyntax) -> ExprSyntax {
    let unexpectedBeforeCalledExpression = node.unexpectedBeforeCalledExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let calledExpression = self.visit(node.calledExpression).cast(ExprSyntax.self)
    let unexpectedBetweenCalledExpressionAndLeftParen = node.unexpectedBetweenCalledExpressionAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = node.leftParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArgumentList = node.unexpectedBetweenLeftParenAndArgumentList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argumentList = self.visit(node.argumentList).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenArgumentListAndRightParen = node.unexpectedBetweenArgumentListAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = node.rightParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenRightParenAndTrailingClosure = node.unexpectedBetweenRightParenAndTrailingClosure.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingClosure = node.trailingClosure.map(self.visit)?.cast(ClosureExprSyntax.self)
    let unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures = node.unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let additionalTrailingClosures = node.additionalTrailingClosures.map(self.visit)?.cast(MultipleTrailingClosureElementListSyntax.self)
    return ExprSyntax(FunctionCallExprSyntax(unexpectedBeforeCalledExpression, calledExpression: calledExpression, unexpectedBetweenCalledExpressionAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArgumentList, argumentList: argumentList, unexpectedBetweenArgumentListAndRightParen, rightParen: rightParen, unexpectedBetweenRightParenAndTrailingClosure, trailingClosure: trailingClosure, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, additionalTrailingClosures: additionalTrailingClosures))
  }
  
  open override func visit(_ node: SubscriptExprSyntax) -> ExprSyntax {
    let unexpectedBeforeCalledExpression = node.unexpectedBeforeCalledExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let calledExpression = self.visit(node.calledExpression).cast(ExprSyntax.self)
    let unexpectedBetweenCalledExpressionAndLeftBracket = node.unexpectedBetweenCalledExpressionAndLeftBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBracket = self.visit(node.leftBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBracketAndArgumentList = node.unexpectedBetweenLeftBracketAndArgumentList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argumentList = self.visit(node.argumentList).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenArgumentListAndRightBracket = node.unexpectedBetweenArgumentListAndRightBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightBracket = self.visit(node.rightBracket).cast(TokenSyntax.self)
    let unexpectedBetweenRightBracketAndTrailingClosure = node.unexpectedBetweenRightBracketAndTrailingClosure.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingClosure = node.trailingClosure.map(self.visit)?.cast(ClosureExprSyntax.self)
    let unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures = node.unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let additionalTrailingClosures = node.additionalTrailingClosures.map(self.visit)?.cast(MultipleTrailingClosureElementListSyntax.self)
    return ExprSyntax(SubscriptExprSyntax(unexpectedBeforeCalledExpression, calledExpression: calledExpression, unexpectedBetweenCalledExpressionAndLeftBracket, leftBracket: leftBracket, unexpectedBetweenLeftBracketAndArgumentList, argumentList: argumentList, unexpectedBetweenArgumentListAndRightBracket, rightBracket: rightBracket, unexpectedBetweenRightBracketAndTrailingClosure, trailingClosure: trailingClosure, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, additionalTrailingClosures: additionalTrailingClosures))
  }
  
  open override func visit(_ node: OptionalChainingExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndQuestionMark = node.unexpectedBetweenExpressionAndQuestionMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionMark = self.visit(node.questionMark).cast(TokenSyntax.self)
    return ExprSyntax(OptionalChainingExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndQuestionMark, questionMark: questionMark))
  }
  
  open override func visit(_ node: ForcedValueExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndExclamationMark = node.unexpectedBetweenExpressionAndExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let exclamationMark = self.visit(node.exclamationMark).cast(TokenSyntax.self)
    return ExprSyntax(ForcedValueExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndExclamationMark, exclamationMark: exclamationMark))
  }
  
  open override func visit(_ node: PostfixUnaryExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndOperatorToken = node.unexpectedBetweenExpressionAndOperatorToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorToken = self.visit(node.operatorToken).cast(TokenSyntax.self)
    return ExprSyntax(PostfixUnaryExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndOperatorToken, operatorToken: operatorToken))
  }
  
  open override func visit(_ node: SpecializeExprSyntax) -> ExprSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndGenericArgumentClause = node.unexpectedBetweenExpressionAndGenericArgumentClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericArgumentClause = self.visit(node.genericArgumentClause).cast(GenericArgumentClauseSyntax.self)
    return ExprSyntax(SpecializeExprSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndGenericArgumentClause, genericArgumentClause: genericArgumentClause))
  }
  
  open override func visit(_ node: StringSegmentSyntax) -> Syntax {
    let unexpectedBeforeContent = node.unexpectedBeforeContent.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let content = self.visit(node.content).cast(TokenSyntax.self)
    return Syntax(StringSegmentSyntax(unexpectedBeforeContent, content: content))
  }
  
  open override func visit(_ node: ExpressionSegmentSyntax) -> Syntax {
    let unexpectedBeforeBackslash = node.unexpectedBeforeBackslash.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let backslash = self.visit(node.backslash).cast(TokenSyntax.self)
    let unexpectedBetweenBackslashAndDelimiter = node.unexpectedBetweenBackslashAndDelimiter.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let delimiter = node.delimiter.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenDelimiterAndLeftParen = node.unexpectedBetweenDelimiterAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndExpressions = node.unexpectedBetweenLeftParenAndExpressions.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expressions = self.visit(node.expressions).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenExpressionsAndRightParen = node.unexpectedBetweenExpressionsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(ExpressionSegmentSyntax(unexpectedBeforeBackslash, backslash: backslash, unexpectedBetweenBackslashAndDelimiter, delimiter: delimiter, unexpectedBetweenDelimiterAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndExpressions, expressions: expressions, unexpectedBetweenExpressionsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: StringLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeOpenDelimiter = node.unexpectedBeforeOpenDelimiter.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let openDelimiter = node.openDelimiter.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenOpenDelimiterAndOpenQuote = node.unexpectedBetweenOpenDelimiterAndOpenQuote.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let openQuote = self.visit(node.openQuote).cast(TokenSyntax.self)
    let unexpectedBetweenOpenQuoteAndSegments = node.unexpectedBetweenOpenQuoteAndSegments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let segments = self.visit(node.segments).cast(StringLiteralSegmentsSyntax.self)
    let unexpectedBetweenSegmentsAndCloseQuote = node.unexpectedBetweenSegmentsAndCloseQuote.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let closeQuote = self.visit(node.closeQuote).cast(TokenSyntax.self)
    let unexpectedBetweenCloseQuoteAndCloseDelimiter = node.unexpectedBetweenCloseQuoteAndCloseDelimiter.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let closeDelimiter = node.closeDelimiter.map(self.visit)?.cast(TokenSyntax.self)
    return ExprSyntax(StringLiteralExprSyntax(unexpectedBeforeOpenDelimiter, openDelimiter: openDelimiter, unexpectedBetweenOpenDelimiterAndOpenQuote, openQuote: openQuote, unexpectedBetweenOpenQuoteAndSegments, segments: segments, unexpectedBetweenSegmentsAndCloseQuote, closeQuote: closeQuote, unexpectedBetweenCloseQuoteAndCloseDelimiter, closeDelimiter: closeDelimiter))
  }
  
  open override func visit(_ node: RegexLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeRegex = node.unexpectedBeforeRegex.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let regex = self.visit(node.regex).cast(TokenSyntax.self)
    return ExprSyntax(RegexLiteralExprSyntax(unexpectedBeforeRegex, regex: regex))
  }
  
  open override func visit(_ node: KeyPathExprSyntax) -> ExprSyntax {
    let unexpectedBeforeBackslash = node.unexpectedBeforeBackslash.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let backslash = self.visit(node.backslash).cast(TokenSyntax.self)
    let unexpectedBetweenBackslashAndRoot = node.unexpectedBetweenBackslashAndRoot.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let root = node.root.map(self.visit)?.cast(TypeSyntax.self)
    let unexpectedBetweenRootAndComponents = node.unexpectedBetweenRootAndComponents.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let components = self.visit(node.components).cast(KeyPathComponentListSyntax.self)
    return ExprSyntax(KeyPathExprSyntax(unexpectedBeforeBackslash, backslash: backslash, unexpectedBetweenBackslashAndRoot, root: root, unexpectedBetweenRootAndComponents, components: components))
  }
  
  open override func visit(_ node: KeyPathComponentListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(KeyPathComponentSyntax.self)
    }
    return Syntax(KeyPathComponentListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: KeyPathComponentSyntax) -> Syntax {
    let unexpectedBeforePeriod = node.unexpectedBeforePeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = node.period.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenPeriodAndComponent = node.unexpectedBetweenPeriodAndComponent.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let component = self.visit(node.component).cast(Syntax.self)
    return Syntax(KeyPathComponentSyntax(unexpectedBeforePeriod, period: period, unexpectedBetweenPeriodAndComponent, component: component))
  }
  
  open override func visit(_ node: KeyPathPropertyComponentSyntax) -> Syntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndDeclNameArguments = node.unexpectedBetweenIdentifierAndDeclNameArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declNameArguments = node.declNameArguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    let unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause = node.unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericArgumentClause = node.genericArgumentClause.map(self.visit)?.cast(GenericArgumentClauseSyntax.self)
    return Syntax(KeyPathPropertyComponentSyntax(unexpectedBeforeIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndDeclNameArguments, declNameArguments: declNameArguments, unexpectedBetweenDeclNameArgumentsAndGenericArgumentClause, genericArgumentClause: genericArgumentClause))
  }
  
  open override func visit(_ node: KeyPathSubscriptComponentSyntax) -> Syntax {
    let unexpectedBeforeLeftBracket = node.unexpectedBeforeLeftBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBracket = self.visit(node.leftBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBracketAndArgumentList = node.unexpectedBetweenLeftBracketAndArgumentList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argumentList = self.visit(node.argumentList).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenArgumentListAndRightBracket = node.unexpectedBetweenArgumentListAndRightBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightBracket = self.visit(node.rightBracket).cast(TokenSyntax.self)
    return Syntax(KeyPathSubscriptComponentSyntax(unexpectedBeforeLeftBracket, leftBracket: leftBracket, unexpectedBetweenLeftBracketAndArgumentList, argumentList: argumentList, unexpectedBetweenArgumentListAndRightBracket, rightBracket: rightBracket))
  }
  
  open override func visit(_ node: KeyPathOptionalComponentSyntax) -> Syntax {
    let unexpectedBeforeQuestionOrExclamationMark = node.unexpectedBeforeQuestionOrExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionOrExclamationMark = self.visit(node.questionOrExclamationMark).cast(TokenSyntax.self)
    return Syntax(KeyPathOptionalComponentSyntax(unexpectedBeforeQuestionOrExclamationMark, questionOrExclamationMark: questionOrExclamationMark))
  }
  
  open override func visit(_ node: OldKeyPathExprSyntax) -> ExprSyntax {
    let unexpectedBeforeBackslash = node.unexpectedBeforeBackslash.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let backslash = self.visit(node.backslash).cast(TokenSyntax.self)
    let unexpectedBetweenBackslashAndRootExpr = node.unexpectedBetweenBackslashAndRootExpr.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rootExpr = node.rootExpr.map(self.visit)?.cast(ExprSyntax.self)
    let unexpectedBetweenRootExprAndExpression = node.unexpectedBetweenRootExprAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return ExprSyntax(OldKeyPathExprSyntax(unexpectedBeforeBackslash, backslash: backslash, unexpectedBetweenBackslashAndRootExpr, rootExpr: rootExpr, unexpectedBetweenRootExprAndExpression, expression: expression))
  }
  
  open override func visit(_ node: KeyPathBaseExprSyntax) -> ExprSyntax {
    let unexpectedBeforePeriod = node.unexpectedBeforePeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = self.visit(node.period).cast(TokenSyntax.self)
    return ExprSyntax(KeyPathBaseExprSyntax(unexpectedBeforePeriod, period: period))
  }
  
  open override func visit(_ node: ObjcNamePieceSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndDot = node.unexpectedBetweenNameAndDot.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let dot = node.dot.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ObjcNamePieceSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndDot, dot: dot))
  }
  
  open override func visit(_ node: ObjcNameSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ObjcNamePieceSyntax.self)
    }
    return Syntax(ObjcNameSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ObjcKeyPathExprSyntax) -> ExprSyntax {
    let unexpectedBeforeKeyPath = node.unexpectedBeforeKeyPath.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let keyPath = self.visit(node.keyPath).cast(TokenSyntax.self)
    let unexpectedBetweenKeyPathAndLeftParen = node.unexpectedBetweenKeyPathAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndName = node.unexpectedBetweenLeftParenAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(ObjcNameSyntax.self)
    let unexpectedBetweenNameAndRightParen = node.unexpectedBetweenNameAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return ExprSyntax(ObjcKeyPathExprSyntax(unexpectedBeforeKeyPath, keyPath: keyPath, unexpectedBetweenKeyPathAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndName, name: name, unexpectedBetweenNameAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: ObjcSelectorExprSyntax) -> ExprSyntax {
    let unexpectedBeforePoundSelector = node.unexpectedBeforePoundSelector.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundSelector = self.visit(node.poundSelector).cast(TokenSyntax.self)
    let unexpectedBetweenPoundSelectorAndLeftParen = node.unexpectedBetweenPoundSelectorAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndKind = node.unexpectedBetweenLeftParenAndKind.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let kind = node.kind.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenKindAndColon = node.unexpectedBetweenKindAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndName = node.unexpectedBetweenColonAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(ExprSyntax.self)
    let unexpectedBetweenNameAndRightParen = node.unexpectedBetweenNameAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return ExprSyntax(ObjcSelectorExprSyntax(unexpectedBeforePoundSelector, poundSelector: poundSelector, unexpectedBetweenPoundSelectorAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndKind, kind: kind, unexpectedBetweenKindAndColon, colon: colon, unexpectedBetweenColonAndName, name: name, unexpectedBetweenNameAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: PostfixIfConfigExprSyntax) -> ExprSyntax {
    let unexpectedBeforeBase = node.unexpectedBeforeBase.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let base = node.base.map(self.visit)?.cast(ExprSyntax.self)
    let unexpectedBetweenBaseAndConfig = node.unexpectedBetweenBaseAndConfig.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let config = self.visit(node.config).cast(IfConfigDeclSyntax.self)
    return ExprSyntax(PostfixIfConfigExprSyntax(unexpectedBeforeBase, base: base, unexpectedBetweenBaseAndConfig, config: config))
  }
  
  open override func visit(_ node: EditorPlaceholderExprSyntax) -> ExprSyntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    return ExprSyntax(EditorPlaceholderExprSyntax(unexpectedBeforeIdentifier, identifier: identifier))
  }
  
  open override func visit(_ node: ObjectLiteralExprSyntax) -> ExprSyntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndLeftParen = node.unexpectedBetweenIdentifierAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArguments = node.unexpectedBetweenLeftParenAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = self.visit(node.arguments).cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenArgumentsAndRightParen = node.unexpectedBetweenArgumentsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return ExprSyntax(ObjectLiteralExprSyntax(unexpectedBeforeIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArguments, arguments: arguments, unexpectedBetweenArgumentsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: YieldExprListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(YieldExprListElementSyntax.self)
    }
    return Syntax(YieldExprListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: YieldExprListElementSyntax) -> Syntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndComma = node.unexpectedBetweenExpressionAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = node.comma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(YieldExprListElementSyntax(unexpectedBeforeExpression, expression: expression, unexpectedBetweenExpressionAndComma, comma: comma))
  }
  
  open override func visit(_ node: TypeInitializerClauseSyntax) -> Syntax {
    let unexpectedBeforeEqual = node.unexpectedBeforeEqual.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let equal = self.visit(node.equal).cast(TokenSyntax.self)
    let unexpectedBetweenEqualAndValue = node.unexpectedBetweenEqualAndValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let value = self.visit(node.value).cast(TypeSyntax.self)
    return Syntax(TypeInitializerClauseSyntax(unexpectedBeforeEqual, equal: equal, unexpectedBetweenEqualAndValue, value: value))
  }
  
  open override func visit(_ node: TypealiasDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndTypealiasKeyword = node.unexpectedBetweenModifiersAndTypealiasKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typealiasKeyword = self.visit(node.typealiasKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenTypealiasKeywordAndIdentifier = node.unexpectedBetweenTypealiasKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameterClause = node.unexpectedBetweenIdentifierAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndInitializer = node.unexpectedBetweenGenericParameterClauseAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = self.visit(node.initializer).cast(TypeInitializerClauseSyntax.self)
    let unexpectedBetweenInitializerAndGenericWhereClause = node.unexpectedBetweenInitializerAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    return DeclSyntax(TypealiasDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndTypealiasKeyword, typealiasKeyword: typealiasKeyword, unexpectedBetweenTypealiasKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndInitializer, initializer: initializer, unexpectedBetweenInitializerAndGenericWhereClause, genericWhereClause: genericWhereClause))
  }
  
  open override func visit(_ node: AssociatedtypeDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndAssociatedtypeKeyword = node.unexpectedBetweenModifiersAndAssociatedtypeKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let associatedtypeKeyword = self.visit(node.associatedtypeKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenAssociatedtypeKeywordAndIdentifier = node.unexpectedBetweenAssociatedtypeKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndInheritanceClause = node.unexpectedBetweenIdentifierAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndInitializer = node.unexpectedBetweenInheritanceClauseAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = node.initializer.map(self.visit)?.cast(TypeInitializerClauseSyntax.self)
    let unexpectedBetweenInitializerAndGenericWhereClause = node.unexpectedBetweenInitializerAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    return DeclSyntax(AssociatedtypeDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndAssociatedtypeKeyword, associatedtypeKeyword: associatedtypeKeyword, unexpectedBetweenAssociatedtypeKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndInitializer, initializer: initializer, unexpectedBetweenInitializerAndGenericWhereClause, genericWhereClause: genericWhereClause))
  }
  
  open override func visit(_ node: FunctionParameterListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(FunctionParameterSyntax.self)
    }
    return Syntax(FunctionParameterListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ParameterClauseSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndParameterList = node.unexpectedBetweenLeftParenAndParameterList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let parameterList = self.visit(node.parameterList).cast(FunctionParameterListSyntax.self)
    let unexpectedBetweenParameterListAndRightParen = node.unexpectedBetweenParameterListAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(ParameterClauseSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndParameterList, parameterList: parameterList, unexpectedBetweenParameterListAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: ReturnClauseSyntax) -> Syntax {
    let unexpectedBeforeArrow = node.unexpectedBeforeArrow.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arrow = self.visit(node.arrow).cast(TokenSyntax.self)
    let unexpectedBetweenArrowAndReturnType = node.unexpectedBetweenArrowAndReturnType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let returnType = self.visit(node.returnType).cast(TypeSyntax.self)
    return Syntax(ReturnClauseSyntax(unexpectedBeforeArrow, arrow: arrow, unexpectedBetweenArrowAndReturnType, returnType: returnType))
  }
  
  open override func visit(_ node: FunctionSignatureSyntax) -> Syntax {
    let unexpectedBeforeInput = node.unexpectedBeforeInput.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let input = self.visit(node.input).cast(ParameterClauseSyntax.self)
    let unexpectedBetweenInputAndAsyncOrReasyncKeyword = node.unexpectedBetweenInputAndAsyncOrReasyncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asyncOrReasyncKeyword = node.asyncOrReasyncKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword = node.unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwsOrRethrowsKeyword = node.throwsOrRethrowsKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenThrowsOrRethrowsKeywordAndOutput = node.unexpectedBetweenThrowsOrRethrowsKeywordAndOutput.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let output = node.output.map(self.visit)?.cast(ReturnClauseSyntax.self)
    return Syntax(FunctionSignatureSyntax(unexpectedBeforeInput, input: input, unexpectedBetweenInputAndAsyncOrReasyncKeyword, asyncOrReasyncKeyword: asyncOrReasyncKeyword, unexpectedBetweenAsyncOrReasyncKeywordAndThrowsOrRethrowsKeyword, throwsOrRethrowsKeyword: throwsOrRethrowsKeyword, unexpectedBetweenThrowsOrRethrowsKeywordAndOutput, output: output))
  }
  
  open override func visit(_ node: IfConfigClauseSyntax) -> Syntax {
    let unexpectedBeforePoundKeyword = node.unexpectedBeforePoundKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundKeyword = self.visit(node.poundKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenPoundKeywordAndCondition = node.unexpectedBetweenPoundKeywordAndCondition.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let condition = node.condition.map(self.visit)?.cast(ExprSyntax.self)
    let unexpectedBetweenConditionAndElements = node.unexpectedBetweenConditionAndElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(Syntax.self)
    return Syntax(IfConfigClauseSyntax(unexpectedBeforePoundKeyword, poundKeyword: poundKeyword, unexpectedBetweenPoundKeywordAndCondition, condition: condition, unexpectedBetweenConditionAndElements, elements: elements))
  }
  
  open override func visit(_ node: IfConfigClauseListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(IfConfigClauseSyntax.self)
    }
    return Syntax(IfConfigClauseListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: IfConfigDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeClauses = node.unexpectedBeforeClauses.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let clauses = self.visit(node.clauses).cast(IfConfigClauseListSyntax.self)
    let unexpectedBetweenClausesAndPoundEndif = node.unexpectedBetweenClausesAndPoundEndif.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundEndif = self.visit(node.poundEndif).cast(TokenSyntax.self)
    return DeclSyntax(IfConfigDeclSyntax(unexpectedBeforeClauses, clauses: clauses, unexpectedBetweenClausesAndPoundEndif, poundEndif: poundEndif))
  }
  
  open override func visit(_ node: PoundErrorDeclSyntax) -> DeclSyntax {
    let unexpectedBeforePoundError = node.unexpectedBeforePoundError.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundError = self.visit(node.poundError).cast(TokenSyntax.self)
    let unexpectedBetweenPoundErrorAndLeftParen = node.unexpectedBetweenPoundErrorAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndMessage = node.unexpectedBetweenLeftParenAndMessage.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let message = self.visit(node.message).cast(StringLiteralExprSyntax.self)
    let unexpectedBetweenMessageAndRightParen = node.unexpectedBetweenMessageAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return DeclSyntax(PoundErrorDeclSyntax(unexpectedBeforePoundError, poundError: poundError, unexpectedBetweenPoundErrorAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndMessage, message: message, unexpectedBetweenMessageAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: PoundWarningDeclSyntax) -> DeclSyntax {
    let unexpectedBeforePoundWarning = node.unexpectedBeforePoundWarning.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundWarning = self.visit(node.poundWarning).cast(TokenSyntax.self)
    let unexpectedBetweenPoundWarningAndLeftParen = node.unexpectedBetweenPoundWarningAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndMessage = node.unexpectedBetweenLeftParenAndMessage.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let message = self.visit(node.message).cast(StringLiteralExprSyntax.self)
    let unexpectedBetweenMessageAndRightParen = node.unexpectedBetweenMessageAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return DeclSyntax(PoundWarningDeclSyntax(unexpectedBeforePoundWarning, poundWarning: poundWarning, unexpectedBetweenPoundWarningAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndMessage, message: message, unexpectedBetweenMessageAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: PoundSourceLocationSyntax) -> DeclSyntax {
    let unexpectedBeforePoundSourceLocation = node.unexpectedBeforePoundSourceLocation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundSourceLocation = self.visit(node.poundSourceLocation).cast(TokenSyntax.self)
    let unexpectedBetweenPoundSourceLocationAndLeftParen = node.unexpectedBetweenPoundSourceLocationAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArgs = node.unexpectedBetweenLeftParenAndArgs.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let args = node.args.map(self.visit)?.cast(PoundSourceLocationArgsSyntax.self)
    let unexpectedBetweenArgsAndRightParen = node.unexpectedBetweenArgsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return DeclSyntax(PoundSourceLocationSyntax(unexpectedBeforePoundSourceLocation, poundSourceLocation: poundSourceLocation, unexpectedBetweenPoundSourceLocationAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArgs, args: args, unexpectedBetweenArgsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: PoundSourceLocationArgsSyntax) -> Syntax {
    let unexpectedBeforeFileArgLabel = node.unexpectedBeforeFileArgLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let fileArgLabel = self.visit(node.fileArgLabel).cast(TokenSyntax.self)
    let unexpectedBetweenFileArgLabelAndFileArgColon = node.unexpectedBetweenFileArgLabelAndFileArgColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let fileArgColon = self.visit(node.fileArgColon).cast(TokenSyntax.self)
    let unexpectedBetweenFileArgColonAndFileName = node.unexpectedBetweenFileArgColonAndFileName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let fileName = self.visit(node.fileName).cast(TokenSyntax.self)
    let unexpectedBetweenFileNameAndComma = node.unexpectedBetweenFileNameAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = self.visit(node.comma).cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndLineArgLabel = node.unexpectedBetweenCommaAndLineArgLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let lineArgLabel = self.visit(node.lineArgLabel).cast(TokenSyntax.self)
    let unexpectedBetweenLineArgLabelAndLineArgColon = node.unexpectedBetweenLineArgLabelAndLineArgColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let lineArgColon = self.visit(node.lineArgColon).cast(TokenSyntax.self)
    let unexpectedBetweenLineArgColonAndLineNumber = node.unexpectedBetweenLineArgColonAndLineNumber.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let lineNumber = self.visit(node.lineNumber).cast(TokenSyntax.self)
    return Syntax(PoundSourceLocationArgsSyntax(unexpectedBeforeFileArgLabel, fileArgLabel: fileArgLabel, unexpectedBetweenFileArgLabelAndFileArgColon, fileArgColon: fileArgColon, unexpectedBetweenFileArgColonAndFileName, fileName: fileName, unexpectedBetweenFileNameAndComma, comma: comma, unexpectedBetweenCommaAndLineArgLabel, lineArgLabel: lineArgLabel, unexpectedBetweenLineArgLabelAndLineArgColon, lineArgColon: lineArgColon, unexpectedBetweenLineArgColonAndLineNumber, lineNumber: lineNumber))
  }
  
  open override func visit(_ node: DeclModifierDetailSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndDetail = node.unexpectedBetweenLeftParenAndDetail.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let detail = self.visit(node.detail).cast(TokenSyntax.self)
    let unexpectedBetweenDetailAndRightParen = node.unexpectedBetweenDetailAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(DeclModifierDetailSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndDetail, detail: detail, unexpectedBetweenDetailAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: DeclModifierSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndDetail = node.unexpectedBetweenNameAndDetail.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let detail = node.detail.map(self.visit)?.cast(DeclModifierDetailSyntax.self)
    return Syntax(DeclModifierSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndDetail, detail: detail))
  }
  
  open override func visit(_ node: InheritedTypeSyntax) -> Syntax {
    let unexpectedBeforeTypeName = node.unexpectedBeforeTypeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeName = self.visit(node.typeName).cast(TypeSyntax.self)
    let unexpectedBetweenTypeNameAndTrailingComma = node.unexpectedBetweenTypeNameAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(InheritedTypeSyntax(unexpectedBeforeTypeName, typeName: typeName, unexpectedBetweenTypeNameAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: InheritedTypeListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(InheritedTypeSyntax.self)
    }
    return Syntax(InheritedTypeListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: TypeInheritanceClauseSyntax) -> Syntax {
    let unexpectedBeforeColon = node.unexpectedBeforeColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndInheritedTypeCollection = node.unexpectedBetweenColonAndInheritedTypeCollection.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritedTypeCollection = self.visit(node.inheritedTypeCollection).cast(InheritedTypeListSyntax.self)
    return Syntax(TypeInheritanceClauseSyntax(unexpectedBeforeColon, colon: colon, unexpectedBetweenColonAndInheritedTypeCollection, inheritedTypeCollection: inheritedTypeCollection))
  }
  
  open override func visit(_ node: ClassDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndClassKeyword = node.unexpectedBetweenModifiersAndClassKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let classKeyword = self.visit(node.classKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenClassKeywordAndIdentifier = node.unexpectedBetweenClassKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameterClause = node.unexpectedBetweenIdentifierAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndInheritanceClause = node.unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(ClassDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndClassKeyword, classKeyword: classKeyword, unexpectedBetweenClassKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: ActorDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndActorKeyword = node.unexpectedBetweenModifiersAndActorKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let actorKeyword = self.visit(node.actorKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenActorKeywordAndIdentifier = node.unexpectedBetweenActorKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameterClause = node.unexpectedBetweenIdentifierAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndInheritanceClause = node.unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(ActorDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndActorKeyword, actorKeyword: actorKeyword, unexpectedBetweenActorKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: StructDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndStructKeyword = node.unexpectedBetweenModifiersAndStructKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let structKeyword = self.visit(node.structKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenStructKeywordAndIdentifier = node.unexpectedBetweenStructKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameterClause = node.unexpectedBetweenIdentifierAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndInheritanceClause = node.unexpectedBetweenGenericParameterClauseAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(StructDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndStructKeyword, structKeyword: structKeyword, unexpectedBetweenStructKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: ProtocolDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndProtocolKeyword = node.unexpectedBetweenModifiersAndProtocolKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let protocolKeyword = self.visit(node.protocolKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenProtocolKeywordAndIdentifier = node.unexpectedBetweenProtocolKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause = node.unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let primaryAssociatedTypeClause = node.primaryAssociatedTypeClause.map(self.visit)?.cast(PrimaryAssociatedTypeClauseSyntax.self)
    let unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause = node.unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(ProtocolDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndProtocolKeyword, protocolKeyword: protocolKeyword, unexpectedBetweenProtocolKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause, primaryAssociatedTypeClause: primaryAssociatedTypeClause, unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: ExtensionDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndExtensionKeyword = node.unexpectedBetweenModifiersAndExtensionKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let extensionKeyword = self.visit(node.extensionKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenExtensionKeywordAndExtendedType = node.unexpectedBetweenExtensionKeywordAndExtendedType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let extendedType = self.visit(node.extendedType).cast(TypeSyntax.self)
    let unexpectedBetweenExtendedTypeAndInheritanceClause = node.unexpectedBetweenExtendedTypeAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(ExtensionDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndExtensionKeyword, extensionKeyword: extensionKeyword, unexpectedBetweenExtensionKeywordAndExtendedType, extendedType: extendedType, unexpectedBetweenExtendedTypeAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: MemberDeclBlockSyntax) -> Syntax {
    let unexpectedBeforeLeftBrace = node.unexpectedBeforeLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndMembers = node.unexpectedBetweenLeftBraceAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    indentationLevel += 1
    let members = self.visit(node.members).cast(MemberDeclListSyntax.self)
    indentationLevel -= 1
    let unexpectedBetweenMembersAndRightBrace = node.unexpectedBetweenMembersAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    var rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    if rightBrace.leadingTrivia.first?.isNewline != true {
      rightBrace.leadingTrivia = indentedNewline + rightBrace.leadingTrivia
    }
    return Syntax(MemberDeclBlockSyntax(unexpectedBeforeLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndMembers, members: members, unexpectedBetweenMembersAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: MemberDeclListSyntax) -> Syntax {
    var formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(MemberDeclListItemSyntax.self)
    }
    formattedChildren = formattedChildren.map {
      if $0.leadingTrivia?.first?.isNewline == true {
        return $0
      } else {
        return $0.withLeadingTrivia(indentedNewline + ($0.leadingTrivia ?? []))
      }
    }
    return Syntax(MemberDeclListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: MemberDeclListItemSyntax) -> Syntax {
    let unexpectedBeforeDecl = node.unexpectedBeforeDecl.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let decl = self.visit(node.decl).cast(DeclSyntax.self)
    let unexpectedBetweenDeclAndSemicolon = node.unexpectedBetweenDeclAndSemicolon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let semicolon = node.semicolon.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(MemberDeclListItemSyntax(unexpectedBeforeDecl, decl: decl, unexpectedBetweenDeclAndSemicolon, semicolon: semicolon))
  }
  
  open override func visit(_ node: SourceFileSyntax) -> Syntax {
    let unexpectedBeforeStatements = node.unexpectedBeforeStatements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let statements = self.visit(node.statements).cast(CodeBlockItemListSyntax.self)
    let unexpectedBetweenStatementsAndEOFToken = node.unexpectedBetweenStatementsAndEOFToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let eofToken = self.visit(node.eofToken).cast(TokenSyntax.self)
    return Syntax(SourceFileSyntax(unexpectedBeforeStatements, statements: statements, unexpectedBetweenStatementsAndEOFToken, eofToken: eofToken))
  }
  
  open override func visit(_ node: InitializerClauseSyntax) -> Syntax {
    let unexpectedBeforeEqual = node.unexpectedBeforeEqual.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let equal = self.visit(node.equal).cast(TokenSyntax.self)
    let unexpectedBetweenEqualAndValue = node.unexpectedBetweenEqualAndValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let value = self.visit(node.value).cast(ExprSyntax.self)
    return Syntax(InitializerClauseSyntax(unexpectedBeforeEqual, equal: equal, unexpectedBetweenEqualAndValue, value: value))
  }
  
  open override func visit(_ node: FunctionParameterSyntax) -> Syntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndFirstName = node.unexpectedBetweenModifiersAndFirstName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let firstName = node.firstName.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenFirstNameAndSecondName = node.unexpectedBetweenFirstNameAndSecondName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let secondName = node.secondName.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenSecondNameAndColon = node.unexpectedBetweenSecondNameAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndType = node.unexpectedBetweenColonAndType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = node.type.map(self.visit)?.cast(TypeSyntax.self)
    let unexpectedBetweenTypeAndEllipsis = node.unexpectedBetweenTypeAndEllipsis.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ellipsis = node.ellipsis.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenEllipsisAndDefaultArgument = node.unexpectedBetweenEllipsisAndDefaultArgument.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let defaultArgument = node.defaultArgument.map(self.visit)?.cast(InitializerClauseSyntax.self)
    let unexpectedBetweenDefaultArgumentAndTrailingComma = node.unexpectedBetweenDefaultArgumentAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(FunctionParameterSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndFirstName, firstName: firstName, unexpectedBetweenFirstNameAndSecondName, secondName: secondName, unexpectedBetweenSecondNameAndColon, colon: colon, unexpectedBetweenColonAndType, type: type, unexpectedBetweenTypeAndEllipsis, ellipsis: ellipsis, unexpectedBetweenEllipsisAndDefaultArgument, defaultArgument: defaultArgument, unexpectedBetweenDefaultArgumentAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: ModifierListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(DeclModifierSyntax.self)
    }
    return Syntax(ModifierListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: FunctionDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndFuncKeyword = node.unexpectedBetweenModifiersAndFuncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let funcKeyword = self.visit(node.funcKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenFuncKeywordAndIdentifier = node.unexpectedBetweenFuncKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameterClause = node.unexpectedBetweenIdentifierAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndSignature = node.unexpectedBetweenGenericParameterClauseAndSignature.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let signature = self.visit(node.signature).cast(FunctionSignatureSyntax.self)
    let unexpectedBetweenSignatureAndGenericWhereClause = node.unexpectedBetweenSignatureAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndBody = node.unexpectedBetweenGenericWhereClauseAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = node.body.map(self.visit)?.cast(CodeBlockSyntax.self)
    return DeclSyntax(FunctionDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndFuncKeyword, funcKeyword: funcKeyword, unexpectedBetweenFuncKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndSignature, signature: signature, unexpectedBetweenSignatureAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndBody, body: body))
  }
  
  open override func visit(_ node: InitializerDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndInitKeyword = node.unexpectedBetweenModifiersAndInitKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initKeyword = self.visit(node.initKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenInitKeywordAndOptionalMark = node.unexpectedBetweenInitKeywordAndOptionalMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let optionalMark = node.optionalMark.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenOptionalMarkAndGenericParameterClause = node.unexpectedBetweenOptionalMarkAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndSignature = node.unexpectedBetweenGenericParameterClauseAndSignature.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let signature = self.visit(node.signature).cast(FunctionSignatureSyntax.self)
    let unexpectedBetweenSignatureAndGenericWhereClause = node.unexpectedBetweenSignatureAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndBody = node.unexpectedBetweenGenericWhereClauseAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = node.body.map(self.visit)?.cast(CodeBlockSyntax.self)
    return DeclSyntax(InitializerDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndInitKeyword, initKeyword: initKeyword, unexpectedBetweenInitKeywordAndOptionalMark, optionalMark: optionalMark, unexpectedBetweenOptionalMarkAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndSignature, signature: signature, unexpectedBetweenSignatureAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndBody, body: body))
  }
  
  open override func visit(_ node: DeinitializerDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndDeinitKeyword = node.unexpectedBetweenModifiersAndDeinitKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let deinitKeyword = self.visit(node.deinitKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenDeinitKeywordAndBody = node.unexpectedBetweenDeinitKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = node.body.map(self.visit)?.cast(CodeBlockSyntax.self)
    return DeclSyntax(DeinitializerDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndDeinitKeyword, deinitKeyword: deinitKeyword, unexpectedBetweenDeinitKeywordAndBody, body: body))
  }
  
  open override func visit(_ node: SubscriptDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndSubscriptKeyword = node.unexpectedBetweenModifiersAndSubscriptKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let subscriptKeyword = self.visit(node.subscriptKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenSubscriptKeywordAndGenericParameterClause = node.unexpectedBetweenSubscriptKeywordAndGenericParameterClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterClause = node.genericParameterClause.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParameterClauseAndIndices = node.unexpectedBetweenGenericParameterClauseAndIndices.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let indices = self.visit(node.indices).cast(ParameterClauseSyntax.self)
    let unexpectedBetweenIndicesAndResult = node.unexpectedBetweenIndicesAndResult.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let result = self.visit(node.result).cast(ReturnClauseSyntax.self)
    let unexpectedBetweenResultAndGenericWhereClause = node.unexpectedBetweenResultAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndAccessor = node.unexpectedBetweenGenericWhereClauseAndAccessor.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let accessor = node.accessor.map(self.visit)?.cast(Syntax.self)
    return DeclSyntax(SubscriptDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndSubscriptKeyword, subscriptKeyword: subscriptKeyword, unexpectedBetweenSubscriptKeywordAndGenericParameterClause, genericParameterClause: genericParameterClause, unexpectedBetweenGenericParameterClauseAndIndices, indices: indices, unexpectedBetweenIndicesAndResult, result: result, unexpectedBetweenResultAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndAccessor, accessor: accessor))
  }
  
  open override func visit(_ node: AccessLevelModifierSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndModifier = node.unexpectedBetweenNameAndModifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifier = node.modifier.map(self.visit)?.cast(DeclModifierDetailSyntax.self)
    return Syntax(AccessLevelModifierSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndModifier, modifier: modifier))
  }
  
  open override func visit(_ node: AccessPathComponentSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndTrailingDot = node.unexpectedBetweenNameAndTrailingDot.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingDot = node.trailingDot.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(AccessPathComponentSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndTrailingDot, trailingDot: trailingDot))
  }
  
  open override func visit(_ node: AccessPathSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(AccessPathComponentSyntax.self)
    }
    return Syntax(AccessPathSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ImportDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndImportTok = node.unexpectedBetweenModifiersAndImportTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let importTok = self.visit(node.importTok).cast(TokenSyntax.self)
    let unexpectedBetweenImportTokAndImportKind = node.unexpectedBetweenImportTokAndImportKind.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let importKind = node.importKind.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenImportKindAndPath = node.unexpectedBetweenImportKindAndPath.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let path = self.visit(node.path).cast(AccessPathSyntax.self)
    return DeclSyntax(ImportDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndImportTok, importTok: importTok, unexpectedBetweenImportTokAndImportKind, importKind: importKind, unexpectedBetweenImportKindAndPath, path: path))
  }
  
  open override func visit(_ node: AccessorParameterSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndName = node.unexpectedBetweenLeftParenAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndRightParen = node.unexpectedBetweenNameAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(AccessorParameterSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndName, name: name, unexpectedBetweenNameAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: AccessorDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifier = node.unexpectedBetweenAttributesAndModifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifier = node.modifier.map(self.visit)?.cast(DeclModifierSyntax.self)
    let unexpectedBetweenModifierAndAccessorKind = node.unexpectedBetweenModifierAndAccessorKind.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let accessorKind = self.visit(node.accessorKind).cast(TokenSyntax.self)
    let unexpectedBetweenAccessorKindAndParameter = node.unexpectedBetweenAccessorKindAndParameter.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let parameter = node.parameter.map(self.visit)?.cast(AccessorParameterSyntax.self)
    let unexpectedBetweenParameterAndAsyncKeyword = node.unexpectedBetweenParameterAndAsyncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asyncKeyword = node.asyncKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAsyncKeywordAndThrowsKeyword = node.unexpectedBetweenAsyncKeywordAndThrowsKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwsKeyword = node.throwsKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenThrowsKeywordAndBody = node.unexpectedBetweenThrowsKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = node.body.map(self.visit)?.cast(CodeBlockSyntax.self)
    return DeclSyntax(AccessorDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifier, modifier: modifier, unexpectedBetweenModifierAndAccessorKind, accessorKind: accessorKind, unexpectedBetweenAccessorKindAndParameter, parameter: parameter, unexpectedBetweenParameterAndAsyncKeyword, asyncKeyword: asyncKeyword, unexpectedBetweenAsyncKeywordAndThrowsKeyword, throwsKeyword: throwsKeyword, unexpectedBetweenThrowsKeywordAndBody, body: body))
  }
  
  open override func visit(_ node: AccessorListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(AccessorDeclSyntax.self)
    }
    return Syntax(AccessorListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: AccessorBlockSyntax) -> Syntax {
    let unexpectedBeforeLeftBrace = node.unexpectedBeforeLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndAccessors = node.unexpectedBetweenLeftBraceAndAccessors.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let accessors = self.visit(node.accessors).cast(AccessorListSyntax.self)
    let unexpectedBetweenAccessorsAndRightBrace = node.unexpectedBetweenAccessorsAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    return Syntax(AccessorBlockSyntax(unexpectedBeforeLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndAccessors, accessors: accessors, unexpectedBetweenAccessorsAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: PatternBindingSyntax) -> Syntax {
    let unexpectedBeforePattern = node.unexpectedBeforePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndTypeAnnotation = node.unexpectedBetweenPatternAndTypeAnnotation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeAnnotation = node.typeAnnotation.map(self.visit)?.cast(TypeAnnotationSyntax.self)
    let unexpectedBetweenTypeAnnotationAndInitializer = node.unexpectedBetweenTypeAnnotationAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = node.initializer.map(self.visit)?.cast(InitializerClauseSyntax.self)
    let unexpectedBetweenInitializerAndAccessor = node.unexpectedBetweenInitializerAndAccessor.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let accessor = node.accessor.map(self.visit)?.cast(Syntax.self)
    let unexpectedBetweenAccessorAndTrailingComma = node.unexpectedBetweenAccessorAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(PatternBindingSyntax(unexpectedBeforePattern, pattern: pattern, unexpectedBetweenPatternAndTypeAnnotation, typeAnnotation: typeAnnotation, unexpectedBetweenTypeAnnotationAndInitializer, initializer: initializer, unexpectedBetweenInitializerAndAccessor, accessor: accessor, unexpectedBetweenAccessorAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: PatternBindingListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(PatternBindingSyntax.self)
    }
    return Syntax(PatternBindingListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: VariableDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndLetOrVarKeyword = node.unexpectedBetweenModifiersAndLetOrVarKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let letOrVarKeyword = self.visit(node.letOrVarKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenLetOrVarKeywordAndBindings = node.unexpectedBetweenLetOrVarKeywordAndBindings.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let bindings = self.visit(node.bindings).cast(PatternBindingListSyntax.self)
    return DeclSyntax(VariableDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndLetOrVarKeyword, letOrVarKeyword: letOrVarKeyword, unexpectedBetweenLetOrVarKeywordAndBindings, bindings: bindings))
  }
  
  open override func visit(_ node: EnumCaseElementSyntax) -> Syntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndAssociatedValue = node.unexpectedBetweenIdentifierAndAssociatedValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let associatedValue = node.associatedValue.map(self.visit)?.cast(ParameterClauseSyntax.self)
    let unexpectedBetweenAssociatedValueAndRawValue = node.unexpectedBetweenAssociatedValueAndRawValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rawValue = node.rawValue.map(self.visit)?.cast(InitializerClauseSyntax.self)
    let unexpectedBetweenRawValueAndTrailingComma = node.unexpectedBetweenRawValueAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(EnumCaseElementSyntax(unexpectedBeforeIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndAssociatedValue, associatedValue: associatedValue, unexpectedBetweenAssociatedValueAndRawValue, rawValue: rawValue, unexpectedBetweenRawValueAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: EnumCaseElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(EnumCaseElementSyntax.self)
    }
    return Syntax(EnumCaseElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: EnumCaseDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndCaseKeyword = node.unexpectedBetweenModifiersAndCaseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseKeyword = self.visit(node.caseKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenCaseKeywordAndElements = node.unexpectedBetweenCaseKeywordAndElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(EnumCaseElementListSyntax.self)
    return DeclSyntax(EnumCaseDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndCaseKeyword, caseKeyword: caseKeyword, unexpectedBetweenCaseKeywordAndElements, elements: elements))
  }
  
  open override func visit(_ node: EnumDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndEnumKeyword = node.unexpectedBetweenModifiersAndEnumKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let enumKeyword = self.visit(node.enumKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenEnumKeywordAndIdentifier = node.unexpectedBetweenEnumKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndGenericParameters = node.unexpectedBetweenIdentifierAndGenericParameters.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameters = node.genericParameters.map(self.visit)?.cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParametersAndInheritanceClause = node.unexpectedBetweenGenericParametersAndInheritanceClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritanceClause = node.inheritanceClause.map(self.visit)?.cast(TypeInheritanceClauseSyntax.self)
    let unexpectedBetweenInheritanceClauseAndGenericWhereClause = node.unexpectedBetweenInheritanceClauseAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndMembers = node.unexpectedBetweenGenericWhereClauseAndMembers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let members = self.visit(node.members).cast(MemberDeclBlockSyntax.self)
    return DeclSyntax(EnumDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndEnumKeyword, enumKeyword: enumKeyword, unexpectedBetweenEnumKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndGenericParameters, genericParameters: genericParameters, unexpectedBetweenGenericParametersAndInheritanceClause, inheritanceClause: inheritanceClause, unexpectedBetweenInheritanceClauseAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndMembers, members: members))
  }
  
  open override func visit(_ node: OperatorDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndOperatorKeyword = node.unexpectedBetweenModifiersAndOperatorKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorKeyword = self.visit(node.operatorKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenOperatorKeywordAndIdentifier = node.unexpectedBetweenOperatorKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes = node.unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let operatorPrecedenceAndTypes = node.operatorPrecedenceAndTypes.map(self.visit)?.cast(OperatorPrecedenceAndTypesSyntax.self)
    return DeclSyntax(OperatorDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndOperatorKeyword, operatorKeyword: operatorKeyword, unexpectedBetweenOperatorKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes, operatorPrecedenceAndTypes: operatorPrecedenceAndTypes))
  }
  
  open override func visit(_ node: DesignatedTypeListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(DesignatedTypeElementSyntax.self)
    }
    return Syntax(DesignatedTypeListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DesignatedTypeElementSyntax) -> Syntax {
    let unexpectedBeforeLeadingComma = node.unexpectedBeforeLeadingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leadingComma = self.visit(node.leadingComma).cast(TokenSyntax.self)
    let unexpectedBetweenLeadingCommaAndName = node.unexpectedBetweenLeadingCommaAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    return Syntax(DesignatedTypeElementSyntax(unexpectedBeforeLeadingComma, leadingComma: leadingComma, unexpectedBetweenLeadingCommaAndName, name: name))
  }
  
  open override func visit(_ node: OperatorPrecedenceAndTypesSyntax) -> Syntax {
    let unexpectedBeforeColon = node.unexpectedBeforeColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndPrecedenceGroup = node.unexpectedBetweenColonAndPrecedenceGroup.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let precedenceGroup = self.visit(node.precedenceGroup).cast(TokenSyntax.self)
    let unexpectedBetweenPrecedenceGroupAndDesignatedTypes = node.unexpectedBetweenPrecedenceGroupAndDesignatedTypes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let designatedTypes = self.visit(node.designatedTypes).cast(DesignatedTypeListSyntax.self)
    return Syntax(OperatorPrecedenceAndTypesSyntax(unexpectedBeforeColon, colon: colon, unexpectedBetweenColonAndPrecedenceGroup, precedenceGroup: precedenceGroup, unexpectedBetweenPrecedenceGroupAndDesignatedTypes, designatedTypes: designatedTypes))
  }
  
  open override func visit(_ node: PrecedenceGroupDeclSyntax) -> DeclSyntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndModifiers = node.unexpectedBetweenAttributesAndModifiers.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let modifiers = node.modifiers.map(self.visit)?.cast(ModifierListSyntax.self)
    let unexpectedBetweenModifiersAndPrecedencegroupKeyword = node.unexpectedBetweenModifiersAndPrecedencegroupKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let precedencegroupKeyword = self.visit(node.precedencegroupKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenPrecedencegroupKeywordAndIdentifier = node.unexpectedBetweenPrecedencegroupKeywordAndIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    let unexpectedBetweenIdentifierAndLeftBrace = node.unexpectedBetweenIdentifierAndLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndGroupAttributes = node.unexpectedBetweenLeftBraceAndGroupAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let groupAttributes = self.visit(node.groupAttributes).cast(PrecedenceGroupAttributeListSyntax.self)
    let unexpectedBetweenGroupAttributesAndRightBrace = node.unexpectedBetweenGroupAttributesAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    return DeclSyntax(PrecedenceGroupDeclSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndModifiers, modifiers: modifiers, unexpectedBetweenModifiersAndPrecedencegroupKeyword, precedencegroupKeyword: precedencegroupKeyword, unexpectedBetweenPrecedencegroupKeywordAndIdentifier, identifier: identifier, unexpectedBetweenIdentifierAndLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndGroupAttributes, groupAttributes: groupAttributes, unexpectedBetweenGroupAttributesAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: PrecedenceGroupAttributeListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    return Syntax(PrecedenceGroupAttributeListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: PrecedenceGroupRelationSyntax) -> Syntax {
    let unexpectedBeforeHigherThanOrLowerThan = node.unexpectedBeforeHigherThanOrLowerThan.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let higherThanOrLowerThan = self.visit(node.higherThanOrLowerThan).cast(TokenSyntax.self)
    let unexpectedBetweenHigherThanOrLowerThanAndColon = node.unexpectedBetweenHigherThanOrLowerThanAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndOtherNames = node.unexpectedBetweenColonAndOtherNames.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let otherNames = self.visit(node.otherNames).cast(PrecedenceGroupNameListSyntax.self)
    return Syntax(PrecedenceGroupRelationSyntax(unexpectedBeforeHigherThanOrLowerThan, higherThanOrLowerThan: higherThanOrLowerThan, unexpectedBetweenHigherThanOrLowerThanAndColon, colon: colon, unexpectedBetweenColonAndOtherNames, otherNames: otherNames))
  }
  
  open override func visit(_ node: PrecedenceGroupNameListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(PrecedenceGroupNameElementSyntax.self)
    }
    return Syntax(PrecedenceGroupNameListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: PrecedenceGroupNameElementSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndTrailingComma = node.unexpectedBetweenNameAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(PrecedenceGroupNameElementSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: PrecedenceGroupAssignmentSyntax) -> Syntax {
    let unexpectedBeforeAssignmentKeyword = node.unexpectedBeforeAssignmentKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let assignmentKeyword = self.visit(node.assignmentKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenAssignmentKeywordAndColon = node.unexpectedBetweenAssignmentKeywordAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndFlag = node.unexpectedBetweenColonAndFlag.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let flag = self.visit(node.flag).cast(TokenSyntax.self)
    return Syntax(PrecedenceGroupAssignmentSyntax(unexpectedBeforeAssignmentKeyword, assignmentKeyword: assignmentKeyword, unexpectedBetweenAssignmentKeywordAndColon, colon: colon, unexpectedBetweenColonAndFlag, flag: flag))
  }
  
  open override func visit(_ node: PrecedenceGroupAssociativitySyntax) -> Syntax {
    let unexpectedBeforeAssociativityKeyword = node.unexpectedBeforeAssociativityKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let associativityKeyword = self.visit(node.associativityKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenAssociativityKeywordAndColon = node.unexpectedBetweenAssociativityKeywordAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndValue = node.unexpectedBetweenColonAndValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let value = self.visit(node.value).cast(TokenSyntax.self)
    return Syntax(PrecedenceGroupAssociativitySyntax(unexpectedBeforeAssociativityKeyword, associativityKeyword: associativityKeyword, unexpectedBetweenAssociativityKeywordAndColon, colon: colon, unexpectedBetweenColonAndValue, value: value))
  }
  
  open override func visit(_ node: TokenListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(TokenSyntax.self)
    }
    return Syntax(TokenListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: NonEmptyTokenListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(TokenSyntax.self)
    }
    return Syntax(NonEmptyTokenListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: CustomAttributeSyntax) -> Syntax {
    let unexpectedBeforeAtSignToken = node.unexpectedBeforeAtSignToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let atSignToken = self.visit(node.atSignToken).cast(TokenSyntax.self)
    let unexpectedBetweenAtSignTokenAndAttributeName = node.unexpectedBetweenAtSignTokenAndAttributeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributeName = self.visit(node.attributeName).cast(TypeSyntax.self)
    let unexpectedBetweenAttributeNameAndLeftParen = node.unexpectedBetweenAttributeNameAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = node.leftParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArgumentList = node.unexpectedBetweenLeftParenAndArgumentList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argumentList = node.argumentList.map(self.visit)?.cast(TupleExprElementListSyntax.self)
    let unexpectedBetweenArgumentListAndRightParen = node.unexpectedBetweenArgumentListAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = node.rightParen.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(CustomAttributeSyntax(unexpectedBeforeAtSignToken, atSignToken: atSignToken, unexpectedBetweenAtSignTokenAndAttributeName, attributeName: attributeName, unexpectedBetweenAttributeNameAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArgumentList, argumentList: argumentList, unexpectedBetweenArgumentListAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: AttributeSyntax) -> Syntax {
    let unexpectedBeforeAtSignToken = node.unexpectedBeforeAtSignToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let atSignToken = self.visit(node.atSignToken).cast(TokenSyntax.self)
    let unexpectedBetweenAtSignTokenAndAttributeName = node.unexpectedBetweenAtSignTokenAndAttributeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributeName = self.visit(node.attributeName).cast(TokenSyntax.self)
    let unexpectedBetweenAttributeNameAndLeftParen = node.unexpectedBetweenAttributeNameAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = node.leftParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArgument = node.unexpectedBetweenLeftParenAndArgument.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argument = node.argument.map(self.visit)?.cast(Syntax.self)
    let unexpectedBetweenArgumentAndRightParen = node.unexpectedBetweenArgumentAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = node.rightParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenRightParenAndTokenList = node.unexpectedBetweenRightParenAndTokenList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let tokenList = node.tokenList.map(self.visit)?.cast(TokenListSyntax.self)
    return Syntax(AttributeSyntax(unexpectedBeforeAtSignToken, atSignToken: atSignToken, unexpectedBetweenAtSignTokenAndAttributeName, attributeName: attributeName, unexpectedBetweenAttributeNameAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArgument, argument: argument, unexpectedBetweenArgumentAndRightParen, rightParen: rightParen, unexpectedBetweenRightParenAndTokenList, tokenList: tokenList))
  }
  
  open override func visit(_ node: AttributeListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    return Syntax(AttributeListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: SpecializeAttributeSpecListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    return Syntax(SpecializeAttributeSpecListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: AvailabilityEntrySyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndAvailabilityList = node.unexpectedBetweenColonAndAvailabilityList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let availabilityList = self.visit(node.availabilityList).cast(AvailabilitySpecListSyntax.self)
    let unexpectedBetweenAvailabilityListAndSemicolon = node.unexpectedBetweenAvailabilityListAndSemicolon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let semicolon = self.visit(node.semicolon).cast(TokenSyntax.self)
    return Syntax(AvailabilityEntrySyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndAvailabilityList, availabilityList: availabilityList, unexpectedBetweenAvailabilityListAndSemicolon, semicolon: semicolon))
  }
  
  open override func visit(_ node: LabeledSpecializeEntrySyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndValue = node.unexpectedBetweenColonAndValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let value = self.visit(node.value).cast(TokenSyntax.self)
    let unexpectedBetweenValueAndTrailingComma = node.unexpectedBetweenValueAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(LabeledSpecializeEntrySyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndValue, value: value, unexpectedBetweenValueAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: TargetFunctionEntrySyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndDeclname = node.unexpectedBetweenColonAndDeclname.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declname = self.visit(node.declname).cast(DeclNameSyntax.self)
    let unexpectedBetweenDeclnameAndTrailingComma = node.unexpectedBetweenDeclnameAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(TargetFunctionEntrySyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndDeclname, declname: declname, unexpectedBetweenDeclnameAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: NamedAttributeStringArgumentSyntax) -> Syntax {
    let unexpectedBeforeNameTok = node.unexpectedBeforeNameTok.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let nameTok = self.visit(node.nameTok).cast(TokenSyntax.self)
    let unexpectedBetweenNameTokAndColon = node.unexpectedBetweenNameTokAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndStringOrDeclname = node.unexpectedBetweenColonAndStringOrDeclname.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let stringOrDeclname = self.visit(node.stringOrDeclname).cast(Syntax.self)
    return Syntax(NamedAttributeStringArgumentSyntax(unexpectedBeforeNameTok, nameTok: nameTok, unexpectedBetweenNameTokAndColon, colon: colon, unexpectedBetweenColonAndStringOrDeclname, stringOrDeclname: stringOrDeclname))
  }
  
  open override func visit(_ node: DeclNameSyntax) -> Syntax {
    let unexpectedBeforeDeclBaseName = node.unexpectedBeforeDeclBaseName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declBaseName = self.visit(node.declBaseName).cast(Syntax.self)
    let unexpectedBetweenDeclBaseNameAndDeclNameArguments = node.unexpectedBetweenDeclBaseNameAndDeclNameArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declNameArguments = node.declNameArguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return Syntax(DeclNameSyntax(unexpectedBeforeDeclBaseName, declBaseName: declBaseName, unexpectedBetweenDeclBaseNameAndDeclNameArguments, declNameArguments: declNameArguments))
  }
  
  open override func visit(_ node: ImplementsAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeType = node.unexpectedBeforeType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    let unexpectedBetweenTypeAndComma = node.unexpectedBetweenTypeAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = self.visit(node.comma).cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndDeclBaseName = node.unexpectedBetweenCommaAndDeclBaseName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declBaseName = self.visit(node.declBaseName).cast(TokenSyntax.self)
    let unexpectedBetweenDeclBaseNameAndDeclNameArguments = node.unexpectedBetweenDeclBaseNameAndDeclNameArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declNameArguments = node.declNameArguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return Syntax(ImplementsAttributeArgumentsSyntax(unexpectedBeforeType, type: type, unexpectedBetweenTypeAndComma, comma: comma, unexpectedBetweenCommaAndDeclBaseName, declBaseName: declBaseName, unexpectedBetweenDeclBaseNameAndDeclNameArguments, declNameArguments: declNameArguments))
  }
  
  open override func visit(_ node: ObjCSelectorPieceSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = node.name.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenNameAndColon = node.unexpectedBetweenNameAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ObjCSelectorPieceSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndColon, colon: colon))
  }
  
  open override func visit(_ node: ObjCSelectorSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ObjCSelectorPieceSyntax.self)
    }
    return Syntax(ObjCSelectorSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DifferentiableAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeDiffKind = node.unexpectedBeforeDiffKind.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffKind = node.diffKind.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenDiffKindAndDiffKindComma = node.unexpectedBetweenDiffKindAndDiffKindComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffKindComma = node.diffKindComma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenDiffKindCommaAndDiffParams = node.unexpectedBetweenDiffKindCommaAndDiffParams.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffParams = node.diffParams.map(self.visit)?.cast(DifferentiabilityParamsClauseSyntax.self)
    let unexpectedBetweenDiffParamsAndDiffParamsComma = node.unexpectedBetweenDiffParamsAndDiffParamsComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffParamsComma = node.diffParamsComma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenDiffParamsCommaAndWhereClause = node.unexpectedBetweenDiffParamsCommaAndWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereClause = node.whereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    return Syntax(DifferentiableAttributeArgumentsSyntax(unexpectedBeforeDiffKind, diffKind: diffKind, unexpectedBetweenDiffKindAndDiffKindComma, diffKindComma: diffKindComma, unexpectedBetweenDiffKindCommaAndDiffParams, diffParams: diffParams, unexpectedBetweenDiffParamsAndDiffParamsComma, diffParamsComma: diffParamsComma, unexpectedBetweenDiffParamsCommaAndWhereClause, whereClause: whereClause))
  }
  
  open override func visit(_ node: DifferentiabilityParamsClauseSyntax) -> Syntax {
    let unexpectedBeforeWrtLabel = node.unexpectedBeforeWrtLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let wrtLabel = self.visit(node.wrtLabel).cast(TokenSyntax.self)
    let unexpectedBetweenWrtLabelAndColon = node.unexpectedBetweenWrtLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndParameters = node.unexpectedBetweenColonAndParameters.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let parameters = self.visit(node.parameters).cast(Syntax.self)
    return Syntax(DifferentiabilityParamsClauseSyntax(unexpectedBeforeWrtLabel, wrtLabel: wrtLabel, unexpectedBetweenWrtLabelAndColon, colon: colon, unexpectedBetweenColonAndParameters, parameters: parameters))
  }
  
  open override func visit(_ node: DifferentiabilityParamsSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndDiffParams = node.unexpectedBetweenLeftParenAndDiffParams.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffParams = self.visit(node.diffParams).cast(DifferentiabilityParamListSyntax.self)
    let unexpectedBetweenDiffParamsAndRightParen = node.unexpectedBetweenDiffParamsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(DifferentiabilityParamsSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndDiffParams, diffParams: diffParams, unexpectedBetweenDiffParamsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: DifferentiabilityParamListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(DifferentiabilityParamSyntax.self)
    }
    return Syntax(DifferentiabilityParamListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DifferentiabilityParamSyntax) -> Syntax {
    let unexpectedBeforeParameter = node.unexpectedBeforeParameter.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let parameter = self.visit(node.parameter).cast(Syntax.self)
    let unexpectedBetweenParameterAndTrailingComma = node.unexpectedBetweenParameterAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(DifferentiabilityParamSyntax(unexpectedBeforeParameter, parameter: parameter, unexpectedBetweenParameterAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: DerivativeRegistrationAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeOfLabel = node.unexpectedBeforeOfLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ofLabel = self.visit(node.ofLabel).cast(TokenSyntax.self)
    let unexpectedBetweenOfLabelAndColon = node.unexpectedBetweenOfLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndOriginalDeclName = node.unexpectedBetweenColonAndOriginalDeclName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let originalDeclName = self.visit(node.originalDeclName).cast(QualifiedDeclNameSyntax.self)
    let unexpectedBetweenOriginalDeclNameAndPeriod = node.unexpectedBetweenOriginalDeclNameAndPeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = node.period.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenPeriodAndAccessorKind = node.unexpectedBetweenPeriodAndAccessorKind.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let accessorKind = node.accessorKind.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAccessorKindAndComma = node.unexpectedBetweenAccessorKindAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = node.comma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndDiffParams = node.unexpectedBetweenCommaAndDiffParams.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let diffParams = node.diffParams.map(self.visit)?.cast(DifferentiabilityParamsClauseSyntax.self)
    return Syntax(DerivativeRegistrationAttributeArgumentsSyntax(unexpectedBeforeOfLabel, ofLabel: ofLabel, unexpectedBetweenOfLabelAndColon, colon: colon, unexpectedBetweenColonAndOriginalDeclName, originalDeclName: originalDeclName, unexpectedBetweenOriginalDeclNameAndPeriod, period: period, unexpectedBetweenPeriodAndAccessorKind, accessorKind: accessorKind, unexpectedBetweenAccessorKindAndComma, comma: comma, unexpectedBetweenCommaAndDiffParams, diffParams: diffParams))
  }
  
  open override func visit(_ node: QualifiedDeclNameSyntax) -> Syntax {
    let unexpectedBeforeBaseType = node.unexpectedBeforeBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = node.baseType.map(self.visit)?.cast(TypeSyntax.self)
    let unexpectedBetweenBaseTypeAndDot = node.unexpectedBetweenBaseTypeAndDot.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let dot = node.dot.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenDotAndName = node.unexpectedBetweenDotAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndArguments = node.unexpectedBetweenNameAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = node.arguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return Syntax(QualifiedDeclNameSyntax(unexpectedBeforeBaseType, baseType: baseType, unexpectedBetweenBaseTypeAndDot, dot: dot, unexpectedBetweenDotAndName, name: name, unexpectedBetweenNameAndArguments, arguments: arguments))
  }
  
  open override func visit(_ node: FunctionDeclNameSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(Syntax.self)
    let unexpectedBetweenNameAndArguments = node.unexpectedBetweenNameAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = node.arguments.map(self.visit)?.cast(DeclNameArgumentsSyntax.self)
    return Syntax(FunctionDeclNameSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndArguments, arguments: arguments))
  }
  
  open override func visit(_ node: BackDeployAttributeSpecListSyntax) -> Syntax {
    let unexpectedBeforeBeforeLabel = node.unexpectedBeforeBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let beforeLabel = self.visit(node.beforeLabel).cast(TokenSyntax.self)
    let unexpectedBetweenBeforeLabelAndColon = node.unexpectedBetweenBeforeLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndVersionList = node.unexpectedBetweenColonAndVersionList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let versionList = self.visit(node.versionList).cast(BackDeployVersionListSyntax.self)
    return Syntax(BackDeployAttributeSpecListSyntax(unexpectedBeforeBeforeLabel, beforeLabel: beforeLabel, unexpectedBetweenBeforeLabelAndColon, colon: colon, unexpectedBetweenColonAndVersionList, versionList: versionList))
  }
  
  open override func visit(_ node: BackDeployVersionListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(BackDeployVersionArgumentSyntax.self)
    }
    return Syntax(BackDeployVersionListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: BackDeployVersionArgumentSyntax) -> Syntax {
    let unexpectedBeforeAvailabilityVersionRestriction = node.unexpectedBeforeAvailabilityVersionRestriction.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let availabilityVersionRestriction = self.visit(node.availabilityVersionRestriction).cast(AvailabilityVersionRestrictionSyntax.self)
    let unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma = node.unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(BackDeployVersionArgumentSyntax(unexpectedBeforeAvailabilityVersionRestriction, availabilityVersionRestriction: availabilityVersionRestriction, unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: OpaqueReturnTypeOfAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeMangledName = node.unexpectedBeforeMangledName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let mangledName = self.visit(node.mangledName).cast(TokenSyntax.self)
    let unexpectedBetweenMangledNameAndComma = node.unexpectedBetweenMangledNameAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = self.visit(node.comma).cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndOrdinal = node.unexpectedBetweenCommaAndOrdinal.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ordinal = self.visit(node.ordinal).cast(TokenSyntax.self)
    return Syntax(OpaqueReturnTypeOfAttributeArgumentsSyntax(unexpectedBeforeMangledName, mangledName: mangledName, unexpectedBetweenMangledNameAndComma, comma: comma, unexpectedBetweenCommaAndOrdinal, ordinal: ordinal))
  }
  
  open override func visit(_ node: ConventionAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeConventionLabel = node.unexpectedBeforeConventionLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let conventionLabel = self.visit(node.conventionLabel).cast(TokenSyntax.self)
    let unexpectedBetweenConventionLabelAndComma = node.unexpectedBetweenConventionLabelAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = node.comma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndCTypeLabel = node.unexpectedBetweenCommaAndCTypeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let cTypeLabel = node.cTypeLabel.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCTypeLabelAndColon = node.unexpectedBetweenCTypeLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndCTypeString = node.unexpectedBetweenColonAndCTypeString.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let cTypeString = node.cTypeString.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ConventionAttributeArgumentsSyntax(unexpectedBeforeConventionLabel, conventionLabel: conventionLabel, unexpectedBetweenConventionLabelAndComma, comma: comma, unexpectedBetweenCommaAndCTypeLabel, cTypeLabel: cTypeLabel, unexpectedBetweenCTypeLabelAndColon, colon: colon, unexpectedBetweenColonAndCTypeString, cTypeString: cTypeString))
  }
  
  open override func visit(_ node: ConventionWitnessMethodAttributeArgumentsSyntax) -> Syntax {
    let unexpectedBeforeWitnessMethodLabel = node.unexpectedBeforeWitnessMethodLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let witnessMethodLabel = self.visit(node.witnessMethodLabel).cast(TokenSyntax.self)
    let unexpectedBetweenWitnessMethodLabelAndColon = node.unexpectedBetweenWitnessMethodLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndProtocolName = node.unexpectedBetweenColonAndProtocolName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let protocolName = self.visit(node.protocolName).cast(TokenSyntax.self)
    return Syntax(ConventionWitnessMethodAttributeArgumentsSyntax(unexpectedBeforeWitnessMethodLabel, witnessMethodLabel: witnessMethodLabel, unexpectedBetweenWitnessMethodLabelAndColon, colon: colon, unexpectedBetweenColonAndProtocolName, protocolName: protocolName))
  }
  
  open override func visit(_ node: LabeledStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeLabelName = node.unexpectedBeforeLabelName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let labelName = self.visit(node.labelName).cast(TokenSyntax.self)
    let unexpectedBetweenLabelNameAndLabelColon = node.unexpectedBetweenLabelNameAndLabelColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let labelColon = self.visit(node.labelColon).cast(TokenSyntax.self)
    let unexpectedBetweenLabelColonAndStatement = node.unexpectedBetweenLabelColonAndStatement.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let statement = self.visit(node.statement).cast(StmtSyntax.self)
    return StmtSyntax(LabeledStmtSyntax(unexpectedBeforeLabelName, labelName: labelName, unexpectedBetweenLabelNameAndLabelColon, labelColon: labelColon, unexpectedBetweenLabelColonAndStatement, statement: statement))
  }
  
  open override func visit(_ node: ContinueStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeContinueKeyword = node.unexpectedBeforeContinueKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let continueKeyword = self.visit(node.continueKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenContinueKeywordAndLabel = node.unexpectedBetweenContinueKeywordAndLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = node.label.map(self.visit)?.cast(TokenSyntax.self)
    return StmtSyntax(ContinueStmtSyntax(unexpectedBeforeContinueKeyword, continueKeyword: continueKeyword, unexpectedBetweenContinueKeywordAndLabel, label: label))
  }
  
  open override func visit(_ node: WhileStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeWhileKeyword = node.unexpectedBeforeWhileKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whileKeyword = self.visit(node.whileKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenWhileKeywordAndConditions = node.unexpectedBetweenWhileKeywordAndConditions.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let conditions = self.visit(node.conditions).cast(ConditionElementListSyntax.self)
    let unexpectedBetweenConditionsAndBody = node.unexpectedBetweenConditionsAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    return StmtSyntax(WhileStmtSyntax(unexpectedBeforeWhileKeyword, whileKeyword: whileKeyword, unexpectedBetweenWhileKeywordAndConditions, conditions: conditions, unexpectedBetweenConditionsAndBody, body: body))
  }
  
  open override func visit(_ node: DeferStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeDeferKeyword = node.unexpectedBeforeDeferKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let deferKeyword = self.visit(node.deferKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenDeferKeywordAndBody = node.unexpectedBetweenDeferKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    return StmtSyntax(DeferStmtSyntax(unexpectedBeforeDeferKeyword, deferKeyword: deferKeyword, unexpectedBetweenDeferKeywordAndBody, body: body))
  }
  
  open override func visit(_ node: ExpressionStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return StmtSyntax(ExpressionStmtSyntax(unexpectedBeforeExpression, expression: expression))
  }
  
  open override func visit(_ node: SwitchCaseListSyntax) -> Syntax {
    var formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(Syntax.self)
    }
    formattedChildren = formattedChildren.map {
      if $0.leadingTrivia?.first?.isNewline == true {
        return $0
      } else {
        return $0.withLeadingTrivia(indentedNewline + ($0.leadingTrivia ?? []))
      }
    }
    return Syntax(SwitchCaseListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: RepeatWhileStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeRepeatKeyword = node.unexpectedBeforeRepeatKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let repeatKeyword = self.visit(node.repeatKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenRepeatKeywordAndBody = node.unexpectedBetweenRepeatKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    let unexpectedBetweenBodyAndWhileKeyword = node.unexpectedBetweenBodyAndWhileKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whileKeyword = self.visit(node.whileKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenWhileKeywordAndCondition = node.unexpectedBetweenWhileKeywordAndCondition.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let condition = self.visit(node.condition).cast(ExprSyntax.self)
    return StmtSyntax(RepeatWhileStmtSyntax(unexpectedBeforeRepeatKeyword, repeatKeyword: repeatKeyword, unexpectedBetweenRepeatKeywordAndBody, body: body, unexpectedBetweenBodyAndWhileKeyword, whileKeyword: whileKeyword, unexpectedBetweenWhileKeywordAndCondition, condition: condition))
  }
  
  open override func visit(_ node: GuardStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeGuardKeyword = node.unexpectedBeforeGuardKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let guardKeyword = self.visit(node.guardKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenGuardKeywordAndConditions = node.unexpectedBetweenGuardKeywordAndConditions.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let conditions = self.visit(node.conditions).cast(ConditionElementListSyntax.self)
    let unexpectedBetweenConditionsAndElseKeyword = node.unexpectedBetweenConditionsAndElseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elseKeyword = self.visit(node.elseKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenElseKeywordAndBody = node.unexpectedBetweenElseKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    return StmtSyntax(GuardStmtSyntax(unexpectedBeforeGuardKeyword, guardKeyword: guardKeyword, unexpectedBetweenGuardKeywordAndConditions, conditions: conditions, unexpectedBetweenConditionsAndElseKeyword, elseKeyword: elseKeyword, unexpectedBetweenElseKeywordAndBody, body: body))
  }
  
  open override func visit(_ node: WhereClauseSyntax) -> Syntax {
    let unexpectedBeforeWhereKeyword = node.unexpectedBeforeWhereKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereKeyword = self.visit(node.whereKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenWhereKeywordAndGuardResult = node.unexpectedBetweenWhereKeywordAndGuardResult.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let guardResult = self.visit(node.guardResult).cast(ExprSyntax.self)
    return Syntax(WhereClauseSyntax(unexpectedBeforeWhereKeyword, whereKeyword: whereKeyword, unexpectedBetweenWhereKeywordAndGuardResult, guardResult: guardResult))
  }
  
  open override func visit(_ node: ForInStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeForKeyword = node.unexpectedBeforeForKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let forKeyword = self.visit(node.forKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenForKeywordAndTryKeyword = node.unexpectedBetweenForKeywordAndTryKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let tryKeyword = node.tryKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenTryKeywordAndAwaitKeyword = node.unexpectedBetweenTryKeywordAndAwaitKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let awaitKeyword = node.awaitKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAwaitKeywordAndCaseKeyword = node.unexpectedBetweenAwaitKeywordAndCaseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseKeyword = node.caseKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCaseKeywordAndPattern = node.unexpectedBetweenCaseKeywordAndPattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndTypeAnnotation = node.unexpectedBetweenPatternAndTypeAnnotation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeAnnotation = node.typeAnnotation.map(self.visit)?.cast(TypeAnnotationSyntax.self)
    let unexpectedBetweenTypeAnnotationAndInKeyword = node.unexpectedBetweenTypeAnnotationAndInKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inKeyword = self.visit(node.inKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenInKeywordAndSequenceExpr = node.unexpectedBetweenInKeywordAndSequenceExpr.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let sequenceExpr = self.visit(node.sequenceExpr).cast(ExprSyntax.self)
    let unexpectedBetweenSequenceExprAndWhereClause = node.unexpectedBetweenSequenceExprAndWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereClause = node.whereClause.map(self.visit)?.cast(WhereClauseSyntax.self)
    let unexpectedBetweenWhereClauseAndBody = node.unexpectedBetweenWhereClauseAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    return StmtSyntax(ForInStmtSyntax(unexpectedBeforeForKeyword, forKeyword: forKeyword, unexpectedBetweenForKeywordAndTryKeyword, tryKeyword: tryKeyword, unexpectedBetweenTryKeywordAndAwaitKeyword, awaitKeyword: awaitKeyword, unexpectedBetweenAwaitKeywordAndCaseKeyword, caseKeyword: caseKeyword, unexpectedBetweenCaseKeywordAndPattern, pattern: pattern, unexpectedBetweenPatternAndTypeAnnotation, typeAnnotation: typeAnnotation, unexpectedBetweenTypeAnnotationAndInKeyword, inKeyword: inKeyword, unexpectedBetweenInKeywordAndSequenceExpr, sequenceExpr: sequenceExpr, unexpectedBetweenSequenceExprAndWhereClause, whereClause: whereClause, unexpectedBetweenWhereClauseAndBody, body: body))
  }
  
  open override func visit(_ node: SwitchStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeSwitchKeyword = node.unexpectedBeforeSwitchKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let switchKeyword = self.visit(node.switchKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenSwitchKeywordAndExpression = node.unexpectedBetweenSwitchKeywordAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndLeftBrace = node.unexpectedBetweenExpressionAndLeftBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftBrace = self.visit(node.leftBrace).cast(TokenSyntax.self)
    let unexpectedBetweenLeftBraceAndCases = node.unexpectedBetweenLeftBraceAndCases.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let cases = self.visit(node.cases).cast(SwitchCaseListSyntax.self)
    let unexpectedBetweenCasesAndRightBrace = node.unexpectedBetweenCasesAndRightBrace.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    var rightBrace = self.visit(node.rightBrace).cast(TokenSyntax.self)
    if rightBrace.leadingTrivia.first?.isNewline != true {
      rightBrace.leadingTrivia = indentedNewline + rightBrace.leadingTrivia
    }
    return StmtSyntax(SwitchStmtSyntax(unexpectedBeforeSwitchKeyword, switchKeyword: switchKeyword, unexpectedBetweenSwitchKeywordAndExpression, expression: expression, unexpectedBetweenExpressionAndLeftBrace, leftBrace: leftBrace, unexpectedBetweenLeftBraceAndCases, cases: cases, unexpectedBetweenCasesAndRightBrace, rightBrace: rightBrace))
  }
  
  open override func visit(_ node: CatchClauseListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(CatchClauseSyntax.self)
    }
    return Syntax(CatchClauseListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DoStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeDoKeyword = node.unexpectedBeforeDoKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let doKeyword = self.visit(node.doKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenDoKeywordAndBody = node.unexpectedBetweenDoKeywordAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    let unexpectedBetweenBodyAndCatchClauses = node.unexpectedBetweenBodyAndCatchClauses.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let catchClauses = node.catchClauses.map(self.visit)?.cast(CatchClauseListSyntax.self)
    return StmtSyntax(DoStmtSyntax(unexpectedBeforeDoKeyword, doKeyword: doKeyword, unexpectedBetweenDoKeywordAndBody, body: body, unexpectedBetweenBodyAndCatchClauses, catchClauses: catchClauses))
  }
  
  open override func visit(_ node: ReturnStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeReturnKeyword = node.unexpectedBeforeReturnKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let returnKeyword = self.visit(node.returnKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenReturnKeywordAndExpression = node.unexpectedBetweenReturnKeywordAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = node.expression.map(self.visit)?.cast(ExprSyntax.self)
    return StmtSyntax(ReturnStmtSyntax(unexpectedBeforeReturnKeyword, returnKeyword: returnKeyword, unexpectedBetweenReturnKeywordAndExpression, expression: expression))
  }
  
  open override func visit(_ node: YieldStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeYieldKeyword = node.unexpectedBeforeYieldKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let yieldKeyword = self.visit(node.yieldKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenYieldKeywordAndYields = node.unexpectedBetweenYieldKeywordAndYields.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let yields = self.visit(node.yields).cast(Syntax.self)
    return StmtSyntax(YieldStmtSyntax(unexpectedBeforeYieldKeyword, yieldKeyword: yieldKeyword, unexpectedBetweenYieldKeywordAndYields, yields: yields))
  }
  
  open override func visit(_ node: YieldListSyntax) -> Syntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndElementList = node.unexpectedBetweenLeftParenAndElementList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elementList = self.visit(node.elementList).cast(YieldExprListSyntax.self)
    let unexpectedBetweenElementListAndRightParen = node.unexpectedBetweenElementListAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(YieldListSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndElementList, elementList: elementList, unexpectedBetweenElementListAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: FallthroughStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeFallthroughKeyword = node.unexpectedBeforeFallthroughKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let fallthroughKeyword = self.visit(node.fallthroughKeyword).cast(TokenSyntax.self)
    return StmtSyntax(FallthroughStmtSyntax(unexpectedBeforeFallthroughKeyword, fallthroughKeyword: fallthroughKeyword))
  }
  
  open override func visit(_ node: BreakStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeBreakKeyword = node.unexpectedBeforeBreakKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let breakKeyword = self.visit(node.breakKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenBreakKeywordAndLabel = node.unexpectedBetweenBreakKeywordAndLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = node.label.map(self.visit)?.cast(TokenSyntax.self)
    return StmtSyntax(BreakStmtSyntax(unexpectedBeforeBreakKeyword, breakKeyword: breakKeyword, unexpectedBetweenBreakKeywordAndLabel, label: label))
  }
  
  open override func visit(_ node: CaseItemListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(CaseItemSyntax.self)
    }
    return Syntax(CaseItemListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: CatchItemListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(CatchItemSyntax.self)
    }
    return Syntax(CatchItemListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ConditionElementSyntax) -> Syntax {
    let unexpectedBeforeCondition = node.unexpectedBeforeCondition.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let condition = self.visit(node.condition).cast(Syntax.self)
    let unexpectedBetweenConditionAndTrailingComma = node.unexpectedBetweenConditionAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(ConditionElementSyntax(unexpectedBeforeCondition, condition: condition, unexpectedBetweenConditionAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: AvailabilityConditionSyntax) -> Syntax {
    let unexpectedBeforePoundAvailableKeyword = node.unexpectedBeforePoundAvailableKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundAvailableKeyword = self.visit(node.poundAvailableKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenPoundAvailableKeywordAndLeftParen = node.unexpectedBetweenPoundAvailableKeywordAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndAvailabilitySpec = node.unexpectedBetweenLeftParenAndAvailabilitySpec.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let availabilitySpec = self.visit(node.availabilitySpec).cast(AvailabilitySpecListSyntax.self)
    let unexpectedBetweenAvailabilitySpecAndRightParen = node.unexpectedBetweenAvailabilitySpecAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(AvailabilityConditionSyntax(unexpectedBeforePoundAvailableKeyword, poundAvailableKeyword: poundAvailableKeyword, unexpectedBetweenPoundAvailableKeywordAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndAvailabilitySpec, availabilitySpec: availabilitySpec, unexpectedBetweenAvailabilitySpecAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: MatchingPatternConditionSyntax) -> Syntax {
    let unexpectedBeforeCaseKeyword = node.unexpectedBeforeCaseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseKeyword = self.visit(node.caseKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenCaseKeywordAndPattern = node.unexpectedBetweenCaseKeywordAndPattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndTypeAnnotation = node.unexpectedBetweenPatternAndTypeAnnotation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeAnnotation = node.typeAnnotation.map(self.visit)?.cast(TypeAnnotationSyntax.self)
    let unexpectedBetweenTypeAnnotationAndInitializer = node.unexpectedBetweenTypeAnnotationAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = self.visit(node.initializer).cast(InitializerClauseSyntax.self)
    return Syntax(MatchingPatternConditionSyntax(unexpectedBeforeCaseKeyword, caseKeyword: caseKeyword, unexpectedBetweenCaseKeywordAndPattern, pattern: pattern, unexpectedBetweenPatternAndTypeAnnotation, typeAnnotation: typeAnnotation, unexpectedBetweenTypeAnnotationAndInitializer, initializer: initializer))
  }
  
  open override func visit(_ node: OptionalBindingConditionSyntax) -> Syntax {
    let unexpectedBeforeLetOrVarKeyword = node.unexpectedBeforeLetOrVarKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let letOrVarKeyword = self.visit(node.letOrVarKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenLetOrVarKeywordAndPattern = node.unexpectedBetweenLetOrVarKeywordAndPattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndTypeAnnotation = node.unexpectedBetweenPatternAndTypeAnnotation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeAnnotation = node.typeAnnotation.map(self.visit)?.cast(TypeAnnotationSyntax.self)
    let unexpectedBetweenTypeAnnotationAndInitializer = node.unexpectedBetweenTypeAnnotationAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = node.initializer.map(self.visit)?.cast(InitializerClauseSyntax.self)
    return Syntax(OptionalBindingConditionSyntax(unexpectedBeforeLetOrVarKeyword, letOrVarKeyword: letOrVarKeyword, unexpectedBetweenLetOrVarKeywordAndPattern, pattern: pattern, unexpectedBetweenPatternAndTypeAnnotation, typeAnnotation: typeAnnotation, unexpectedBetweenTypeAnnotationAndInitializer, initializer: initializer))
  }
  
  open override func visit(_ node: UnavailabilityConditionSyntax) -> Syntax {
    let unexpectedBeforePoundUnavailableKeyword = node.unexpectedBeforePoundUnavailableKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundUnavailableKeyword = self.visit(node.poundUnavailableKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenPoundUnavailableKeywordAndLeftParen = node.unexpectedBetweenPoundUnavailableKeywordAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndAvailabilitySpec = node.unexpectedBetweenLeftParenAndAvailabilitySpec.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let availabilitySpec = self.visit(node.availabilitySpec).cast(AvailabilitySpecListSyntax.self)
    let unexpectedBetweenAvailabilitySpecAndRightParen = node.unexpectedBetweenAvailabilitySpecAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(UnavailabilityConditionSyntax(unexpectedBeforePoundUnavailableKeyword, poundUnavailableKeyword: poundUnavailableKeyword, unexpectedBetweenPoundUnavailableKeywordAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndAvailabilitySpec, availabilitySpec: availabilitySpec, unexpectedBetweenAvailabilitySpecAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: HasSymbolConditionSyntax) -> Syntax {
    let unexpectedBeforeHasSymbolKeyword = node.unexpectedBeforeHasSymbolKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let hasSymbolKeyword = self.visit(node.hasSymbolKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenHasSymbolKeywordAndLeftParen = node.unexpectedBetweenHasSymbolKeywordAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndExpression = node.unexpectedBetweenLeftParenAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    let unexpectedBetweenExpressionAndRightParen = node.unexpectedBetweenExpressionAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return Syntax(HasSymbolConditionSyntax(unexpectedBeforeHasSymbolKeyword, hasSymbolKeyword: hasSymbolKeyword, unexpectedBetweenHasSymbolKeywordAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndExpression, expression: expression, unexpectedBetweenExpressionAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: ConditionElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(ConditionElementSyntax.self)
    }
    return Syntax(ConditionElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: DeclarationStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeDeclaration = node.unexpectedBeforeDeclaration.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let declaration = self.visit(node.declaration).cast(DeclSyntax.self)
    return StmtSyntax(DeclarationStmtSyntax(unexpectedBeforeDeclaration, declaration: declaration))
  }
  
  open override func visit(_ node: ThrowStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeThrowKeyword = node.unexpectedBeforeThrowKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwKeyword = self.visit(node.throwKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenThrowKeywordAndExpression = node.unexpectedBetweenThrowKeywordAndExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return StmtSyntax(ThrowStmtSyntax(unexpectedBeforeThrowKeyword, throwKeyword: throwKeyword, unexpectedBetweenThrowKeywordAndExpression, expression: expression))
  }
  
  open override func visit(_ node: IfStmtSyntax) -> StmtSyntax {
    let unexpectedBeforeIfKeyword = node.unexpectedBeforeIfKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ifKeyword = self.visit(node.ifKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenIfKeywordAndConditions = node.unexpectedBetweenIfKeywordAndConditions.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let conditions = self.visit(node.conditions).cast(ConditionElementListSyntax.self)
    let unexpectedBetweenConditionsAndBody = node.unexpectedBetweenConditionsAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    let unexpectedBetweenBodyAndElseKeyword = node.unexpectedBetweenBodyAndElseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elseKeyword = node.elseKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenElseKeywordAndElseBody = node.unexpectedBetweenElseKeywordAndElseBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elseBody = node.elseBody.map(self.visit)?.cast(Syntax.self)
    return StmtSyntax(IfStmtSyntax(unexpectedBeforeIfKeyword, ifKeyword: ifKeyword, unexpectedBetweenIfKeywordAndConditions, conditions: conditions, unexpectedBetweenConditionsAndBody, body: body, unexpectedBetweenBodyAndElseKeyword, elseKeyword: elseKeyword, unexpectedBetweenElseKeywordAndElseBody, elseBody: elseBody))
  }
  
  open override func visit(_ node: SwitchCaseSyntax) -> Syntax {
    let unexpectedBeforeUnknownAttr = node.unexpectedBeforeUnknownAttr.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let unknownAttr = node.unknownAttr.map(self.visit)?.cast(AttributeSyntax.self)
    let unexpectedBetweenUnknownAttrAndLabel = node.unexpectedBetweenUnknownAttrAndLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(Syntax.self)
    let unexpectedBetweenLabelAndStatements = node.unexpectedBetweenLabelAndStatements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    indentationLevel += 1
    let statements = self.visit(node.statements).cast(CodeBlockItemListSyntax.self)
    indentationLevel -= 1
    return Syntax(SwitchCaseSyntax(unexpectedBeforeUnknownAttr, unknownAttr: unknownAttr, unexpectedBetweenUnknownAttrAndLabel, label: label, unexpectedBetweenLabelAndStatements, statements: statements))
  }
  
  open override func visit(_ node: SwitchDefaultLabelSyntax) -> Syntax {
    let unexpectedBeforeDefaultKeyword = node.unexpectedBeforeDefaultKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let defaultKeyword = self.visit(node.defaultKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenDefaultKeywordAndColon = node.unexpectedBetweenDefaultKeywordAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    return Syntax(SwitchDefaultLabelSyntax(unexpectedBeforeDefaultKeyword, defaultKeyword: defaultKeyword, unexpectedBetweenDefaultKeywordAndColon, colon: colon))
  }
  
  open override func visit(_ node: CaseItemSyntax) -> Syntax {
    let unexpectedBeforePattern = node.unexpectedBeforePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndWhereClause = node.unexpectedBetweenPatternAndWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereClause = node.whereClause.map(self.visit)?.cast(WhereClauseSyntax.self)
    let unexpectedBetweenWhereClauseAndTrailingComma = node.unexpectedBetweenWhereClauseAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(CaseItemSyntax(unexpectedBeforePattern, pattern: pattern, unexpectedBetweenPatternAndWhereClause, whereClause: whereClause, unexpectedBetweenWhereClauseAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: CatchItemSyntax) -> Syntax {
    let unexpectedBeforePattern = node.unexpectedBeforePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = node.pattern.map(self.visit)?.cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndWhereClause = node.unexpectedBetweenPatternAndWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereClause = node.whereClause.map(self.visit)?.cast(WhereClauseSyntax.self)
    let unexpectedBetweenWhereClauseAndTrailingComma = node.unexpectedBetweenWhereClauseAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(CatchItemSyntax(unexpectedBeforePattern, pattern: pattern, unexpectedBetweenPatternAndWhereClause, whereClause: whereClause, unexpectedBetweenWhereClauseAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: SwitchCaseLabelSyntax) -> Syntax {
    let unexpectedBeforeCaseKeyword = node.unexpectedBeforeCaseKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseKeyword = self.visit(node.caseKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenCaseKeywordAndCaseItems = node.unexpectedBetweenCaseKeywordAndCaseItems.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseItems = self.visit(node.caseItems).cast(CaseItemListSyntax.self)
    let unexpectedBetweenCaseItemsAndColon = node.unexpectedBetweenCaseItemsAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    return Syntax(SwitchCaseLabelSyntax(unexpectedBeforeCaseKeyword, caseKeyword: caseKeyword, unexpectedBetweenCaseKeywordAndCaseItems, caseItems: caseItems, unexpectedBetweenCaseItemsAndColon, colon: colon))
  }
  
  open override func visit(_ node: CatchClauseSyntax) -> Syntax {
    let unexpectedBeforeCatchKeyword = node.unexpectedBeforeCatchKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let catchKeyword = self.visit(node.catchKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenCatchKeywordAndCatchItems = node.unexpectedBetweenCatchKeywordAndCatchItems.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let catchItems = node.catchItems.map(self.visit)?.cast(CatchItemListSyntax.self)
    let unexpectedBetweenCatchItemsAndBody = node.unexpectedBetweenCatchItemsAndBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(CodeBlockSyntax.self)
    return Syntax(CatchClauseSyntax(unexpectedBeforeCatchKeyword, catchKeyword: catchKeyword, unexpectedBetweenCatchKeywordAndCatchItems, catchItems: catchItems, unexpectedBetweenCatchItemsAndBody, body: body))
  }
  
  open override func visit(_ node: PoundAssertStmtSyntax) -> StmtSyntax {
    let unexpectedBeforePoundAssert = node.unexpectedBeforePoundAssert.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let poundAssert = self.visit(node.poundAssert).cast(TokenSyntax.self)
    let unexpectedBetweenPoundAssertAndLeftParen = node.unexpectedBetweenPoundAssertAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndCondition = node.unexpectedBetweenLeftParenAndCondition.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let condition = self.visit(node.condition).cast(ExprSyntax.self)
    let unexpectedBetweenConditionAndComma = node.unexpectedBetweenConditionAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = node.comma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndMessage = node.unexpectedBetweenCommaAndMessage.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let message = node.message.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenMessageAndRightParen = node.unexpectedBetweenMessageAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return StmtSyntax(PoundAssertStmtSyntax(unexpectedBeforePoundAssert, poundAssert: poundAssert, unexpectedBetweenPoundAssertAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndCondition, condition: condition, unexpectedBetweenConditionAndComma, comma: comma, unexpectedBetweenCommaAndMessage, message: message, unexpectedBetweenMessageAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: GenericWhereClauseSyntax) -> Syntax {
    let unexpectedBeforeWhereKeyword = node.unexpectedBeforeWhereKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let whereKeyword = self.visit(node.whereKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenWhereKeywordAndRequirementList = node.unexpectedBetweenWhereKeywordAndRequirementList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let requirementList = self.visit(node.requirementList).cast(GenericRequirementListSyntax.self)
    return Syntax(GenericWhereClauseSyntax(unexpectedBeforeWhereKeyword, whereKeyword: whereKeyword, unexpectedBetweenWhereKeywordAndRequirementList, requirementList: requirementList))
  }
  
  open override func visit(_ node: GenericRequirementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(GenericRequirementSyntax.self)
    }
    return Syntax(GenericRequirementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: GenericRequirementSyntax) -> Syntax {
    let unexpectedBeforeBody = node.unexpectedBeforeBody.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let body = self.visit(node.body).cast(Syntax.self)
    let unexpectedBetweenBodyAndTrailingComma = node.unexpectedBetweenBodyAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(GenericRequirementSyntax(unexpectedBeforeBody, body: body, unexpectedBetweenBodyAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: SameTypeRequirementSyntax) -> Syntax {
    let unexpectedBeforeLeftTypeIdentifier = node.unexpectedBeforeLeftTypeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftTypeIdentifier = self.visit(node.leftTypeIdentifier).cast(TypeSyntax.self)
    let unexpectedBetweenLeftTypeIdentifierAndEqualityToken = node.unexpectedBetweenLeftTypeIdentifierAndEqualityToken.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let equalityToken = self.visit(node.equalityToken).cast(TokenSyntax.self)
    let unexpectedBetweenEqualityTokenAndRightTypeIdentifier = node.unexpectedBetweenEqualityTokenAndRightTypeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightTypeIdentifier = self.visit(node.rightTypeIdentifier).cast(TypeSyntax.self)
    return Syntax(SameTypeRequirementSyntax(unexpectedBeforeLeftTypeIdentifier, leftTypeIdentifier: leftTypeIdentifier, unexpectedBetweenLeftTypeIdentifierAndEqualityToken, equalityToken: equalityToken, unexpectedBetweenEqualityTokenAndRightTypeIdentifier, rightTypeIdentifier: rightTypeIdentifier))
  }
  
  open override func visit(_ node: LayoutRequirementSyntax) -> Syntax {
    let unexpectedBeforeTypeIdentifier = node.unexpectedBeforeTypeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeIdentifier = self.visit(node.typeIdentifier).cast(TypeSyntax.self)
    let unexpectedBetweenTypeIdentifierAndColon = node.unexpectedBetweenTypeIdentifierAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndLayoutConstraint = node.unexpectedBetweenColonAndLayoutConstraint.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let layoutConstraint = self.visit(node.layoutConstraint).cast(TokenSyntax.self)
    let unexpectedBetweenLayoutConstraintAndLeftParen = node.unexpectedBetweenLayoutConstraintAndLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = node.leftParen.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndSize = node.unexpectedBetweenLeftParenAndSize.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let size = node.size.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenSizeAndComma = node.unexpectedBetweenSizeAndComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let comma = node.comma.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenCommaAndAlignment = node.unexpectedBetweenCommaAndAlignment.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let alignment = node.alignment.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAlignmentAndRightParen = node.unexpectedBetweenAlignmentAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = node.rightParen.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(LayoutRequirementSyntax(unexpectedBeforeTypeIdentifier, typeIdentifier: typeIdentifier, unexpectedBetweenTypeIdentifierAndColon, colon: colon, unexpectedBetweenColonAndLayoutConstraint, layoutConstraint: layoutConstraint, unexpectedBetweenLayoutConstraintAndLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndSize, size: size, unexpectedBetweenSizeAndComma, comma: comma, unexpectedBetweenCommaAndAlignment, alignment: alignment, unexpectedBetweenAlignmentAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: GenericParameterListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(GenericParameterSyntax.self)
    }
    return Syntax(GenericParameterListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: GenericParameterSyntax) -> Syntax {
    let unexpectedBeforeAttributes = node.unexpectedBeforeAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndName = node.unexpectedBetweenAttributesAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndEllipsis = node.unexpectedBetweenNameAndEllipsis.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ellipsis = node.ellipsis.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenEllipsisAndColon = node.unexpectedBetweenEllipsisAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndInheritedType = node.unexpectedBetweenColonAndInheritedType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inheritedType = node.inheritedType.map(self.visit)?.cast(TypeSyntax.self)
    let unexpectedBetweenInheritedTypeAndTrailingComma = node.unexpectedBetweenInheritedTypeAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(GenericParameterSyntax(unexpectedBeforeAttributes, attributes: attributes, unexpectedBetweenAttributesAndName, name: name, unexpectedBetweenNameAndEllipsis, ellipsis: ellipsis, unexpectedBetweenEllipsisAndColon, colon: colon, unexpectedBetweenColonAndInheritedType, inheritedType: inheritedType, unexpectedBetweenInheritedTypeAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: PrimaryAssociatedTypeListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(PrimaryAssociatedTypeSyntax.self)
    }
    return Syntax(PrimaryAssociatedTypeListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: PrimaryAssociatedTypeSyntax) -> Syntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndTrailingComma = node.unexpectedBetweenNameAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(PrimaryAssociatedTypeSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: GenericParameterClauseSyntax) -> Syntax {
    let unexpectedBeforeLeftAngleBracket = node.unexpectedBeforeLeftAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftAngleBracket = self.visit(node.leftAngleBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftAngleBracketAndGenericParameterList = node.unexpectedBetweenLeftAngleBracketAndGenericParameterList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameterList = self.visit(node.genericParameterList).cast(GenericParameterListSyntax.self)
    let unexpectedBetweenGenericParameterListAndGenericWhereClause = node.unexpectedBetweenGenericParameterListAndGenericWhereClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericWhereClause = node.genericWhereClause.map(self.visit)?.cast(GenericWhereClauseSyntax.self)
    let unexpectedBetweenGenericWhereClauseAndRightAngleBracket = node.unexpectedBetweenGenericWhereClauseAndRightAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightAngleBracket = self.visit(node.rightAngleBracket).cast(TokenSyntax.self)
    return Syntax(GenericParameterClauseSyntax(unexpectedBeforeLeftAngleBracket, leftAngleBracket: leftAngleBracket, unexpectedBetweenLeftAngleBracketAndGenericParameterList, genericParameterList: genericParameterList, unexpectedBetweenGenericParameterListAndGenericWhereClause, genericWhereClause: genericWhereClause, unexpectedBetweenGenericWhereClauseAndRightAngleBracket, rightAngleBracket: rightAngleBracket))
  }
  
  open override func visit(_ node: ConformanceRequirementSyntax) -> Syntax {
    let unexpectedBeforeLeftTypeIdentifier = node.unexpectedBeforeLeftTypeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftTypeIdentifier = self.visit(node.leftTypeIdentifier).cast(TypeSyntax.self)
    let unexpectedBetweenLeftTypeIdentifierAndColon = node.unexpectedBetweenLeftTypeIdentifierAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndRightTypeIdentifier = node.unexpectedBetweenColonAndRightTypeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightTypeIdentifier = self.visit(node.rightTypeIdentifier).cast(TypeSyntax.self)
    return Syntax(ConformanceRequirementSyntax(unexpectedBeforeLeftTypeIdentifier, leftTypeIdentifier: leftTypeIdentifier, unexpectedBetweenLeftTypeIdentifierAndColon, colon: colon, unexpectedBetweenColonAndRightTypeIdentifier, rightTypeIdentifier: rightTypeIdentifier))
  }
  
  open override func visit(_ node: PrimaryAssociatedTypeClauseSyntax) -> Syntax {
    let unexpectedBeforeLeftAngleBracket = node.unexpectedBeforeLeftAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftAngleBracket = self.visit(node.leftAngleBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList = node.unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let primaryAssociatedTypeList = self.visit(node.primaryAssociatedTypeList).cast(PrimaryAssociatedTypeListSyntax.self)
    let unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket = node.unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightAngleBracket = self.visit(node.rightAngleBracket).cast(TokenSyntax.self)
    return Syntax(PrimaryAssociatedTypeClauseSyntax(unexpectedBeforeLeftAngleBracket, leftAngleBracket: leftAngleBracket, unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList, primaryAssociatedTypeList: primaryAssociatedTypeList, unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket, rightAngleBracket: rightAngleBracket))
  }
  
  open override func visit(_ node: SimpleTypeIdentifierSyntax) -> TypeSyntax {
    let unexpectedBeforeName = node.unexpectedBeforeName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndGenericArgumentClause = node.unexpectedBetweenNameAndGenericArgumentClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericArgumentClause = node.genericArgumentClause.map(self.visit)?.cast(GenericArgumentClauseSyntax.self)
    return TypeSyntax(SimpleTypeIdentifierSyntax(unexpectedBeforeName, name: name, unexpectedBetweenNameAndGenericArgumentClause, genericArgumentClause: genericArgumentClause))
  }
  
  open override func visit(_ node: MemberTypeIdentifierSyntax) -> TypeSyntax {
    let unexpectedBeforeBaseType = node.unexpectedBeforeBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = self.visit(node.baseType).cast(TypeSyntax.self)
    let unexpectedBetweenBaseTypeAndPeriod = node.unexpectedBetweenBaseTypeAndPeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = self.visit(node.period).cast(TokenSyntax.self)
    let unexpectedBetweenPeriodAndName = node.unexpectedBetweenPeriodAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = self.visit(node.name).cast(TokenSyntax.self)
    let unexpectedBetweenNameAndGenericArgumentClause = node.unexpectedBetweenNameAndGenericArgumentClause.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericArgumentClause = node.genericArgumentClause.map(self.visit)?.cast(GenericArgumentClauseSyntax.self)
    return TypeSyntax(MemberTypeIdentifierSyntax(unexpectedBeforeBaseType, baseType: baseType, unexpectedBetweenBaseTypeAndPeriod, period: period, unexpectedBetweenPeriodAndName, name: name, unexpectedBetweenNameAndGenericArgumentClause, genericArgumentClause: genericArgumentClause))
  }
  
  open override func visit(_ node: ClassRestrictionTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeClassKeyword = node.unexpectedBeforeClassKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let classKeyword = self.visit(node.classKeyword).cast(TokenSyntax.self)
    return TypeSyntax(ClassRestrictionTypeSyntax(unexpectedBeforeClassKeyword, classKeyword: classKeyword))
  }
  
  open override func visit(_ node: ArrayTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeLeftSquareBracket = node.unexpectedBeforeLeftSquareBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftSquareBracket = self.visit(node.leftSquareBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftSquareBracketAndElementType = node.unexpectedBetweenLeftSquareBracketAndElementType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elementType = self.visit(node.elementType).cast(TypeSyntax.self)
    let unexpectedBetweenElementTypeAndRightSquareBracket = node.unexpectedBetweenElementTypeAndRightSquareBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightSquareBracket = self.visit(node.rightSquareBracket).cast(TokenSyntax.self)
    return TypeSyntax(ArrayTypeSyntax(unexpectedBeforeLeftSquareBracket, leftSquareBracket: leftSquareBracket, unexpectedBetweenLeftSquareBracketAndElementType, elementType: elementType, unexpectedBetweenElementTypeAndRightSquareBracket, rightSquareBracket: rightSquareBracket))
  }
  
  open override func visit(_ node: DictionaryTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeLeftSquareBracket = node.unexpectedBeforeLeftSquareBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftSquareBracket = self.visit(node.leftSquareBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftSquareBracketAndKeyType = node.unexpectedBetweenLeftSquareBracketAndKeyType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let keyType = self.visit(node.keyType).cast(TypeSyntax.self)
    let unexpectedBetweenKeyTypeAndColon = node.unexpectedBetweenKeyTypeAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndValueType = node.unexpectedBetweenColonAndValueType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let valueType = self.visit(node.valueType).cast(TypeSyntax.self)
    let unexpectedBetweenValueTypeAndRightSquareBracket = node.unexpectedBetweenValueTypeAndRightSquareBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightSquareBracket = self.visit(node.rightSquareBracket).cast(TokenSyntax.self)
    return TypeSyntax(DictionaryTypeSyntax(unexpectedBeforeLeftSquareBracket, leftSquareBracket: leftSquareBracket, unexpectedBetweenLeftSquareBracketAndKeyType, keyType: keyType, unexpectedBetweenKeyTypeAndColon, colon: colon, unexpectedBetweenColonAndValueType, valueType: valueType, unexpectedBetweenValueTypeAndRightSquareBracket, rightSquareBracket: rightSquareBracket))
  }
  
  open override func visit(_ node: MetatypeTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeBaseType = node.unexpectedBeforeBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = self.visit(node.baseType).cast(TypeSyntax.self)
    let unexpectedBetweenBaseTypeAndPeriod = node.unexpectedBetweenBaseTypeAndPeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = self.visit(node.period).cast(TokenSyntax.self)
    let unexpectedBetweenPeriodAndTypeOrProtocol = node.unexpectedBetweenPeriodAndTypeOrProtocol.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeOrProtocol = self.visit(node.typeOrProtocol).cast(TokenSyntax.self)
    return TypeSyntax(MetatypeTypeSyntax(unexpectedBeforeBaseType, baseType: baseType, unexpectedBetweenBaseTypeAndPeriod, period: period, unexpectedBetweenPeriodAndTypeOrProtocol, typeOrProtocol: typeOrProtocol))
  }
  
  open override func visit(_ node: OptionalTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeWrappedType = node.unexpectedBeforeWrappedType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let wrappedType = self.visit(node.wrappedType).cast(TypeSyntax.self)
    let unexpectedBetweenWrappedTypeAndQuestionMark = node.unexpectedBetweenWrappedTypeAndQuestionMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionMark = self.visit(node.questionMark).cast(TokenSyntax.self)
    return TypeSyntax(OptionalTypeSyntax(unexpectedBeforeWrappedType, wrappedType: wrappedType, unexpectedBetweenWrappedTypeAndQuestionMark, questionMark: questionMark))
  }
  
  open override func visit(_ node: ConstrainedSugarTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeSomeOrAnySpecifier = node.unexpectedBeforeSomeOrAnySpecifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let someOrAnySpecifier = self.visit(node.someOrAnySpecifier).cast(TokenSyntax.self)
    let unexpectedBetweenSomeOrAnySpecifierAndBaseType = node.unexpectedBetweenSomeOrAnySpecifierAndBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = self.visit(node.baseType).cast(TypeSyntax.self)
    return TypeSyntax(ConstrainedSugarTypeSyntax(unexpectedBeforeSomeOrAnySpecifier, someOrAnySpecifier: someOrAnySpecifier, unexpectedBetweenSomeOrAnySpecifierAndBaseType, baseType: baseType))
  }
  
  open override func visit(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeWrappedType = node.unexpectedBeforeWrappedType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let wrappedType = self.visit(node.wrappedType).cast(TypeSyntax.self)
    let unexpectedBetweenWrappedTypeAndExclamationMark = node.unexpectedBetweenWrappedTypeAndExclamationMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let exclamationMark = self.visit(node.exclamationMark).cast(TokenSyntax.self)
    return TypeSyntax(ImplicitlyUnwrappedOptionalTypeSyntax(unexpectedBeforeWrappedType, wrappedType: wrappedType, unexpectedBetweenWrappedTypeAndExclamationMark, exclamationMark: exclamationMark))
  }
  
  open override func visit(_ node: CompositionTypeElementSyntax) -> Syntax {
    let unexpectedBeforeType = node.unexpectedBeforeType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    let unexpectedBetweenTypeAndAmpersand = node.unexpectedBetweenTypeAndAmpersand.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ampersand = node.ampersand.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(CompositionTypeElementSyntax(unexpectedBeforeType, type: type, unexpectedBetweenTypeAndAmpersand, ampersand: ampersand))
  }
  
  open override func visit(_ node: CompositionTypeElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(CompositionTypeElementSyntax.self)
    }
    return Syntax(CompositionTypeElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: CompositionTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeElements = node.unexpectedBeforeElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(CompositionTypeElementListSyntax.self)
    return TypeSyntax(CompositionTypeSyntax(unexpectedBeforeElements, elements: elements))
  }
  
  open override func visit(_ node: PackExpansionTypeSyntax) -> TypeSyntax {
    let unexpectedBeforePatternType = node.unexpectedBeforePatternType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let patternType = self.visit(node.patternType).cast(TypeSyntax.self)
    let unexpectedBetweenPatternTypeAndEllipsis = node.unexpectedBetweenPatternTypeAndEllipsis.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ellipsis = self.visit(node.ellipsis).cast(TokenSyntax.self)
    return TypeSyntax(PackExpansionTypeSyntax(unexpectedBeforePatternType, patternType: patternType, unexpectedBetweenPatternTypeAndEllipsis, ellipsis: ellipsis))
  }
  
  open override func visit(_ node: TupleTypeElementSyntax) -> Syntax {
    let unexpectedBeforeInOut = node.unexpectedBeforeInOut.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let inOut = node.inOut.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenInOutAndName = node.unexpectedBetweenInOutAndName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let name = node.name.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenNameAndSecondName = node.unexpectedBetweenNameAndSecondName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let secondName = node.secondName.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenSecondNameAndColon = node.unexpectedBetweenSecondNameAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = node.colon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenColonAndType = node.unexpectedBetweenColonAndType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    let unexpectedBetweenTypeAndEllipsis = node.unexpectedBetweenTypeAndEllipsis.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let ellipsis = node.ellipsis.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenEllipsisAndInitializer = node.unexpectedBetweenEllipsisAndInitializer.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let initializer = node.initializer.map(self.visit)?.cast(InitializerClauseSyntax.self)
    let unexpectedBetweenInitializerAndTrailingComma = node.unexpectedBetweenInitializerAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(TupleTypeElementSyntax(unexpectedBeforeInOut, inOut: inOut, unexpectedBetweenInOutAndName, name: name, unexpectedBetweenNameAndSecondName, secondName: secondName, unexpectedBetweenSecondNameAndColon, colon: colon, unexpectedBetweenColonAndType, type: type, unexpectedBetweenTypeAndEllipsis, ellipsis: ellipsis, unexpectedBetweenEllipsisAndInitializer, initializer: initializer, unexpectedBetweenInitializerAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: TupleTypeElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(TupleTypeElementSyntax.self)
    }
    return Syntax(TupleTypeElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: TupleTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndElements = node.unexpectedBetweenLeftParenAndElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(TupleTypeElementListSyntax.self)
    let unexpectedBetweenElementsAndRightParen = node.unexpectedBetweenElementsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return TypeSyntax(TupleTypeSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndElements, elements: elements, unexpectedBetweenElementsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: FunctionTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndArguments = node.unexpectedBetweenLeftParenAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = self.visit(node.arguments).cast(TupleTypeElementListSyntax.self)
    let unexpectedBetweenArgumentsAndRightParen = node.unexpectedBetweenArgumentsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    let unexpectedBetweenRightParenAndAsyncKeyword = node.unexpectedBetweenRightParenAndAsyncKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asyncKeyword = node.asyncKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword = node.unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let throwsOrRethrowsKeyword = node.throwsOrRethrowsKeyword.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenThrowsOrRethrowsKeywordAndArrow = node.unexpectedBetweenThrowsOrRethrowsKeywordAndArrow.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arrow = self.visit(node.arrow).cast(TokenSyntax.self)
    let unexpectedBetweenArrowAndReturnType = node.unexpectedBetweenArrowAndReturnType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let returnType = self.visit(node.returnType).cast(TypeSyntax.self)
    return TypeSyntax(FunctionTypeSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndArguments, arguments: arguments, unexpectedBetweenArgumentsAndRightParen, rightParen: rightParen, unexpectedBetweenRightParenAndAsyncKeyword, asyncKeyword: asyncKeyword, unexpectedBetweenAsyncKeywordAndThrowsOrRethrowsKeyword, throwsOrRethrowsKeyword: throwsOrRethrowsKeyword, unexpectedBetweenThrowsOrRethrowsKeywordAndArrow, arrow: arrow, unexpectedBetweenArrowAndReturnType, returnType: returnType))
  }
  
  open override func visit(_ node: AttributedTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeSpecifier = node.unexpectedBeforeSpecifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let specifier = node.specifier.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenSpecifierAndAttributes = node.unexpectedBetweenSpecifierAndAttributes.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let attributes = node.attributes.map(self.visit)?.cast(AttributeListSyntax.self)
    let unexpectedBetweenAttributesAndBaseType = node.unexpectedBetweenAttributesAndBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = self.visit(node.baseType).cast(TypeSyntax.self)
    return TypeSyntax(AttributedTypeSyntax(unexpectedBeforeSpecifier, specifier: specifier, unexpectedBetweenSpecifierAndAttributes, attributes: attributes, unexpectedBetweenAttributesAndBaseType, baseType: baseType))
  }
  
  open override func visit(_ node: GenericArgumentListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(GenericArgumentSyntax.self)
    }
    return Syntax(GenericArgumentListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: GenericArgumentSyntax) -> Syntax {
    let unexpectedBeforeArgumentType = node.unexpectedBeforeArgumentType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let argumentType = self.visit(node.argumentType).cast(TypeSyntax.self)
    let unexpectedBetweenArgumentTypeAndTrailingComma = node.unexpectedBetweenArgumentTypeAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(GenericArgumentSyntax(unexpectedBeforeArgumentType, argumentType: argumentType, unexpectedBetweenArgumentTypeAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: GenericArgumentClauseSyntax) -> Syntax {
    let unexpectedBeforeLeftAngleBracket = node.unexpectedBeforeLeftAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftAngleBracket = self.visit(node.leftAngleBracket).cast(TokenSyntax.self)
    let unexpectedBetweenLeftAngleBracketAndArguments = node.unexpectedBetweenLeftAngleBracketAndArguments.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let arguments = self.visit(node.arguments).cast(GenericArgumentListSyntax.self)
    let unexpectedBetweenArgumentsAndRightAngleBracket = node.unexpectedBetweenArgumentsAndRightAngleBracket.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightAngleBracket = self.visit(node.rightAngleBracket).cast(TokenSyntax.self)
    return Syntax(GenericArgumentClauseSyntax(unexpectedBeforeLeftAngleBracket, leftAngleBracket: leftAngleBracket, unexpectedBetweenLeftAngleBracketAndArguments, arguments: arguments, unexpectedBetweenArgumentsAndRightAngleBracket, rightAngleBracket: rightAngleBracket))
  }
  
  open override func visit(_ node: NamedOpaqueReturnTypeSyntax) -> TypeSyntax {
    let unexpectedBeforeGenericParameters = node.unexpectedBeforeGenericParameters.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let genericParameters = self.visit(node.genericParameters).cast(GenericParameterClauseSyntax.self)
    let unexpectedBetweenGenericParametersAndBaseType = node.unexpectedBetweenGenericParametersAndBaseType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let baseType = self.visit(node.baseType).cast(TypeSyntax.self)
    return TypeSyntax(NamedOpaqueReturnTypeSyntax(unexpectedBeforeGenericParameters, genericParameters: genericParameters, unexpectedBetweenGenericParametersAndBaseType, baseType: baseType))
  }
  
  open override func visit(_ node: TypeAnnotationSyntax) -> Syntax {
    let unexpectedBeforeColon = node.unexpectedBeforeColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndType = node.unexpectedBetweenColonAndType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    return Syntax(TypeAnnotationSyntax(unexpectedBeforeColon, colon: colon, unexpectedBetweenColonAndType, type: type))
  }
  
  open override func visit(_ node: EnumCasePatternSyntax) -> PatternSyntax {
    let unexpectedBeforeType = node.unexpectedBeforeType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = node.type.map(self.visit)?.cast(TypeSyntax.self)
    let unexpectedBetweenTypeAndPeriod = node.unexpectedBetweenTypeAndPeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let period = self.visit(node.period).cast(TokenSyntax.self)
    let unexpectedBetweenPeriodAndCaseName = node.unexpectedBetweenPeriodAndCaseName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let caseName = self.visit(node.caseName).cast(TokenSyntax.self)
    let unexpectedBetweenCaseNameAndAssociatedTuple = node.unexpectedBetweenCaseNameAndAssociatedTuple.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let associatedTuple = node.associatedTuple.map(self.visit)?.cast(TuplePatternSyntax.self)
    return PatternSyntax(EnumCasePatternSyntax(unexpectedBeforeType, type: type, unexpectedBetweenTypeAndPeriod, period: period, unexpectedBetweenPeriodAndCaseName, caseName: caseName, unexpectedBetweenCaseNameAndAssociatedTuple, associatedTuple: associatedTuple))
  }
  
  open override func visit(_ node: IsTypePatternSyntax) -> PatternSyntax {
    let unexpectedBeforeIsKeyword = node.unexpectedBeforeIsKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let isKeyword = self.visit(node.isKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenIsKeywordAndType = node.unexpectedBetweenIsKeywordAndType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    return PatternSyntax(IsTypePatternSyntax(unexpectedBeforeIsKeyword, isKeyword: isKeyword, unexpectedBetweenIsKeywordAndType, type: type))
  }
  
  open override func visit(_ node: OptionalPatternSyntax) -> PatternSyntax {
    let unexpectedBeforeSubPattern = node.unexpectedBeforeSubPattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let subPattern = self.visit(node.subPattern).cast(PatternSyntax.self)
    let unexpectedBetweenSubPatternAndQuestionMark = node.unexpectedBetweenSubPatternAndQuestionMark.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let questionMark = self.visit(node.questionMark).cast(TokenSyntax.self)
    return PatternSyntax(OptionalPatternSyntax(unexpectedBeforeSubPattern, subPattern: subPattern, unexpectedBetweenSubPatternAndQuestionMark, questionMark: questionMark))
  }
  
  open override func visit(_ node: IdentifierPatternSyntax) -> PatternSyntax {
    let unexpectedBeforeIdentifier = node.unexpectedBeforeIdentifier.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let identifier = self.visit(node.identifier).cast(TokenSyntax.self)
    return PatternSyntax(IdentifierPatternSyntax(unexpectedBeforeIdentifier, identifier: identifier))
  }
  
  open override func visit(_ node: AsTypePatternSyntax) -> PatternSyntax {
    let unexpectedBeforePattern = node.unexpectedBeforePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndAsKeyword = node.unexpectedBetweenPatternAndAsKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let asKeyword = self.visit(node.asKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenAsKeywordAndType = node.unexpectedBetweenAsKeywordAndType.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let type = self.visit(node.type).cast(TypeSyntax.self)
    return PatternSyntax(AsTypePatternSyntax(unexpectedBeforePattern, pattern: pattern, unexpectedBetweenPatternAndAsKeyword, asKeyword: asKeyword, unexpectedBetweenAsKeywordAndType, type: type))
  }
  
  open override func visit(_ node: TuplePatternSyntax) -> PatternSyntax {
    let unexpectedBeforeLeftParen = node.unexpectedBeforeLeftParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let leftParen = self.visit(node.leftParen).cast(TokenSyntax.self)
    let unexpectedBetweenLeftParenAndElements = node.unexpectedBetweenLeftParenAndElements.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let elements = self.visit(node.elements).cast(TuplePatternElementListSyntax.self)
    let unexpectedBetweenElementsAndRightParen = node.unexpectedBetweenElementsAndRightParen.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let rightParen = self.visit(node.rightParen).cast(TokenSyntax.self)
    return PatternSyntax(TuplePatternSyntax(unexpectedBeforeLeftParen, leftParen: leftParen, unexpectedBetweenLeftParenAndElements, elements: elements, unexpectedBetweenElementsAndRightParen, rightParen: rightParen))
  }
  
  open override func visit(_ node: WildcardPatternSyntax) -> PatternSyntax {
    let unexpectedBeforeWildcard = node.unexpectedBeforeWildcard.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let wildcard = self.visit(node.wildcard).cast(TokenSyntax.self)
    let unexpectedBetweenWildcardAndTypeAnnotation = node.unexpectedBetweenWildcardAndTypeAnnotation.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let typeAnnotation = node.typeAnnotation.map(self.visit)?.cast(TypeAnnotationSyntax.self)
    return PatternSyntax(WildcardPatternSyntax(unexpectedBeforeWildcard, wildcard: wildcard, unexpectedBetweenWildcardAndTypeAnnotation, typeAnnotation: typeAnnotation))
  }
  
  open override func visit(_ node: TuplePatternElementSyntax) -> Syntax {
    let unexpectedBeforeLabelName = node.unexpectedBeforeLabelName.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let labelName = node.labelName.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLabelNameAndLabelColon = node.unexpectedBetweenLabelNameAndLabelColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let labelColon = node.labelColon.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenLabelColonAndPattern = node.unexpectedBetweenLabelColonAndPattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let pattern = self.visit(node.pattern).cast(PatternSyntax.self)
    let unexpectedBetweenPatternAndTrailingComma = node.unexpectedBetweenPatternAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(TuplePatternElementSyntax(unexpectedBeforeLabelName, labelName: labelName, unexpectedBetweenLabelNameAndLabelColon, labelColon: labelColon, unexpectedBetweenLabelColonAndPattern, pattern: pattern, unexpectedBetweenPatternAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: ExpressionPatternSyntax) -> PatternSyntax {
    let unexpectedBeforeExpression = node.unexpectedBeforeExpression.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let expression = self.visit(node.expression).cast(ExprSyntax.self)
    return PatternSyntax(ExpressionPatternSyntax(unexpectedBeforeExpression, expression: expression))
  }
  
  open override func visit(_ node: TuplePatternElementListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(TuplePatternElementSyntax.self)
    }
    return Syntax(TuplePatternElementListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: ValueBindingPatternSyntax) -> PatternSyntax {
    let unexpectedBeforeLetOrVarKeyword = node.unexpectedBeforeLetOrVarKeyword.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let letOrVarKeyword = self.visit(node.letOrVarKeyword).cast(TokenSyntax.self)
    let unexpectedBetweenLetOrVarKeywordAndValuePattern = node.unexpectedBetweenLetOrVarKeywordAndValuePattern.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let valuePattern = self.visit(node.valuePattern).cast(PatternSyntax.self)
    return PatternSyntax(ValueBindingPatternSyntax(unexpectedBeforeLetOrVarKeyword, letOrVarKeyword: letOrVarKeyword, unexpectedBetweenLetOrVarKeywordAndValuePattern, valuePattern: valuePattern))
  }
  
  open override func visit(_ node: AvailabilitySpecListSyntax) -> Syntax {
    let formattedChildren = node.children(viewMode: .all).map {
      self.visit($0).cast(AvailabilityArgumentSyntax.self)
    }
    return Syntax(AvailabilitySpecListSyntax(formattedChildren))
  }
  
  open override func visit(_ node: AvailabilityArgumentSyntax) -> Syntax {
    let unexpectedBeforeEntry = node.unexpectedBeforeEntry.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let entry = self.visit(node.entry).cast(Syntax.self)
    let unexpectedBetweenEntryAndTrailingComma = node.unexpectedBetweenEntryAndTrailingComma.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let trailingComma = node.trailingComma.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(AvailabilityArgumentSyntax(unexpectedBeforeEntry, entry: entry, unexpectedBetweenEntryAndTrailingComma, trailingComma: trailingComma))
  }
  
  open override func visit(_ node: AvailabilityLabeledArgumentSyntax) -> Syntax {
    let unexpectedBeforeLabel = node.unexpectedBeforeLabel.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let label = self.visit(node.label).cast(TokenSyntax.self)
    let unexpectedBetweenLabelAndColon = node.unexpectedBetweenLabelAndColon.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let colon = self.visit(node.colon).cast(TokenSyntax.self)
    let unexpectedBetweenColonAndValue = node.unexpectedBetweenColonAndValue.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let value = self.visit(node.value).cast(Syntax.self)
    return Syntax(AvailabilityLabeledArgumentSyntax(unexpectedBeforeLabel, label: label, unexpectedBetweenLabelAndColon, colon: colon, unexpectedBetweenColonAndValue, value: value))
  }
  
  open override func visit(_ node: AvailabilityVersionRestrictionSyntax) -> Syntax {
    let unexpectedBeforePlatform = node.unexpectedBeforePlatform.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let platform = self.visit(node.platform).cast(TokenSyntax.self)
    let unexpectedBetweenPlatformAndVersion = node.unexpectedBetweenPlatformAndVersion.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let version = node.version.map(self.visit)?.cast(VersionTupleSyntax.self)
    return Syntax(AvailabilityVersionRestrictionSyntax(unexpectedBeforePlatform, platform: platform, unexpectedBetweenPlatformAndVersion, version: version))
  }
  
  open override func visit(_ node: VersionTupleSyntax) -> Syntax {
    let unexpectedBeforeMajorMinor = node.unexpectedBeforeMajorMinor.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let majorMinor = self.visit(node.majorMinor).cast(Syntax.self)
    let unexpectedBetweenMajorMinorAndPatchPeriod = node.unexpectedBetweenMajorMinorAndPatchPeriod.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let patchPeriod = node.patchPeriod.map(self.visit)?.cast(TokenSyntax.self)
    let unexpectedBetweenPatchPeriodAndPatchVersion = node.unexpectedBetweenPatchPeriodAndPatchVersion.map(self.visit)?.cast(UnexpectedNodesSyntax.self)
    let patchVersion = node.patchVersion.map(self.visit)?.cast(TokenSyntax.self)
    return Syntax(VersionTupleSyntax(unexpectedBeforeMajorMinor, majorMinor: majorMinor, unexpectedBetweenMajorMinorAndPatchPeriod, patchPeriod: patchPeriod, unexpectedBetweenPatchPeriodAndPatchVersion, patchVersion: patchVersion))
  }
  
  open override func visit(_ node: TokenSyntax) -> Syntax {
    var leadingTrivia = node.leadingTrivia
    var trailingTrivia = node.trailingTrivia
    switch node.tokenKind {
    case .associatedtypeKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .classKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .deinitKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .enumKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .extensionKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .funcKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .importKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .initKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .inoutKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .letKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .operatorKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .precedencegroupKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .protocolKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .structKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .subscriptKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .typealiasKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .varKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .fileprivateKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .internalKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .privateKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .publicKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .staticKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .deferKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .ifKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .guardKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .doKeyword: 
      break
    case .repeatKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .elseKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .forKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .inKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .whileKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .returnKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .breakKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .continueKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .fallthroughKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .switchKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .caseKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .defaultKeyword: 
      break
    case .whereKeyword: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .catchKeyword: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
    case .throwKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .asKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .anyKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .falseKeyword: 
      break
    case .isKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .nilKeyword: 
      break
    case .rethrowsKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .superKeyword: 
      break
    case .selfKeyword: 
      break
    case .capitalSelfKeyword: 
      break
    case .trueKeyword: 
      break
    case .tryKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .throwsKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .__file__Keyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .__line__Keyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .__column__Keyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .__function__Keyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .__dso_handle__Keyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .wildcardKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .leftParen: 
      break
    case .rightParen: 
      break
    case .leftBrace: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
    case .rightBrace: 
      break
    case .leftSquareBracket: 
      break
    case .rightSquareBracket: 
      break
    case .leftAngle: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .rightAngle: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .period: 
      break
    case .prefixPeriod: 
      break
    case .comma: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .ellipsis: 
      break
    case .colon: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .semicolon: 
      break
    case .equal: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .atSign: 
      break
    case .pound: 
      break
    case .prefixAmpersand: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .arrow: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .backtick: 
      break
    case .backslash: 
      break
    case .exclamationMark: 
      break
    case .postfixQuestionMark: 
      break
    case .infixQuestionMark: 
      break
    case .stringQuote: 
      break
    case .singleQuote: 
      break
    case .multilineStringQuote: 
      break
    case .poundKeyPathKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundLineKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundSelectorKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundFileKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundFileIDKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundFilePathKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundColumnKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundFunctionKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundDsohandleKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundAssertKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundSourceLocationKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundWarningKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundErrorKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundIfKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundElseKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundElseifKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundEndifKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundAvailableKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundUnavailableKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundFileLiteralKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundImageLiteralKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundColorLiteralKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .poundHasSymbolKeyword: 
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .integerLiteral: 
      break
    case .floatingLiteral: 
      break
    case .stringLiteral: 
      break
    case .regexLiteral: 
      break
    case .unknown: 
      break
    case .identifier: 
      break
    case .unspacedBinaryOperator: 
      break
    case .spacedBinaryOperator: 
      if leadingTrivia.isEmpty && lastRewrittenToken?.trailingTrivia.isEmpty != false {
        leadingTrivia += .space
      }
      if trailingTrivia.isEmpty {
        trailingTrivia += .space
      }
    case .postfixOperator: 
      break
    case .prefixOperator: 
      break
    case .dollarIdentifier: 
      break
    case .rawStringDelimiter: 
      break
    case .stringSegment: 
      break
    case .stringInterpolationAnchor: 
      break
    case .yield: 
      break
    case .eof: 
      break
    case .contextualKeyword: 
      switch node.text {
      case "async":
        if trailingTrivia.isEmpty {
          trailingTrivia += .space
        }
      default:
        break
      }
    }
    leadingTrivia = leadingTrivia.indented(indentation: indentation)
    trailingTrivia = trailingTrivia.indented(indentation: indentation)
    let rewritten = TokenSyntax(
      node.tokenKind,
      leadingTrivia: leadingTrivia,
      trailingTrivia: trailingTrivia,
      presence: node.presence
    )
    lastRewrittenToken = rewritten
    return Syntax(rewritten)
  }
}
